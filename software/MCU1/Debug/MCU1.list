
MCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f140  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  0800f340  0800f340  0001f340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011698  08011698  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08011698  08011698  00021698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116a0  080116a0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116a0  080116a0  000216a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116a4  080116a4  000216a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080116a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006964  2000007c  08011724  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200069e0  08011724  000369e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d324  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005603  00000000  00000000  0005d3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  000629d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  00063f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030fe9  00000000  00000000  000652f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e0d8  00000000  00000000  000962d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd56c  00000000  00000000  000b43b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b191d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  001b1998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f328 	.word	0x0800f328

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	0800f328 	.word	0x0800f328

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fc49 	bl	8000e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f80c 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f95a 	bl	80008a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005f0:	f000 f89a 	bl	8000728 <MX_I2C2_Init>
  MX_I2C4_Init();
 80005f4:	f000 f8d8 	bl	80007a8 <MX_I2C4_Init>
  MX_SPI4_Init();
 80005f8:	f000 f916 	bl	8000828 <MX_SPI4_Init>
  MX_LWIP_Init();
 80005fc:	f003 f88c 	bl	8003718 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x20>
	...

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0b8      	sub	sp, #224	; 0xe0
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00d ff60 	bl	800e4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2290      	movs	r2, #144	; 0x90
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f00d ff51 	bl	800e4d8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <SystemClock_Config+0x11c>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a39      	ldr	r2, [pc, #228]	; (8000720 <SystemClock_Config+0x11c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <SystemClock_Config+0x11c>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <SystemClock_Config+0x120>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a34      	ldr	r2, [pc, #208]	; (8000724 <SystemClock_Config+0x120>)
 8000654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b32      	ldr	r3, [pc, #200]	; (8000724 <SystemClock_Config+0x120>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000666:	2301      	movs	r3, #1
 8000668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000688:	23d8      	movs	r3, #216	; 0xd8
 800068a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 ff7c 	bl	800259c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006aa:	f000 f9d9 	bl	8000a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ae:	f001 ff25 	bl	80024fc <HAL_PWREx_EnableOverDrive>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006b8:	f000 f9d2 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006e2:	2107      	movs	r1, #7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f9cb 	bl	8002a80 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80006f0:	f000 f9b6 	bl	8000a60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C4;
 80006f4:	f44f 3320 	mov.w	r3, #163840	; 0x28000
 80006f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80006fe:	2300      	movs	r3, #0
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fb86 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000712:	f000 f9a5 	bl	8000a60 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	37e0      	adds	r7, #224	; 0xe0
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C2_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C2_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C2_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C2_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C2_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_I2C2_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C2_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <MX_I2C2_Init+0x74>)
 8000764:	f001 fda2 	bl	80022ac <HAL_I2C_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 f977 	bl	8000a60 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C2_Init+0x74>)
 8000776:	f001 fe29 	bl	80023cc <HAL_I2CEx_ConfigAnalogFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 f96e 	bl	8000a60 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2C2_Init+0x74>)
 8000788:	f001 fe6b 	bl	8002462 <HAL_I2CEx_ConfigDigitalFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f965 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000026c 	.word	0x2000026c
 80007a0:	40005800 	.word	0x40005800
 80007a4:	20404768 	.word	0x20404768

080007a8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_I2C4_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_I2C4_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_I2C4_Init+0x74>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_I2C4_Init+0x7c>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_I2C4_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_I2C4_Init+0x74>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_I2C4_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_I2C4_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2C4_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2C4_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2C4_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80007e2:	480e      	ldr	r0, [pc, #56]	; (800081c <MX_I2C4_Init+0x74>)
 80007e4:	f001 fd62 	bl	80022ac <HAL_I2C_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80007ee:	f000 f937 	bl	8000a60 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <MX_I2C4_Init+0x74>)
 80007f6:	f001 fde9 	bl	80023cc <HAL_I2CEx_ConfigAnalogFilter>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000800:	f000 f92e 	bl	8000a60 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_I2C4_Init+0x74>)
 8000808:	f001 fe2b 	bl	8002462 <HAL_I2CEx_ConfigDigitalFilter>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f925 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000220 	.word	0x20000220
 8000820:	40006000 	.word	0x40006000
 8000824:	20404768 	.word	0x20404768

08000828 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_SPI4_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_SPI4_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI4_Init+0x74>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI4_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI4_Init+0x74>)
 8000842:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000846:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI4_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI4_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI4_Init+0x74>)
 8000856:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800085a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI4_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI4_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI4_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI4_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI4_Init+0x74>)
 8000876:	2207      	movs	r2, #7
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI4_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI4_Init+0x74>)
 8000882:	2208      	movs	r2, #8
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI4_Init+0x74>)
 8000888:	f002 feb4 	bl	80035f4 <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 f8e5 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200002b8 	.word	0x200002b8
 80008a0:	40013400 	.word	0x40013400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b64      	ldr	r3, [pc, #400]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a63      	ldr	r2, [pc, #396]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b5e      	ldr	r3, [pc, #376]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a5d      	ldr	r2, [pc, #372]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b5b      	ldr	r3, [pc, #364]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4b58      	ldr	r3, [pc, #352]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a57      	ldr	r2, [pc, #348]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b52      	ldr	r3, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a51      	ldr	r2, [pc, #324]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b4f      	ldr	r3, [pc, #316]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	4b4c      	ldr	r3, [pc, #304]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a4b      	ldr	r2, [pc, #300]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000932:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a45      	ldr	r2, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a3f      	ldr	r2, [pc, #252]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x1a8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MCU1_GPIO_OUT1_Pin|I2C_WP_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000968:	4839      	ldr	r0, [pc, #228]	; (8000a50 <MX_GPIO_Init+0x1ac>)
 800096a:	f001 fc85 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU1_GPIO_OUT2_GPIO_Port, MCU1_GPIO_OUT2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2101      	movs	r1, #1
 8000972:	4838      	ldr	r0, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x1b0>)
 8000974:	f001 fc80 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_OUT_GPIO_Port, TRIG_OUT_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <MX_GPIO_Init+0x1b4>)
 8000980:	f001 fc7a 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU1_GPIO_OUT1_Pin I2C_WP_Pin */
  GPIO_InitStruct.Pin = MCU1_GPIO_OUT1_Pin|I2C_WP_Pin;
 8000984:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <MX_GPIO_Init+0x1ac>)
 800099e:	f001 fac1 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU1_GPIO_OUT2_Pin */
  GPIO_InitStruct.Pin = MCU1_GPIO_OUT2_Pin;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MCU1_GPIO_OUT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4826      	ldr	r0, [pc, #152]	; (8000a54 <MX_GPIO_Init+0x1b0>)
 80009ba:	f001 fab3 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU1_STATUS_IN_Pin */
  GPIO_InitStruct.Pin = MCU1_STATUS_IN_Pin;
 80009be:	2304      	movs	r3, #4
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU1_STATUS_IN_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4820      	ldr	r0, [pc, #128]	; (8000a54 <MX_GPIO_Init+0x1b0>)
 80009d2:	f001 faa7 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EN_Pin */
  GPIO_InitStruct.Pin = TRIG_EN_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRIG_EN_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481b      	ldr	r0, [pc, #108]	; (8000a58 <MX_GPIO_Init+0x1b4>)
 80009ec:	f001 fa9a 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = TRIG_OUT_Pin;
 80009f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <MX_GPIO_Init+0x1b4>)
 8000a0a:	f001 fa8b 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_IN_Pin */
  GPIO_InitStruct.Pin = TRIG_IN_Pin;
 8000a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRIG_IN_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_GPIO_Init+0x1b4>)
 8000a24:	f001 fa7e 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_DEFAULT_Pin */
  GPIO_InitStruct.Pin = MCU_DEFAULT_Pin;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCU_DEFAULT_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_GPIO_Init+0x1b8>)
 8000a3e:	f001 fa71 	bl	8001f24 <HAL_GPIO_Init>

}
 8000a42:	bf00      	nop
 8000a44:	3730      	adds	r7, #48	; 0x30
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40021400 	.word	0x40021400
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020000 	.word	0x40020000

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2e      	ldr	r2, [pc, #184]	; (8000b90 <HAL_I2C_MspInit+0xd8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d128      	bne.n	8000b2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af6:	2312      	movs	r3, #18
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b02:	2304      	movs	r3, #4
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4822      	ldr	r0, [pc, #136]	; (8000b98 <HAL_I2C_MspInit+0xe0>)
 8000b0e:	f001 fa09 	bl	8001f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000b2a:	e02d      	b.n	8000b88 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C4)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <HAL_I2C_MspInit+0xe4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d128      	bne.n	8000b88 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0320 	and.w	r3, r3, #32
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b4e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b54:	2312      	movs	r3, #18
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_I2C_MspInit+0xe0>)
 8000b6c:	f001 f9da 	bl	8001f24 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_I2C_MspInit+0xdc>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3730      	adds	r7, #48	; 0x30
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40005800 	.word	0x40005800
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40006000 	.word	0x40006000

08000ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x7c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d128      	bne.n	8000c14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_SPI_MspInit+0x80>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000bf2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000c04:	2305      	movs	r3, #5
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_SPI_MspInit+0x84>)
 8000c10:	f001 f988 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40013400 	.word	0x40013400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40021000 	.word	0x40021000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f93a 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x50>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x16>
		heap_end = &end;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <_sbrk+0x50>)
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <_sbrk+0x54>)
 8000d74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <_sbrk+0x50>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <_sbrk+0x50>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	466a      	mov	r2, sp
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d905      	bls.n	8000d96 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <_sbrk+0x58>)
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d94:	e006      	b.n	8000da4 <_sbrk+0x44>
	}

	heap_end += incr;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <_sbrk+0x50>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <_sbrk+0x50>)
 8000da0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000098 	.word	0x20000098
 8000db4:	200069e0 	.word	0x200069e0
 8000db8:	200069dc 	.word	0x200069dc

08000dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <SystemInit+0x5c>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <SystemInit+0x5c>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <SystemInit+0x60>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a11      	ldr	r2, [pc, #68]	; (8000e1c <SystemInit+0x60>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <SystemInit+0x60>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <SystemInit+0x60>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <SystemInit+0x60>)
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <SystemInit+0x64>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <SystemInit+0x60>)
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <SystemInit+0x68>)
 8000df2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <SystemInit+0x60>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <SystemInit+0x60>)
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x60>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SystemInit+0x5c>)
 8000e08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e0c:	609a      	str	r2, [r3, #8]
#endif
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	fef6ffff 	.word	0xfef6ffff
 8000e24:	24003010 	.word	0x24003010

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2e:	e003      	b.n	8000e38 <LoopCopyDataInit>

08000e30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e36:	3104      	adds	r1, #4

08000e38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e40:	d3f6      	bcc.n	8000e30 <CopyDataInit>
  ldr  r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e44:	e002      	b.n	8000e4c <LoopFillZerobss>

08000e46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e48:	f842 3b04 	str.w	r3, [r2], #4

08000e4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e50:	d3f9      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e52:	f7ff ffb3 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f00d fb01 	bl	800e45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fbc1 	bl	80005e0 <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e64:	080116a8 	.word	0x080116a8
  ldr  r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e6c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000e70:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e74:	200069e0 	.word	0x200069e0

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>

08000e7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 f92c 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f805 	bl	8000e94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fdf1 	bl	8000a70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f939 	bl	800112a <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ed0:	f000 f90f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000031c 	.word	0x2000031c

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2000031c 	.word	0x2000031c

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_Delay+0x40>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	05fa0000 	.word	0x05fa0000

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001154:	4ba9      	ldr	r3, [pc, #676]	; (80013fc <HAL_ETH_Init+0x2b8>)
 8001156:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e183      	b.n	8001472 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d106      	bne.n	8001184 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f002 fb0a 	bl	8003798 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001184:	4b9e      	ldr	r3, [pc, #632]	; (8001400 <HAL_ETH_Init+0x2bc>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001188:	4a9d      	ldr	r2, [pc, #628]	; (8001400 <HAL_ETH_Init+0x2bc>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118e:	6453      	str	r3, [r2, #68]	; 0x44
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <HAL_ETH_Init+0x2bc>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800119c:	4b99      	ldr	r3, [pc, #612]	; (8001404 <HAL_ETH_Init+0x2c0>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011a8:	4b96      	ldr	r3, [pc, #600]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4994      	ldr	r1, [pc, #592]	; (8001404 <HAL_ETH_Init+0x2c0>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011cc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ce:	f7ff fea5 	bl	8000f1c <HAL_GetTick>
 80011d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011d4:	e011      	b.n	80011fa <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011d6:	f7ff fea1 	bl	8000f1c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e4:	d909      	bls.n	80011fa <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e13b      	b.n	8001472 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1e4      	bne.n	80011d6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f023 031c 	bic.w	r3, r3, #28
 800121a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800121c:	f001 fdf0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8001220:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4a78      	ldr	r2, [pc, #480]	; (8001408 <HAL_ETH_Init+0x2c4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d908      	bls.n	800123c <HAL_ETH_Init+0xf8>
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4a77      	ldr	r2, [pc, #476]	; (800140c <HAL_ETH_Init+0x2c8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d804      	bhi.n	800123c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e027      	b.n	800128c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4a73      	ldr	r2, [pc, #460]	; (800140c <HAL_ETH_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d908      	bls.n	8001256 <HAL_ETH_Init+0x112>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_ETH_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d804      	bhi.n	8001256 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f043 030c 	orr.w	r3, r3, #12
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	e01a      	b.n	800128c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4a6d      	ldr	r2, [pc, #436]	; (8001410 <HAL_ETH_Init+0x2cc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d903      	bls.n	8001266 <HAL_ETH_Init+0x122>
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4a6c      	ldr	r2, [pc, #432]	; (8001414 <HAL_ETH_Init+0x2d0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d911      	bls.n	800128a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4a6a      	ldr	r2, [pc, #424]	; (8001414 <HAL_ETH_Init+0x2d0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d908      	bls.n	8001280 <HAL_ETH_Init+0x13c>
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4a69      	ldr	r2, [pc, #420]	; (8001418 <HAL_ETH_Init+0x2d4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d804      	bhi.n	8001280 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	e005      	b.n	800128c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	e000      	b.n	800128c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800128a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001294:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001298:	2100      	movs	r1, #0
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fb16 	bl	80018cc <HAL_ETH_WritePHYRegister>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 fba3 	bl	80019f8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e0d9      	b.n	8001472 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f7ff fe38 	bl	8000f34 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80a7 	beq.w	800141c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ce:	f7ff fe25 	bl	8000f1c <HAL_GetTick>
 80012d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	461a      	mov	r2, r3
 80012da:	2101      	movs	r1, #1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa8d 	bl	80017fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012e2:	f7ff fe1b 	bl	8000f1c <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d90f      	bls.n	8001314 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fb7c 	bl	80019f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e0ae      	b.n	8001472 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0da      	beq.n	80012d4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800131e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fad1 	bl	80018cc <HAL_ETH_WritePHYRegister>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fb5e 	bl	80019f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001344:	2301      	movs	r3, #1
 8001346:	e094      	b.n	8001472 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff fde8 	bl	8000f1c <HAL_GetTick>
 800134c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	461a      	mov	r2, r3
 8001354:	2101      	movs	r1, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fa50 	bl	80017fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800135c:	f7ff fdde 	bl	8000f1c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d90f      	bls.n	800138e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001372:	6939      	ldr	r1, [r7, #16]
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fb3f 	bl	80019f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e071      	b.n	8001472 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0da      	beq.n	800134e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	461a      	mov	r2, r3
 800139e:	211f      	movs	r1, #31
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fa2b 	bl	80017fc <HAL_ETH_ReadPHYRegister>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fb20 	bl	80019f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013c0:	2301      	movs	r3, #1
 80013c2:	e056      	b.n	8001472 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	e002      	b.n	80013de <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e037      	b.n	8001460 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	e032      	b.n	8001460 <HAL_ETH_Init+0x31c>
 80013fa:	bf00      	nop
 80013fc:	03938700 	.word	0x03938700
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	01312cff 	.word	0x01312cff
 800140c:	02160ebf 	.word	0x02160ebf
 8001410:	039386ff 	.word	0x039386ff
 8001414:	05f5e0ff 	.word	0x05f5e0ff
 8001418:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800142c:	4313      	orrs	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fa49 	bl	80018cc <HAL_ETH_WritePHYRegister>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fad6 	bl	80019f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e00c      	b.n	8001472 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001458:	f640 70ff 	movw	r0, #4095	; 0xfff
 800145c:	f7ff fd6a 	bl	8000f34 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001460:	6939      	ldr	r1, [r7, #16]
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fac8 	bl	80019f8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop

0800147c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001494:	2b01      	cmp	r3, #1
 8001496:	d101      	bne.n	800149c <HAL_ETH_DMATxDescListInit+0x20>
 8001498:	2302      	movs	r3, #2
 800149a:	e052      	b.n	8001542 <HAL_ETH_DMATxDescListInit+0xc6>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e030      	b.n	800151a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	4413      	add	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d105      	bne.n	80014f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d208      	bcs.n	800150e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	015b      	lsls	r3, r3, #5
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	461a      	mov	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	e002      	b.n	8001514 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	3301      	adds	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d3ca      	bcc.n	80014b8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f241 0310 	movw	r3, #4112	; 0x1010
 800152c:	440b      	add	r3, r1
 800152e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800154e:	b480      	push	{r7}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_ETH_DMARxDescListInit+0x20>
 800156a:	2302      	movs	r3, #2
 800156c:	e056      	b.n	800161c <HAL_ETH_DMARxDescListInit+0xce>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e034      	b.n	80015f4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	4413      	add	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800159a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80015a2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d208      	bcs.n	80015e8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e002      	b.n	80015ee <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3301      	adds	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3c6      	bcc.n	800158a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6819      	ldr	r1, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	f241 030c 	movw	r3, #4108	; 0x100c
 8001606:	440b      	add	r3, r1
 8001608:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_ETH_TransmitFrame+0x24>
 8001648:	2302      	movs	r3, #2
 800164a:	e0cd      	b.n	80017e8 <HAL_ETH_TransmitFrame+0x1c0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001672:	2301      	movs	r3, #1
 8001674:	e0b8      	b.n	80017e8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	da09      	bge.n	8001694 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2212      	movs	r2, #18
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0a9      	b.n	80017e8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800169a:	4293      	cmp	r3, r2
 800169c:	d915      	bls.n	80016ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4a54      	ldr	r2, [pc, #336]	; (80017f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0a9b      	lsrs	r3, r3, #10
 80016a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ae:	fba3 1302 	umull	r1, r3, r3, r2
 80016b2:	0a9b      	lsrs	r3, r3, #10
 80016b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d005      	beq.n	80016ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e001      	b.n	80016ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d11c      	bne.n	800170e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
 800170c:	e04b      	b.n	80017a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	e044      	b.n	800179e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001722:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d107      	bne.n	800173a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001738:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001742:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3b01      	subs	r3, #1
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	429a      	cmp	r2, r3
 800174c:	d116      	bne.n	800177c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800175c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001762:	fb02 f203 	mul.w	r2, r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	4413      	add	r3, r2
 800176a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800176e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800177a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800178a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	3301      	adds	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3b6      	bcc.n	8001714 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	f241 0314 	movw	r3, #4116	; 0x1014
 80017ae:	4413      	add	r3, r2
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f241 0314 	movw	r3, #4116	; 0x1014
 80017c2:	4413      	add	r3, r2
 80017c4:	2204      	movs	r2, #4
 80017c6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f241 0304 	movw	r3, #4100	; 0x1004
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	ac02b00b 	.word	0xac02b00b
 80017f8:	fffffa0c 	.word	0xfffffa0c

080017fc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	460b      	mov	r3, r1
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b82      	cmp	r3, #130	; 0x82
 800181c:	d101      	bne.n	8001822 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
 8001820:	e050      	b.n	80018c4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2282      	movs	r2, #130	; 0x82
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 031c 	and.w	r3, r3, #28
 8001838:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8a1b      	ldrh	r3, [r3, #16]
 800183e:	02db      	lsls	r3, r3, #11
 8001840:	b29b      	uxth	r3, r3
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4313      	orrs	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001848:	897b      	ldrh	r3, [r7, #10]
 800184a:	019b      	lsls	r3, r3, #6
 800184c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	4313      	orrs	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f023 0302 	bic.w	r3, r3, #2
 800185c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800186e:	f7ff fb55 	bl	8000f1c <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001874:	e015      	b.n	80018a2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001876:	f7ff fb51 	bl	8000f1c <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d309      	bcc.n	800189a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e014      	b.n	80018c4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e4      	bne.n	8001876 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	460b      	mov	r3, r1
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b42      	cmp	r3, #66	; 0x42
 80018ec:	d101      	bne.n	80018f2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
 80018f0:	e04e      	b.n	8001990 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2242      	movs	r2, #66	; 0x42
 80018f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 031c 	and.w	r3, r3, #28
 8001908:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8a1b      	ldrh	r3, [r3, #16]
 800190e:	02db      	lsls	r3, r3, #11
 8001910:	b29b      	uxth	r3, r3
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	019b      	lsls	r3, r3, #6
 800191c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4313      	orrs	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fae8 	bl	8000f1c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800194e:	e015      	b.n	800197c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001950:	f7ff fae4 	bl	8000f1c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195e:	d309      	bcc.n	8001974 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e00d      	b.n	8001990 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1e4      	bne.n	8001950 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_ETH_Start+0x16>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e01f      	b.n	80019ee <HAL_ETH_Start+0x56>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fa1c 	bl	8001dfc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fa36 	bl	8001e36 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fa80 	bl	8001ed0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fa4d 	bl	8001e70 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fa62 	bl	8001ea0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0b0      	sub	sp, #192	; 0xc0
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	663b      	str	r3, [r7, #96]	; 0x60
 8001a44:	e001      	b.n	8001a4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a54:	2300      	movs	r3, #0
 8001a56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a64:	2340      	movs	r3, #64	; 0x40
 8001a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad0:	4bab      	ldr	r3, [pc, #684]	; (8001d80 <ETH_MACDMAConfig+0x388>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001adc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ae0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ae4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001aea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001aee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001af2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001af8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001afc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001b00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001b04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001b08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001b0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fa01 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001b44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001b46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001b4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001b50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001b56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001b60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff f9dc 	bl	8000f34 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ba4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ba8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001bac:	4013      	ands	r3, r2
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bb6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001bb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001bbc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001bc2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001bc8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001bce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001bd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001bd4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff f99d 	bl	8000f34 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff f988 	bl	8000f34 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001c3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001c52:	2304      	movs	r3, #4
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <ETH_MACDMAConfig+0x38c>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c98:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001ca0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001ca2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001ca4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001ca6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001ca8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001caa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001cac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001cae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001cb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001cb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cca:	4413      	add	r3, r2
 8001ccc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f926 	bl	8000f34 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cfc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001d00:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d04:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001d08:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001d0e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d12:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d20:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7ff f8ff 	bl	8000f34 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d42:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10d      	bne.n	8001d68 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6811      	ldr	r1, [r2, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <ETH_MACDMAConfig+0x390>)
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d64:	440b      	add	r3, r1
 8001d66:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f80b 	bl	8001d8c <ETH_MACAddressConfig>
}
 8001d76:	bf00      	nop
 8001d78:	37c0      	adds	r7, #192	; 0xc0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	ff20810f 	.word	0xff20810f
 8001d84:	f8de3f23 	.word	0xf8de3f23
 8001d88:	00010040 	.word	0x00010040

08001d8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	3204      	adds	r2, #4
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <ETH_MACAddressConfig+0x68>)
 8001dae:	4413      	add	r3, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3303      	adds	r3, #3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	061a      	lsls	r2, r3, #24
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <ETH_MACAddressConfig+0x6c>)
 8001dde:	4413      	add	r3, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	6013      	str	r3, [r2, #0]
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40028040 	.word	0x40028040
 8001df8:	40028044 	.word	0x40028044

08001dfc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff f887 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff f86a 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	601a      	str	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eb0:	4413      	add	r3, r2
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6811      	ldr	r1, [r2, #0]
 8001eb8:	f043 0202 	orr.w	r2, r3, #2
 8001ebc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ec0:	440b      	add	r3, r1
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ee4:	4413      	add	r3, r2
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6811      	ldr	r1, [r2, #0]
 8001eec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef0:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ef4:	440b      	add	r3, r1
 8001ef6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f00:	4413      	add	r3, r2
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7ff f814 	bl	8000f34 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f16:	440b      	add	r3, r1
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e175      	b.n	8002230 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 8164 	bne.w	800222a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x4e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d123      	bne.n	8001fba <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	69b9      	ldr	r1, [r7, #24]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d00b      	beq.n	800200e <HAL_GPIO_Init+0xea>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002002:	2b11      	cmp	r3, #17
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b12      	cmp	r3, #18
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80be 	beq.w	800222a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_GPIO_Init+0x320>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a64      	ldr	r2, [pc, #400]	; (8002244 <HAL_GPIO_Init+0x320>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_GPIO_Init+0x320>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80020c6:	4a60      	ldr	r2, [pc, #384]	; (8002248 <HAL_GPIO_Init+0x324>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a57      	ldr	r2, [pc, #348]	; (800224c <HAL_GPIO_Init+0x328>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d037      	beq.n	8002162 <HAL_GPIO_Init+0x23e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_GPIO_Init+0x32c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d031      	beq.n	800215e <HAL_GPIO_Init+0x23a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_GPIO_Init+0x330>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02b      	beq.n	800215a <HAL_GPIO_Init+0x236>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a54      	ldr	r2, [pc, #336]	; (8002258 <HAL_GPIO_Init+0x334>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x232>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a53      	ldr	r2, [pc, #332]	; (800225c <HAL_GPIO_Init+0x338>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x22e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_GPIO_Init+0x33c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x22a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a51      	ldr	r2, [pc, #324]	; (8002264 <HAL_GPIO_Init+0x340>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x226>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a50      	ldr	r2, [pc, #320]	; (8002268 <HAL_GPIO_Init+0x344>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4f      	ldr	r2, [pc, #316]	; (800226c <HAL_GPIO_Init+0x348>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4e      	ldr	r2, [pc, #312]	; (8002270 <HAL_GPIO_Init+0x34c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x21a>
 800213a:	2309      	movs	r3, #9
 800213c:	e012      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800213e:	230a      	movs	r3, #10
 8002140:	e010      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002142:	2308      	movs	r3, #8
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002146:	2307      	movs	r3, #7
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x240>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x240>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002174:	4934      	ldr	r1, [pc, #208]	; (8002248 <HAL_GPIO_Init+0x324>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_GPIO_Init+0x350>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a6:	4a33      	ldr	r2, [pc, #204]	; (8002274 <HAL_GPIO_Init+0x350>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_GPIO_Init+0x350>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d0:	4a28      	ldr	r2, [pc, #160]	; (8002274 <HAL_GPIO_Init+0x350>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_GPIO_Init+0x350>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a1e      	ldr	r2, [pc, #120]	; (8002274 <HAL_GPIO_Init+0x350>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_GPIO_Init+0x350>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_GPIO_Init+0x350>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae86 	bls.w	8001f44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3724      	adds	r7, #36	; 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023800 	.word	0x40023800
 8002248:	40013800 	.word	0x40013800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40021400 	.word	0x40021400
 8002264:	40021800 	.word	0x40021800
 8002268:	40021c00 	.word	0x40021c00
 800226c:	40022000 	.word	0x40022000
 8002270:	40022400 	.word	0x40022400
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fbf0 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d107      	bne.n	8002326 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e006      	b.n	8002334 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002332:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d104      	bne.n	8002346 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002344:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_I2C_Init+0x11c>)
 8002352:	430b      	orrs	r3, r1
 8002354:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002364:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	ea42 0103 	orr.w	r1, r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69d9      	ldr	r1, [r3, #28]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	02008000 	.word	0x02008000

080023cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d138      	bne.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e032      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800241e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6819      	ldr	r1, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e000      	b.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	d139      	bne.n	80024ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002482:	2302      	movs	r3, #2
 8002484:	e033      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2224      	movs	r2, #36	; 0x24
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e000      	b.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
  }
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252a:	f7fe fcf7 	bl	8000f1c <HAL_GetTick>
 800252e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002530:	e009      	b.n	8002546 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002532:	f7fe fcf3 	bl	8000f1c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002540:	d901      	bls.n	8002546 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e022      	b.n	800258c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d1ee      	bne.n	8002532 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800255a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7fe fcdc 	bl	8000f1c <HAL_GetTick>
 8002564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002566:	e009      	b.n	800257c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002568:	f7fe fcd8 	bl	8000f1c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002576:	d901      	bls.n	800257c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e007      	b.n	800258c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002588:	d1ee      	bne.n	8002568 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	40007000 	.word	0x40007000

0800259c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e25e      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b96      	ldr	r3, [pc, #600]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025cc:	4b93      	ldr	r3, [pc, #588]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
 80025d8:	4b90      	ldr	r3, [pc, #576]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b8d      	ldr	r3, [pc, #564]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x130>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e238      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x7a>
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a83      	ldr	r2, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x9c>
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7b      	ldr	r2, [pc, #492]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xc0>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a72      	ldr	r2, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6e      	ldr	r2, [pc, #440]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6b      	ldr	r2, [pc, #428]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fc4e 	bl	8000f1c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fc4a 	bl	8000f1c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1ec      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc3a 	bl	8000f1c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fc36 	bl	8000f1c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1d8      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x110>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d069      	beq.n	80027ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b4d      	ldr	r3, [pc, #308]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x190>
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x17a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1ac      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	493d      	ldr	r1, [pc, #244]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e040      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a38      	ldr	r2, [pc, #224]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fbec 	bl	8000f1c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe fbe8 	bl	8000f1c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e18a      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4929      	ldr	r1, [pc, #164]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
 800277a:	e018      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fbc8 	bl	8000f1c <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe fbc4 	bl	8000f1c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e166      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d038      	beq.n	800282c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fba5 	bl	8000f1c <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe fba1 	bl	8000f1c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e143      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x23a>
 80027f4:	e01a      	b.n	800282c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fb8b 	bl	8000f1c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fb87 	bl	8000f1c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d903      	bls.n	8002820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e129      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
 800281c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a4 	beq.w	8002982 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a8b      	ldr	r2, [pc, #556]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b89      	ldr	r3, [pc, #548]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <HAL_RCC_OscConfig+0x4e0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <HAL_RCC_OscConfig+0x4e0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a82      	ldr	r2, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x4e0>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe fb4f 	bl	8000f1c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe fb4b 	bl	8000f1c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0ed      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <HAL_RCC_OscConfig+0x4e0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x31a>
 80028a8:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a72      	ldr	r2, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x33c>
 80028be:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a6d      	ldr	r2, [pc, #436]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b6b      	ldr	r3, [pc, #428]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a6a      	ldr	r2, [pc, #424]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e01c      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x35e>
 80028e0:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a64      	ldr	r2, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe faff 	bl	8000f1c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fafb 	bl	8000f1c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e09b      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x386>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fae9 	bl	8000f1c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fae5 	bl	8000f1c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e085      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	4b44      	ldr	r3, [pc, #272]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d071      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b08      	cmp	r3, #8
 8002994:	d069      	beq.n	8002a6a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d14b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a35      	ldr	r2, [pc, #212]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fab7 	bl	8000f1c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fab3 	bl	8000f1c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e055      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	019b      	lsls	r3, r3, #6
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	061b      	lsls	r3, r3, #24
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	071b      	lsls	r3, r3, #28
 80029fc:	491e      	ldr	r1, [pc, #120]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe fa85 	bl	8000f1c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7fe fa81 	bl	8000f1c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e023      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x47a>
 8002a34:	e01b      	b.n	8002a6e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fa6b 	bl	8000f1c <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4a:	f7fe fa67 	bl	8000f1c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e009      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_OscConfig+0x4dc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4ae>
 8002a68:	e001      	b.n	8002a6e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0ce      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a98:	4b69      	ldr	r3, [pc, #420]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d910      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa6:	4b66      	ldr	r3, [pc, #408]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 020f 	bic.w	r2, r3, #15
 8002aae:	4964      	ldr	r1, [pc, #400]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494c      	ldr	r1, [pc, #304]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07d      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b42:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e071      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e069      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b62:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f023 0203 	bic.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9d2 	bl	8000f1c <HAL_GetTick>
 8002b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7c:	f7fe f9ce 	bl	8000f1c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e051      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 020c 	and.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d1eb      	bne.n	8002b7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d210      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4921      	ldr	r1, [pc, #132]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e030      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4915      	ldr	r1, [pc, #84]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490d      	ldr	r1, [pc, #52]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f81d 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c16:	4601      	mov	r1, r0
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_RCC_ClockConfig+0x1cc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe f930 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	080114f8 	.word	0x080114f8
 8002c4c:	20000000 	.word	0x20000000

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d007      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x32>
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d008      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x38>
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 80b4 	bne.w	8002de4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c7e:	60bb      	str	r3, [r7, #8]
       break;
 8002c80:	e0b3      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c84:	60bb      	str	r3, [r7, #8]
      break;
 8002c86:	e0b0      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b5a      	ldr	r3, [pc, #360]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c92:	4b58      	ldr	r3, [pc, #352]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d04a      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	f04f 0400 	mov.w	r4, #0
 8002ca8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	ea03 0501 	and.w	r5, r3, r1
 8002cb4:	ea04 0602 	and.w	r6, r4, r2
 8002cb8:	4629      	mov	r1, r5
 8002cba:	4632      	mov	r2, r6
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	0154      	lsls	r4, r2, #5
 8002cc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cca:	014b      	lsls	r3, r1, #5
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4622      	mov	r2, r4
 8002cd0:	1b49      	subs	r1, r1, r5
 8002cd2:	eb62 0206 	sbc.w	r2, r2, r6
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	f04f 0400 	mov.w	r4, #0
 8002cde:	0194      	lsls	r4, r2, #6
 8002ce0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ce4:	018b      	lsls	r3, r1, #6
 8002ce6:	1a5b      	subs	r3, r3, r1
 8002ce8:	eb64 0402 	sbc.w	r4, r4, r2
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	00e2      	lsls	r2, r4, #3
 8002cf6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cfa:	00d9      	lsls	r1, r3, #3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4614      	mov	r4, r2
 8002d00:	195b      	adds	r3, r3, r5
 8002d02:	eb44 0406 	adc.w	r4, r4, r6
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	0262      	lsls	r2, r4, #9
 8002d10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d14:	0259      	lsls	r1, r3, #9
 8002d16:	460b      	mov	r3, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	461a      	mov	r2, r3
 8002d26:	4623      	mov	r3, r4
 8002d28:	f7fd fada 	bl	80002e0 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e049      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	ea03 0501 	and.w	r5, r3, r1
 8002d4a:	ea04 0602 	and.w	r6, r4, r2
 8002d4e:	4629      	mov	r1, r5
 8002d50:	4632      	mov	r2, r6
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0154      	lsls	r4, r2, #5
 8002d5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d60:	014b      	lsls	r3, r1, #5
 8002d62:	4619      	mov	r1, r3
 8002d64:	4622      	mov	r2, r4
 8002d66:	1b49      	subs	r1, r1, r5
 8002d68:	eb62 0206 	sbc.w	r2, r2, r6
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	f04f 0400 	mov.w	r4, #0
 8002d74:	0194      	lsls	r4, r2, #6
 8002d76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d7a:	018b      	lsls	r3, r1, #6
 8002d7c:	1a5b      	subs	r3, r3, r1
 8002d7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	00e2      	lsls	r2, r4, #3
 8002d8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d90:	00d9      	lsls	r1, r3, #3
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	195b      	adds	r3, r3, r5
 8002d98:	eb44 0406 	adc.w	r4, r4, r6
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	02a2      	lsls	r2, r4, #10
 8002da6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002daa:	0299      	lsls	r1, r3, #10
 8002dac:	460b      	mov	r3, r1
 8002dae:	4614      	mov	r4, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	4621      	mov	r1, r4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	f7fd fa8f 	bl	80002e0 <__aeabi_uldivmod>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de0:	60bb      	str	r3, [r7, #8]
      break;
 8002de2:	e002      	b.n	8002dea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002de6:	60bb      	str	r3, [r7, #8]
      break;
 8002de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dea:	68bb      	ldr	r3, [r7, #8]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df4:	40023800 	.word	0x40023800
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d012      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e40:	4b69      	ldr	r3, [pc, #420]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a68      	ldr	r2, [pc, #416]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e4a:	6093      	str	r3, [r2, #8]
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	4964      	ldr	r1, [pc, #400]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d017      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	4959      	ldr	r1, [pc, #356]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e90:	d101      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e92:	2301      	movs	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d017      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eae:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	494a      	ldr	r1, [pc, #296]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 808b 	beq.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002efc:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	4a39      	ldr	r2, [pc, #228]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f06:	6413      	str	r3, [r2, #64]	; 0x40
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fd fffc 	bl	8000f1c <HAL_GetTick>
 8002f24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f28:	f7fd fff8 	bl	8000f1c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b64      	cmp	r3, #100	; 0x64
 8002f34:	d901      	bls.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e356      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d035      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d02e      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d114      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd ffc0 	bl	8000f1c <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ffbc 	bl	8000f1c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e318      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fde:	400b      	ands	r3, r1
 8002fe0:	4901      	ldr	r1, [pc, #4]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	0ffffcff 	.word	0x0ffffcff
 8002ff4:	4bb1      	ldr	r3, [pc, #708]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4ab0      	ldr	r2, [pc, #704]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ffa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ffe:	6093      	str	r3, [r2, #8]
 8003000:	4bae      	ldr	r3, [pc, #696]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	49ab      	ldr	r1, [pc, #684]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800301e:	4ba7      	ldr	r3, [pc, #668]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003024:	4aa5      	ldr	r2, [pc, #660]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800302e:	4ba3      	ldr	r3, [pc, #652]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	49a0      	ldr	r1, [pc, #640]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304c:	4b9b      	ldr	r3, [pc, #620]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305a:	4998      	ldr	r1, [pc, #608]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800306e:	4b93      	ldr	r3, [pc, #588]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800307c:	498f      	ldr	r1, [pc, #572]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003090:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	4987      	ldr	r1, [pc, #540]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b2:	4b82      	ldr	r3, [pc, #520]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	497e      	ldr	r1, [pc, #504]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d4:	4b79      	ldr	r3, [pc, #484]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f023 0203 	bic.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4976      	ldr	r1, [pc, #472]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f6:	4b71      	ldr	r3, [pc, #452]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f023 020c 	bic.w	r2, r3, #12
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	496d      	ldr	r1, [pc, #436]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313a:	4b60      	ldr	r3, [pc, #384]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	495c      	ldr	r1, [pc, #368]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	4954      	ldr	r1, [pc, #336]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800317e:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	494b      	ldr	r1, [pc, #300]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a0:	4b46      	ldr	r3, [pc, #280]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	4943      	ldr	r1, [pc, #268]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c2:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	493a      	ldr	r1, [pc, #232]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e4:	4b35      	ldr	r3, [pc, #212]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	4932      	ldr	r1, [pc, #200]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003214:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003224:	d101      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003226:	2301      	movs	r3, #1
 8003228:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	491d      	ldr	r1, [pc, #116]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003268:	4914      	ldr	r1, [pc, #80]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	490b      	ldr	r1, [pc, #44]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00f      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	4902      	ldr	r1, [pc, #8]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80032b8:	e002      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032cc:	4b80      	ldr	r3, [pc, #512]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80032ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032dc:	497c      	ldr	r1, [pc, #496]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d005      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032f2:	f040 80d6 	bne.w	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80032fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003302:	f7fd fe0b 	bl	8000f1c <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800330a:	f7fd fe07 	bl	8000f1c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b64      	cmp	r3, #100	; 0x64
 8003316:	d901      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e165      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800331c:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d021      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x560>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800333c:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800333e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003342:	0c1b      	lsrs	r3, r3, #16
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800334a:	4b61      	ldr	r3, [pc, #388]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800334c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003350:	0e1b      	lsrs	r3, r3, #24
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	019a      	lsls	r2, r3, #6
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	4957      	ldr	r1, [pc, #348]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x576>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02e      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a2:	d129      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033a4:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0c1b      	lsrs	r3, r3, #16
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	019a      	lsls	r2, r3, #6
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	071b      	lsls	r3, r3, #28
 80033d8:	493d      	ldr	r1, [pc, #244]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80033e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e6:	f023 021f 	bic.w	r2, r3, #31
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	3b01      	subs	r3, #1
 80033f0:	4937      	ldr	r1, [pc, #220]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003404:	4b32      	ldr	r3, [pc, #200]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340a:	0e1b      	lsrs	r3, r3, #24
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003418:	0f1b      	lsrs	r3, r3, #28
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	019a      	lsls	r2, r3, #6
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	041b      	lsls	r3, r3, #16
 800342c:	431a      	orrs	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	061b      	lsls	r3, r3, #24
 8003432:	431a      	orrs	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	071b      	lsls	r3, r3, #28
 8003438:	4925      	ldr	r1, [pc, #148]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d011      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x658>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	019a      	lsls	r2, r3, #6
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	071b      	lsls	r3, r3, #28
 8003468:	4919      	ldr	r1, [pc, #100]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800347a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800347c:	f7fd fd4e 	bl	8000f1c <HAL_GetTick>
 8003480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003484:	f7fd fd4a 	bl	8000f1c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d901      	bls.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0a8      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 809e 	bne.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b6:	f7fd fd31 	bl	8000f1c <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034be:	f7fd fd2d 	bl	8000f1c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b64      	cmp	r3, #100	; 0x64
 80034ca:	d903      	bls.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e08b      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80034d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e0:	d0ed      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x6a6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02e      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x748>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d12a      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x748>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	0f1b      	lsrs	r3, r3, #28
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	019a      	lsls	r2, r3, #6
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	071b      	lsls	r3, r3, #28
 800353e:	492c      	ldr	r1, [pc, #176]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003546:	4b2a      	ldr	r3, [pc, #168]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800354c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	4925      	ldr	r1, [pc, #148]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003574:	d11d      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	0e1b      	lsrs	r3, r3, #24
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	0f1b      	lsrs	r3, r3, #28
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	019a      	lsls	r2, r3, #6
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	071b      	lsls	r3, r3, #28
 80035aa:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035be:	f7fd fcad 	bl	8000f1c <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c6:	f7fd fca9 	bl	8000f1c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b64      	cmp	r3, #100	; 0x64
 80035d2:	d901      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e007      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e4:	d1ef      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e084      	b.n	8003710 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fd fabd 	bl	8000ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003646:	d902      	bls.n	800364e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e002      	b.n	8003654 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800364e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800365c:	d007      	beq.n	800366e <HAL_SPI_Init+0x7a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003666:	d002      	beq.n	800366e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800367e:	d903      	bls.n	8003688 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
 8003686:	e002      	b.n	800368e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	ea42 0103 	orr.w	r1, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	f003 0204 	and.w	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	ea42 0103 	orr.w	r1, r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800371e:	f000 fa73 	bl	8003c08 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <MX_LWIP_Init+0x68>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <MX_LWIP_Init+0x6c>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <MX_LWIP_Init+0x70>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <MX_LWIP_Init+0x74>)
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <MX_LWIP_Init+0x78>)
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <MX_LWIP_Init+0x70>)
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <MX_LWIP_Init+0x6c>)
 8003744:	490e      	ldr	r1, [pc, #56]	; (8003780 <MX_LWIP_Init+0x68>)
 8003746:	4813      	ldr	r0, [pc, #76]	; (8003794 <MX_LWIP_Init+0x7c>)
 8003748:	f000 fe64 	bl	8004414 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800374c:	4811      	ldr	r0, [pc, #68]	; (8003794 <MX_LWIP_Init+0x7c>)
 800374e:	f000 ff49 	bl	80045e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <MX_LWIP_Init+0x7c>)
 8003754:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003764:	480b      	ldr	r0, [pc, #44]	; (8003794 <MX_LWIP_Init+0x7c>)
 8003766:	f000 ff4d 	bl	8004604 <netif_set_up>
 800376a:	e002      	b.n	8003772 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800376c:	4809      	ldr	r0, [pc, #36]	; (8003794 <MX_LWIP_Init+0x7c>)
 800376e:	f000 ff8d 	bl	800468c <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003772:	4808      	ldr	r0, [pc, #32]	; (8003794 <MX_LWIP_Init+0x7c>)
 8003774:	f007 f8b6 	bl	800a8e4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000354 	.word	0x20000354
 8003784:	20000358 	.word	0x20000358
 8003788:	2000035c 	.word	0x2000035c
 800378c:	0800e2a5 	.word	0x0800e2a5
 8003790:	08003b51 	.word	0x08003b51
 8003794:	20000320 	.word	0x20000320

08003798 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a3f      	ldr	r2, [pc, #252]	; (80038b4 <HAL_ETH_MspInit+0x11c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d178      	bne.n	80038ac <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80037ba:	4b3f      	ldr	r3, [pc, #252]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a3e      	ldr	r2, [pc, #248]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4b33      	ldr	r3, [pc, #204]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a32      	ldr	r2, [pc, #200]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	4b2d      	ldr	r3, [pc, #180]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003832:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a20      	ldr	r2, [pc, #128]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_ETH_MspInit+0x120>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800384a:	2332      	movs	r3, #50	; 0x32
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800385a:	230b      	movs	r3, #11
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003862:	4619      	mov	r1, r3
 8003864:	4815      	ldr	r0, [pc, #84]	; (80038bc <HAL_ETH_MspInit+0x124>)
 8003866:	f7fe fb5d 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800386a:	2386      	movs	r3, #134	; 0x86
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800387a:	230b      	movs	r3, #11
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003882:	4619      	mov	r1, r3
 8003884:	480e      	ldr	r0, [pc, #56]	; (80038c0 <HAL_ETH_MspInit+0x128>)
 8003886:	f7fe fb4d 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800388a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003890:	2302      	movs	r3, #2
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003898:	2303      	movs	r3, #3
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800389c:	230b      	movs	r3, #11
 800389e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a4:	4619      	mov	r1, r3
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <HAL_ETH_MspInit+0x12c>)
 80038a8:	f7fe fb3c 	bl	8001f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80038ac:	bf00      	nop
 80038ae:	3738      	adds	r7, #56	; 0x38
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40028000 	.word	0x40028000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020800 	.word	0x40020800
 80038c0:	40020000 	.word	0x40020000
 80038c4:	40021800 	.word	0x40021800

080038c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038d4:	4b49      	ldr	r3, [pc, #292]	; (80039fc <low_level_init+0x134>)
 80038d6:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <low_level_init+0x138>)
 80038d8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038da:	4b48      	ldr	r3, [pc, #288]	; (80039fc <low_level_init+0x134>)
 80038dc:	2201      	movs	r2, #1
 80038de:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80038e0:	4b46      	ldr	r3, [pc, #280]	; (80039fc <low_level_init+0x134>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80038e6:	2300      	movs	r3, #0
 80038e8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80038ee:	23e1      	movs	r3, #225	; 0xe1
 80038f0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80038f2:	2300      	movs	r3, #0
 80038f4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80038fa:	2300      	movs	r3, #0
 80038fc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80038fe:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <low_level_init+0x134>)
 8003900:	f107 0308 	add.w	r3, r7, #8
 8003904:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <low_level_init+0x134>)
 8003908:	2200      	movs	r2, #0
 800390a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <low_level_init+0x134>)
 800390e:	2200      	movs	r2, #0
 8003910:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <low_level_init+0x134>)
 8003914:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003918:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800391a:	4838      	ldr	r0, [pc, #224]	; (80039fc <low_level_init+0x134>)
 800391c:	f7fd fc12 	bl	8001144 <HAL_ETH_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	b2da      	uxtb	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800393c:	2304      	movs	r3, #4
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <low_level_init+0x13c>)
 8003940:	4931      	ldr	r1, [pc, #196]	; (8003a08 <low_level_init+0x140>)
 8003942:	482e      	ldr	r0, [pc, #184]	; (80039fc <low_level_init+0x134>)
 8003944:	f7fd fd9a 	bl	800147c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003948:	2304      	movs	r3, #4
 800394a:	4a30      	ldr	r2, [pc, #192]	; (8003a0c <low_level_init+0x144>)
 800394c:	4930      	ldr	r1, [pc, #192]	; (8003a10 <low_level_init+0x148>)
 800394e:	482b      	ldr	r0, [pc, #172]	; (80039fc <low_level_init+0x134>)
 8003950:	f7fd fdfd 	bl	800154e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2206      	movs	r2, #6
 8003958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800395c:	4b27      	ldr	r3, [pc, #156]	; (80039fc <low_level_init+0x134>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <low_level_init+0x134>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	785a      	ldrb	r2, [r3, #1]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <low_level_init+0x134>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	789a      	ldrb	r2, [r3, #2]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <low_level_init+0x134>)
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	78da      	ldrb	r2, [r3, #3]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <low_level_init+0x134>)
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	791a      	ldrb	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003998:	4b18      	ldr	r3, [pc, #96]	; (80039fc <low_level_init+0x134>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	795a      	ldrb	r2, [r3, #5]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039aa:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80039b2:	f043 030a 	orr.w	r3, r3, #10
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80039be:	480f      	ldr	r0, [pc, #60]	; (80039fc <low_level_init+0x134>)
 80039c0:	f7fd ffea 	bl	8001998 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80039c4:	f107 0310 	add.w	r3, r7, #16
 80039c8:	461a      	mov	r2, r3
 80039ca:	211d      	movs	r1, #29
 80039cc:	480b      	ldr	r0, [pc, #44]	; (80039fc <low_level_init+0x134>)
 80039ce:	f7fd ff15 	bl	80017fc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f043 030b 	orr.w	r3, r3, #11
 80039d8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	461a      	mov	r2, r3
 80039de:	211d      	movs	r1, #29
 80039e0:	4806      	ldr	r0, [pc, #24]	; (80039fc <low_level_init+0x134>)
 80039e2:	f7fd ff73 	bl	80018cc <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	461a      	mov	r2, r3
 80039ec:	211d      	movs	r1, #29
 80039ee:	4803      	ldr	r0, [pc, #12]	; (80039fc <low_level_init+0x134>)
 80039f0:	f7fd ff04 	bl	80017fc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20001c30 	.word	0x20001c30
 8003a00:	40028000 	.word	0x40028000
 8003a04:	20001c78 	.word	0x20001c78
 8003a08:	20000360 	.word	0x20000360
 8003a0c:	200003e0 	.word	0x200003e0
 8003a10:	20001bb0 	.word	0x20001bb0

08003a14 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <low_level_output+0x138>)
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <low_level_output+0x138>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	e05a      	b.n	8003afc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da03      	bge.n	8003a56 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a4e:	23f8      	movs	r3, #248	; 0xf8
 8003a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a54:	e05c      	b.n	8003b10 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	895b      	ldrh	r3, [r3, #10]
 8003a5a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a60:	e02f      	b.n	8003ac2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	18d0      	adds	r0, r2, r3
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	18d1      	adds	r1, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f00a fd22 	bl	800e4c2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da03      	bge.n	8003a94 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003a8c:	23f8      	movs	r3, #248	; 0xf8
 8003a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003a92:	e03d      	b.n	8003b10 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003aa4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ab0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003abc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d8c8      	bhi.n	8003a62 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	18d0      	adds	r0, r2, r3
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4413      	add	r3, r2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f00a fcee 	bl	800e4c2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1a1      	bne.n	8003a46 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	4811      	ldr	r0, [pc, #68]	; (8003b4c <low_level_output+0x138>)
 8003b06:	f7fd fd8f 	bl	8001628 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <low_level_output+0x138>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b18:	4413      	add	r3, r2
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00d      	beq.n	8003b40 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <low_level_output+0x138>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b2c:	4413      	add	r3, r2
 8003b2e:	2220      	movs	r2, #32
 8003b30:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <low_level_output+0x138>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f241 0304 	movw	r3, #4100	; 0x1004
 8003b3a:	4413      	add	r3, r2
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003b40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20001c30 	.word	0x20001c30

08003b50 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <ethernetif_init+0x1c>
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <ethernetif_init+0x48>)
 8003b60:	f240 2206 	movw	r2, #518	; 0x206
 8003b64:	490d      	ldr	r1, [pc, #52]	; (8003b9c <ethernetif_init+0x4c>)
 8003b66:	480e      	ldr	r0, [pc, #56]	; (8003ba0 <ethernetif_init+0x50>)
 8003b68:	f00a fcbe 	bl	800e4e8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2273      	movs	r2, #115	; 0x73
 8003b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2274      	movs	r2, #116	; 0x74
 8003b78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <ethernetif_init+0x54>)
 8003b80:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <ethernetif_init+0x58>)
 8003b86:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fe9d 	bl	80038c8 <low_level_init>

  return ERR_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	0800f340 	.word	0x0800f340
 8003b9c:	0800f35c 	.word	0x0800f35c
 8003ba0:	0800f36c 	.word	0x0800f36c
 8003ba4:	0800c84d 	.word	0x0800c84d
 8003ba8:	08003a15 	.word	0x08003a15

08003bac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003bb0:	f7fd f9b4 	bl	8000f1c <HAL_GetTick>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	ba5b      	rev16	r3, r3
 8003bc8:	b29b      	uxth	r3, r3
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	061a      	lsls	r2, r3, #24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0e1b      	lsrs	r3, r3, #24
 8003bfa:	4313      	orrs	r3, r2
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003c12:	f000 f8a7 	bl	8003d64 <mem_init>
  memp_init();
 8003c16:	f000 fb3b 	bl	8004290 <memp_init>
  pbuf_init();
  netif_init();
 8003c1a:	f000 fbf3 	bl	8004404 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003c1e:	f005 ffaf 	bl	8009b80 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003c22:	f001 fb4d 	bl	80052c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003c26:	f005 fedf 	bl	80099e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003c3c:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <plug_holes+0x10c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d206      	bcs.n	8003c54 <plug_holes+0x20>
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <plug_holes+0x110>)
 8003c48:	f240 125d 	movw	r2, #349	; 0x15d
 8003c4c:	493e      	ldr	r1, [pc, #248]	; (8003d48 <plug_holes+0x114>)
 8003c4e:	483f      	ldr	r0, [pc, #252]	; (8003d4c <plug_holes+0x118>)
 8003c50:	f00a fc4a 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003c54:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <plug_holes+0x11c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d306      	bcc.n	8003c6c <plug_holes+0x38>
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <plug_holes+0x110>)
 8003c60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003c64:	493b      	ldr	r1, [pc, #236]	; (8003d54 <plug_holes+0x120>)
 8003c66:	4839      	ldr	r0, [pc, #228]	; (8003d4c <plug_holes+0x118>)
 8003c68:	f00a fc3e 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	791b      	ldrb	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <plug_holes+0x4e>
 8003c74:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <plug_holes+0x110>)
 8003c76:	f240 125f 	movw	r2, #351	; 0x15f
 8003c7a:	4937      	ldr	r1, [pc, #220]	; (8003d58 <plug_holes+0x124>)
 8003c7c:	4833      	ldr	r0, [pc, #204]	; (8003d4c <plug_holes+0x118>)
 8003c7e:	f00a fc33 	bl	800e4e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c8a:	d906      	bls.n	8003c9a <plug_holes+0x66>
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <plug_holes+0x110>)
 8003c8e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003c92:	4932      	ldr	r1, [pc, #200]	; (8003d5c <plug_holes+0x128>)
 8003c94:	482d      	ldr	r0, [pc, #180]	; (8003d4c <plug_holes+0x118>)
 8003c96:	f00a fc27 	bl	800e4e8 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003c9a:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <plug_holes+0x10c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d01f      	beq.n	8003cee <plug_holes+0xba>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	791b      	ldrb	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d11b      	bne.n	8003cee <plug_holes+0xba>
 8003cb6:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <plug_holes+0x11c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d016      	beq.n	8003cee <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003cc0:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <plug_holes+0x12c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d102      	bne.n	8003cd0 <plug_holes+0x9c>
      lfree = mem;
 8003cca:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <plug_holes+0x12c>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	881a      	ldrh	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <plug_holes+0x10c>)
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	1a99      	subs	r1, r3, r2
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <plug_holes+0x10c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	8812      	ldrh	r2, [r2, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	b28a      	uxth	r2, r1
 8003cec:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <plug_holes+0x10c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	8852      	ldrh	r2, [r2, #2]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d01a      	beq.n	8003d38 <plug_holes+0x104>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	791b      	ldrb	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <plug_holes+0x12c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d102      	bne.n	8003d1a <plug_holes+0xe6>
      lfree = pmem;
 8003d14:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <plug_holes+0x12c>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <plug_holes+0x10c>)
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	1a99      	subs	r1, r3, r2
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <plug_holes+0x10c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	8812      	ldrh	r2, [r2, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	b28a      	uxth	r2, r1
 8003d36:	805a      	strh	r2, [r3, #2]
  }
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	2000009c 	.word	0x2000009c
 8003d44:	0800f394 	.word	0x0800f394
 8003d48:	0800f3c4 	.word	0x0800f3c4
 8003d4c:	0800f3dc 	.word	0x0800f3dc
 8003d50:	200000a0 	.word	0x200000a0
 8003d54:	0800f404 	.word	0x0800f404
 8003d58:	0800f420 	.word	0x0800f420
 8003d5c:	0800f43c 	.word	0x0800f43c
 8003d60:	200000a4 	.word	0x200000a4

08003d64 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003d6a:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <mem_init+0x6c>)
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	f023 0303 	bic.w	r3, r3, #3
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <mem_init+0x70>)
 8003d76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <mem_init+0x70>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003d84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <mem_init+0x70>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <mem_init+0x74>)
 8003d9c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <mem_init+0x74>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <mem_init+0x74>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003dae:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <mem_init+0x74>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003db8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <mem_init+0x70>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <mem_init+0x78>)
 8003dc0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20003460 	.word	0x20003460
 8003dd4:	2000009c 	.word	0x2000009c
 8003dd8:	200000a0 	.word	0x200000a0
 8003ddc:	200000a4 	.word	0x200000a4

08003de0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d043      	beq.n	8003e76 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <mem_free+0x26>
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <mem_free+0xa4>)
 8003dfa:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <mem_free+0xa8>)
 8003e00:	4822      	ldr	r0, [pc, #136]	; (8003e8c <mem_free+0xac>)
 8003e02:	f00a fb71 	bl	800e4e8 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <mem_free+0xb0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d304      	bcc.n	8003e1a <mem_free+0x3a>
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <mem_free+0xb4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d306      	bcc.n	8003e28 <mem_free+0x48>
 8003e1a:	4b1a      	ldr	r3, [pc, #104]	; (8003e84 <mem_free+0xa4>)
 8003e1c:	f240 12af 	movw	r2, #431	; 0x1af
 8003e20:	491d      	ldr	r1, [pc, #116]	; (8003e98 <mem_free+0xb8>)
 8003e22:	481a      	ldr	r0, [pc, #104]	; (8003e8c <mem_free+0xac>)
 8003e24:	f00a fb60 	bl	800e4e8 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003e28:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <mem_free+0xb0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d323      	bcc.n	8003e7a <mem_free+0x9a>
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <mem_free+0xb4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d21e      	bcs.n	8003e7a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b08      	subs	r3, #8
 8003e40:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <mem_free+0x78>
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <mem_free+0xa4>)
 8003e4c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003e50:	4912      	ldr	r1, [pc, #72]	; (8003e9c <mem_free+0xbc>)
 8003e52:	480e      	ldr	r0, [pc, #56]	; (8003e8c <mem_free+0xac>)
 8003e54:	f00a fb48 	bl	800e4e8 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <mem_free+0xc0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d202      	bcs.n	8003e6e <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003e68:	4a0d      	ldr	r2, [pc, #52]	; (8003ea0 <mem_free+0xc0>)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff fee0 	bl	8003c34 <plug_holes>
 8003e74:	e002      	b.n	8003e7c <mem_free+0x9c>
    return;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <mem_free+0x9c>
    return;
 8003e7a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	0800f394 	.word	0x0800f394
 8003e88:	0800f468 	.word	0x0800f468
 8003e8c:	0800f3dc 	.word	0x0800f3dc
 8003e90:	2000009c 	.word	0x2000009c
 8003e94:	200000a0 	.word	0x200000a0
 8003e98:	0800f48c 	.word	0x0800f48c
 8003e9c:	0800f4a4 	.word	0x0800f4a4
 8003ea0:	200000a4 	.word	0x200000a4

08003ea4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	3303      	adds	r3, #3
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	2b0b      	cmp	r3, #11
 8003ec0:	d801      	bhi.n	8003ec6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003ec2:	230c      	movs	r3, #12
 8003ec4:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003ec6:	887b      	ldrh	r3, [r7, #2]
 8003ec8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ecc:	d901      	bls.n	8003ed2 <mem_trim+0x2e>
    return NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e0b1      	b.n	8004036 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003ed2:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <mem_trim+0x19c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d304      	bcc.n	8003ee6 <mem_trim+0x42>
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <mem_trim+0x1a0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d306      	bcc.n	8003ef4 <mem_trim+0x50>
 8003ee6:	4b58      	ldr	r3, [pc, #352]	; (8004048 <mem_trim+0x1a4>)
 8003ee8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003eec:	4957      	ldr	r1, [pc, #348]	; (800404c <mem_trim+0x1a8>)
 8003eee:	4858      	ldr	r0, [pc, #352]	; (8004050 <mem_trim+0x1ac>)
 8003ef0:	f00a fafa 	bl	800e4e8 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003ef4:	4b52      	ldr	r3, [pc, #328]	; (8004040 <mem_trim+0x19c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d304      	bcc.n	8003f08 <mem_trim+0x64>
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <mem_trim+0x1a0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d301      	bcc.n	8003f0c <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	e094      	b.n	8004036 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b08      	subs	r3, #8
 8003f10:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <mem_trim+0x19c>)
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	8a7b      	ldrh	r3, [r7, #18]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b08      	subs	r3, #8
 8003f28:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	8a3b      	ldrh	r3, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d906      	bls.n	8003f40 <mem_trim+0x9c>
 8003f32:	4b45      	ldr	r3, [pc, #276]	; (8004048 <mem_trim+0x1a4>)
 8003f34:	f240 2206 	movw	r2, #518	; 0x206
 8003f38:	4946      	ldr	r1, [pc, #280]	; (8004054 <mem_trim+0x1b0>)
 8003f3a:	4845      	ldr	r0, [pc, #276]	; (8004050 <mem_trim+0x1ac>)
 8003f3c:	f00a fad4 	bl	800e4e8 <iprintf>
  if (newsize > size) {
 8003f40:	887a      	ldrh	r2, [r7, #2]
 8003f42:	8a3b      	ldrh	r3, [r7, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d901      	bls.n	8003f4c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e074      	b.n	8004036 <mem_trim+0x192>
  }
  if (newsize == size) {
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	8a3b      	ldrh	r3, [r7, #16]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d101      	bne.n	8003f58 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	e06e      	b.n	8004036 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <mem_trim+0x19c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	791b      	ldrb	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d131      	bne.n	8003fd0 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003f72:	8a7a      	ldrh	r2, [r7, #18]
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	4413      	add	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003f7e:	4b36      	ldr	r3, [pc, #216]	; (8004058 <mem_trim+0x1b4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d105      	bne.n	8003f94 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003f88:	4b2d      	ldr	r3, [pc, #180]	; (8004040 <mem_trim+0x19c>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	897b      	ldrh	r3, [r7, #10]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a31      	ldr	r2, [pc, #196]	; (8004058 <mem_trim+0x1b4>)
 8003f92:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003f94:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <mem_trim+0x19c>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	897b      	ldrh	r3, [r7, #10]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	893a      	ldrh	r2, [r7, #8]
 8003fa8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8a7a      	ldrh	r2, [r7, #18]
 8003fae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	897a      	ldrh	r2, [r7, #10]
 8003fb4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003fbe:	d039      	beq.n	8004034 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <mem_trim+0x19c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	897a      	ldrh	r2, [r7, #10]
 8003fcc:	805a      	strh	r2, [r3, #2]
 8003fce:	e031      	b.n	8004034 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	f103 0214 	add.w	r2, r3, #20
 8003fd6:	8a3b      	ldrh	r3, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d82b      	bhi.n	8004034 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003fdc:	8a7a      	ldrh	r2, [r7, #18]
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003fe8:	4b15      	ldr	r3, [pc, #84]	; (8004040 <mem_trim+0x19c>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	897b      	ldrh	r3, [r7, #10]
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <mem_trim+0x1b4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d202      	bcs.n	8004002 <mem_trim+0x15e>
      lfree = mem2;
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <mem_trim+0x1b4>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8a7a      	ldrh	r2, [r7, #18]
 8004014:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	897a      	ldrh	r2, [r7, #10]
 800401a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004024:	d006      	beq.n	8004034 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <mem_trim+0x19c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	4413      	add	r3, r2
 8004030:	897a      	ldrh	r2, [r7, #10]
 8004032:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004034:	687b      	ldr	r3, [r7, #4]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	2000009c 	.word	0x2000009c
 8004044:	200000a0 	.word	0x200000a0
 8004048:	0800f394 	.word	0x0800f394
 800404c:	0800f4b8 	.word	0x0800f4b8
 8004050:	0800f3dc 	.word	0x0800f3dc
 8004054:	0800f4d0 	.word	0x0800f4d0
 8004058:	200000a4 	.word	0x200000a4

0800405c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <mem_malloc+0x14>
    return NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	e0c8      	b.n	8004202 <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	3303      	adds	r3, #3
 8004074:	b29b      	uxth	r3, r3
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	2b0b      	cmp	r3, #11
 8004080:	d801      	bhi.n	8004086 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004082:	230c      	movs	r3, #12
 8004084:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800408c:	d901      	bls.n	8004092 <mem_malloc+0x36>
    return NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	e0b7      	b.n	8004202 <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004092:	4b5e      	ldr	r3, [pc, #376]	; (800420c <mem_malloc+0x1b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <mem_malloc+0x1b4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	83fb      	strh	r3, [r7, #30]
 80040a0:	e0a7      	b.n	80041f2 <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <mem_malloc+0x1b4>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	8bfb      	ldrh	r3, [r7, #30]
 80040a8:	4413      	add	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	791b      	ldrb	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 8098 	bne.w	80041e6 <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	8bfb      	ldrh	r3, [r7, #30]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f1a3 0208 	sub.w	r2, r3, #8
 80040c4:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80040c6:	429a      	cmp	r2, r3
 80040c8:	f0c0 808d 	bcc.w	80041e6 <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	8bfb      	ldrh	r3, [r7, #30]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f1a3 0208 	sub.w	r2, r3, #8
 80040da:	88fb      	ldrh	r3, [r7, #6]
 80040dc:	3314      	adds	r3, #20
 80040de:	429a      	cmp	r2, r3
 80040e0:	d327      	bcc.n	8004132 <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80040e2:	8bfa      	ldrh	r2, [r7, #30]
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	4413      	add	r3, r2
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3308      	adds	r3, #8
 80040ec:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80040ee:	4b48      	ldr	r3, [pc, #288]	; (8004210 <mem_malloc+0x1b4>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	8a7b      	ldrh	r3, [r7, #18]
 80040f4:	4413      	add	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8bfa      	ldrh	r2, [r7, #30]
 800410a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	8a7a      	ldrh	r2, [r7, #18]
 8004110:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2201      	movs	r2, #1
 8004116:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004120:	d00a      	beq.n	8004138 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004122:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <mem_malloc+0x1b4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	8812      	ldrh	r2, [r2, #0]
 800412a:	4413      	add	r3, r2
 800412c:	8a7a      	ldrh	r2, [r7, #18]
 800412e:	805a      	strh	r2, [r3, #2]
 8004130:	e002      	b.n	8004138 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2201      	movs	r2, #1
 8004136:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004138:	4b34      	ldr	r3, [pc, #208]	; (800420c <mem_malloc+0x1b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d127      	bne.n	8004192 <mem_malloc+0x136>
          struct mem *cur = lfree;
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <mem_malloc+0x1b0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004148:	e005      	b.n	8004156 <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800414a:	4b31      	ldr	r3, [pc, #196]	; (8004210 <mem_malloc+0x1b4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	8812      	ldrh	r2, [r2, #0]
 8004152:	4413      	add	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <mem_malloc+0x10c>
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <mem_malloc+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	429a      	cmp	r2, r3
 8004166:	d1f0      	bne.n	800414a <mem_malloc+0xee>
          }
          lfree = cur;
 8004168:	4a28      	ldr	r2, [pc, #160]	; (800420c <mem_malloc+0x1b0>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <mem_malloc+0x1b0>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <mem_malloc+0x1b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d00b      	beq.n	8004192 <mem_malloc+0x136>
 800417a:	4b24      	ldr	r3, [pc, #144]	; (800420c <mem_malloc+0x1b0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	791b      	ldrb	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d006      	beq.n	8004192 <mem_malloc+0x136>
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <mem_malloc+0x1bc>)
 8004186:	f240 22cf 	movw	r2, #719	; 0x2cf
 800418a:	4924      	ldr	r1, [pc, #144]	; (800421c <mem_malloc+0x1c0>)
 800418c:	4824      	ldr	r0, [pc, #144]	; (8004220 <mem_malloc+0x1c4>)
 800418e:	f00a f9ab 	bl	800e4e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4413      	add	r3, r2
 8004198:	3308      	adds	r3, #8
 800419a:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <mem_malloc+0x1b8>)
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	4293      	cmp	r3, r2
 80041a0:	d906      	bls.n	80041b0 <mem_malloc+0x154>
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <mem_malloc+0x1bc>)
 80041a4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80041a8:	491e      	ldr	r1, [pc, #120]	; (8004224 <mem_malloc+0x1c8>)
 80041aa:	481d      	ldr	r0, [pc, #116]	; (8004220 <mem_malloc+0x1c4>)
 80041ac:	f00a f99c 	bl	800e4e8 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <mem_malloc+0x16c>
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <mem_malloc+0x1bc>)
 80041bc:	f240 22d6 	movw	r2, #726	; 0x2d6
 80041c0:	4919      	ldr	r1, [pc, #100]	; (8004228 <mem_malloc+0x1cc>)
 80041c2:	4817      	ldr	r0, [pc, #92]	; (8004220 <mem_malloc+0x1c4>)
 80041c4:	f00a f990 	bl	800e4e8 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <mem_malloc+0x184>
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <mem_malloc+0x1bc>)
 80041d4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80041d8:	4914      	ldr	r1, [pc, #80]	; (800422c <mem_malloc+0x1d0>)
 80041da:	4811      	ldr	r0, [pc, #68]	; (8004220 <mem_malloc+0x1c4>)
 80041dc:	f00a f984 	bl	800e4e8 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3308      	adds	r3, #8
 80041e4:	e00d      	b.n	8004202 <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <mem_malloc+0x1b4>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	8bfb      	ldrh	r3, [r7, #30]
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80041f2:	8bfa      	ldrh	r2, [r7, #30]
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80041fa:	429a      	cmp	r2, r3
 80041fc:	f4ff af51 	bcc.w	80040a2 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3720      	adds	r7, #32
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200000a4 	.word	0x200000a4
 8004210:	2000009c 	.word	0x2000009c
 8004214:	200000a0 	.word	0x200000a0
 8004218:	0800f394 	.word	0x0800f394
 800421c:	0800f4f0 	.word	0x0800f4f0
 8004220:	0800f3dc 	.word	0x0800f3dc
 8004224:	0800f50c 	.word	0x0800f50c
 8004228:	0800f53c 	.word	0x0800f53c
 800422c:	0800f56c 	.word	0x0800f56c

08004230 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	3303      	adds	r3, #3
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e011      	b.n	8004276 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3301      	adds	r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	885b      	ldrh	r3, [r3, #2]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4293      	cmp	r3, r2
 8004280:	dbe7      	blt.n	8004252 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004296:	2300      	movs	r3, #0
 8004298:	80fb      	strh	r3, [r7, #6]
 800429a:	e009      	b.n	80042b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <memp_init+0x30>)
 80042a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffc3 	bl	8004230 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80042aa:	88fb      	ldrh	r3, [r7, #6]
 80042ac:	3301      	adds	r3, #1
 80042ae:	80fb      	strh	r3, [r7, #6]
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d9f2      	bls.n	800429c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	08011574 	.word	0x08011574

080042c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <do_memp_malloc_pool+0x38>
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <do_memp_malloc_pool+0x48>)
 80042f0:	f240 1249 	movw	r2, #329	; 0x149
 80042f4:	4906      	ldr	r1, [pc, #24]	; (8004310 <do_memp_malloc_pool+0x4c>)
 80042f6:	4807      	ldr	r0, [pc, #28]	; (8004314 <do_memp_malloc_pool+0x50>)
 80042f8:	f00a f8f6 	bl	800e4e8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	e000      	b.n	8004302 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	0800f590 	.word	0x0800f590
 8004310:	0800f5c0 	.word	0x0800f5c0
 8004314:	0800f5e4 	.word	0x0800f5e4

08004318 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d908      	bls.n	800433a <memp_malloc+0x22>
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <memp_malloc+0x3c>)
 800432a:	f240 1287 	movw	r2, #391	; 0x187
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <memp_malloc+0x40>)
 8004330:	480a      	ldr	r0, [pc, #40]	; (800435c <memp_malloc+0x44>)
 8004332:	f00a f8d9 	bl	800e4e8 <iprintf>
 8004336:	2300      	movs	r3, #0
 8004338:	e008      	b.n	800434c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <memp_malloc+0x48>)
 800433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ffbe 	bl	80042c4 <do_memp_malloc_pool>
 8004348:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	0800f590 	.word	0x0800f590
 8004358:	0800f620 	.word	0x0800f620
 800435c:	0800f5e4 	.word	0x0800f5e4
 8004360:	08011574 	.word	0x08011574

08004364 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d006      	beq.n	8004386 <do_memp_free_pool+0x22>
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <do_memp_free_pool+0x40>)
 800437a:	f240 129d 	movw	r2, #413	; 0x19d
 800437e:	490a      	ldr	r1, [pc, #40]	; (80043a8 <do_memp_free_pool+0x44>)
 8004380:	480a      	ldr	r0, [pc, #40]	; (80043ac <do_memp_free_pool+0x48>)
 8004382:	f00a f8b1 	bl	800e4e8 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	0800f590 	.word	0x0800f590
 80043a8:	0800f640 	.word	0x0800f640
 80043ac:	0800f5e4 	.word	0x0800f5e4

080043b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d907      	bls.n	80043d2 <memp_free+0x22>
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <memp_free+0x44>)
 80043c4:	f240 12db 	movw	r2, #475	; 0x1db
 80043c8:	490b      	ldr	r1, [pc, #44]	; (80043f8 <memp_free+0x48>)
 80043ca:	480c      	ldr	r0, [pc, #48]	; (80043fc <memp_free+0x4c>)
 80043cc:	f00a f88c 	bl	800e4e8 <iprintf>
 80043d0:	e00c      	b.n	80043ec <memp_free+0x3c>

  if (mem == NULL) {
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <memp_free+0x50>)
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff ffbe 	bl	8004364 <do_memp_free_pool>
 80043e8:	e000      	b.n	80043ec <memp_free+0x3c>
    return;
 80043ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	0800f590 	.word	0x0800f590
 80043f8:	0800f660 	.word	0x0800f660
 80043fc:	0800f5e4 	.word	0x0800f5e4
 8004400:	08011574 	.word	0x08011574

08004404 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <netif_add+0x20>
 8004428:	4b23      	ldr	r3, [pc, #140]	; (80044b8 <netif_add+0xa4>)
 800442a:	22fb      	movs	r2, #251	; 0xfb
 800442c:	4923      	ldr	r1, [pc, #140]	; (80044bc <netif_add+0xa8>)
 800442e:	4824      	ldr	r0, [pc, #144]	; (80044c0 <netif_add+0xac>)
 8004430:	f00a f85a 	bl	800e4e8 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3320      	adds	r3, #32
 8004452:	2204      	movs	r2, #4
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f00a f83e 	bl	800e4d8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2203      	movs	r2, #3
 8004460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <netif_add+0xb0>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	b2d1      	uxtb	r1, r2
 8004472:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <netif_add+0xb0>)
 8004474:	7011      	strb	r1, [r2, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f81f 	bl	80044cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	4798      	blx	r3
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <netif_add+0x8a>
    return NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	e007      	b.n	80044ae <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <netif_add+0xb4>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <netif_add+0xb4>)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	0800f67c 	.word	0x0800f67c
 80044bc:	0800f6b0 	.word	0x0800f6b0
 80044c0:	0800f6c8 	.word	0x0800f6c8
 80044c4:	200000cc 	.word	0x200000cc
 80044c8:	20006988 	.word	0x20006988

080044cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <netif_set_addr+0x1c>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10c      	bne.n	8004502 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f81a 	bl	8004524 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f862 	bl	80045bc <netif_set_netmask>
    netif_set_gw(netif, gw);
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f84a 	bl	8004594 <netif_set_gw>
 8004500:	e00b      	b.n	800451a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f859 	bl	80045bc <netif_set_netmask>
    netif_set_gw(netif, gw);
 800450a:	6839      	ldr	r1, [r7, #0]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f841 	bl	8004594 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f805 	bl	8004524 <netif_set_ipaddr>
  }
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <netif_set_ipaddr+0x18>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e002      	b.n	8004542 <netif_set_ipaddr+0x1e>
 800453c:	4b14      	ldr	r3, [pc, #80]	; (8004590 <netif_set_ipaddr+0x6c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d01c      	beq.n	8004588 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	f107 020c 	add.w	r2, r7, #12
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f002 f83f 	bl	80065dc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	f107 020c 	add.w	r2, r7, #12
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f005 fe65 	bl	800a238 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <netif_set_ipaddr+0x56>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	e000      	b.n	800457c <netif_set_ipaddr+0x58>
 800457a:	2300      	movs	r3, #0
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004580:	2101      	movs	r1, #1
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f861 	bl	800464a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004588:	bf00      	nop
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	080115e8 	.word	0x080115e8

08004594 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <netif_set_gw+0x16>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	e000      	b.n	80045ac <netif_set_gw+0x18>
 80045aa:	2300      	movs	r3, #0
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <netif_set_netmask+0x16>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	e000      	b.n	80045d4 <netif_set_netmask+0x18>
 80045d2:	2300      	movs	r3, #0
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <netif_set_default+0x1c>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	2000698c 	.word	0x2000698c

08004604 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d113      	bne.n	8004642 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800463a:	2103      	movs	r1, #3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f804 	bl	800464a <netif_issue_reports>
    }
  }
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d011      	beq.n	8004684 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3304      	adds	r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f008 fbca 	bl	800ce18 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d012      	beq.n	80046c8 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f007 ff6a 	bl	800c59c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80046c8:	bf00      	nop
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <pbuf_pool_is_empty+0x14>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	20006990 	.word	0x20006990

080046e8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
 80046f2:	460b      	mov	r3, r1
 80046f4:	80bb      	strh	r3, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d81c      	bhi.n	800473a <pbuf_alloc+0x52>
 8004700:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <pbuf_alloc+0x20>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800471d 	.word	0x0800471d
 800470c:	08004723 	.word	0x08004723
 8004710:	08004729 	.word	0x08004729
 8004714:	0800472f 	.word	0x0800472f
 8004718:	08004735 	.word	0x08004735
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800471c:	2336      	movs	r3, #54	; 0x36
 800471e:	82fb      	strh	r3, [r7, #22]
    break;
 8004720:	e014      	b.n	800474c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004722:	2322      	movs	r3, #34	; 0x22
 8004724:	82fb      	strh	r3, [r7, #22]
    break;
 8004726:	e011      	b.n	800474c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004728:	230e      	movs	r3, #14
 800472a:	82fb      	strh	r3, [r7, #22]
    break;
 800472c:	e00e      	b.n	800474c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800472e:	2300      	movs	r3, #0
 8004730:	82fb      	strh	r3, [r7, #22]
    break;
 8004732:	e00b      	b.n	800474c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	82fb      	strh	r3, [r7, #22]
    break;
 8004738:	e008      	b.n	800474c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800473a:	4ba5      	ldr	r3, [pc, #660]	; (80049d0 <pbuf_alloc+0x2e8>)
 800473c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8004740:	49a4      	ldr	r1, [pc, #656]	; (80049d4 <pbuf_alloc+0x2ec>)
 8004742:	48a5      	ldr	r0, [pc, #660]	; (80049d8 <pbuf_alloc+0x2f0>)
 8004744:	f009 fed0 	bl	800e4e8 <iprintf>
    return NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	e15d      	b.n	8004a08 <pbuf_alloc+0x320>
  }

  switch (type) {
 800474c:	79bb      	ldrb	r3, [r7, #6]
 800474e:	2b03      	cmp	r3, #3
 8004750:	f200 8134 	bhi.w	80049bc <pbuf_alloc+0x2d4>
 8004754:	a201      	add	r2, pc, #4	; (adr r2, 800475c <pbuf_alloc+0x74>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	080048fd 	.word	0x080048fd
 8004760:	08004989 	.word	0x08004989
 8004764:	08004989 	.word	0x08004989
 8004768:	0800476d 	.word	0x0800476d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800476c:	2008      	movs	r0, #8
 800476e:	f7ff fdd3 	bl	8004318 <memp_malloc>
 8004772:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800477a:	f7ff ffa9 	bl	80046d0 <pbuf_pool_is_empty>
      return NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	e142      	b.n	8004a08 <pbuf_alloc+0x320>
    }
    p->type = type;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	79ba      	ldrb	r2, [r7, #6]
 8004786:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800478e:	8afb      	ldrh	r3, [r7, #22]
 8004790:	3310      	adds	r3, #16
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	3303      	adds	r3, #3
 8004798:	f023 0303 	bic.w	r3, r3, #3
 800479c:	461a      	mov	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <pbuf_alloc+0xd4>
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <pbuf_alloc+0x2e8>)
 80047b0:	f240 1229 	movw	r2, #297	; 0x129
 80047b4:	4989      	ldr	r1, [pc, #548]	; (80049dc <pbuf_alloc+0x2f4>)
 80047b6:	4888      	ldr	r0, [pc, #544]	; (80049d8 <pbuf_alloc+0x2f0>)
 80047b8:	f009 fe96 	bl	800e4e8 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	88ba      	ldrh	r2, [r7, #4]
 80047c0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80047c2:	8afb      	ldrh	r3, [r7, #22]
 80047c4:	3303      	adds	r3, #3
 80047c6:	f023 0303 	bic.w	r3, r3, #3
 80047ca:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80047ce:	88bb      	ldrh	r3, [r7, #4]
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf28      	it	cs
 80047d4:	4613      	movcs	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	8952      	ldrh	r2, [r2, #10]
 80047e4:	441a      	add	r2, r3
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d906      	bls.n	80047fe <pbuf_alloc+0x116>
 80047f0:	4b77      	ldr	r3, [pc, #476]	; (80049d0 <pbuf_alloc+0x2e8>)
 80047f2:	f44f 7298 	mov.w	r2, #304	; 0x130
 80047f6:	497a      	ldr	r1, [pc, #488]	; (80049e0 <pbuf_alloc+0x2f8>)
 80047f8:	4877      	ldr	r0, [pc, #476]	; (80049d8 <pbuf_alloc+0x2f0>)
 80047fa:	f009 fe75 	bl	800e4e8 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80047fe:	8afb      	ldrh	r3, [r7, #22]
 8004800:	3303      	adds	r3, #3
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800480a:	d106      	bne.n	800481a <pbuf_alloc+0x132>
 800480c:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <pbuf_alloc+0x2e8>)
 800480e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004812:	4974      	ldr	r1, [pc, #464]	; (80049e4 <pbuf_alloc+0x2fc>)
 8004814:	4870      	ldr	r0, [pc, #448]	; (80049d8 <pbuf_alloc+0x2f0>)
 8004816:	f009 fe67 	bl	800e4e8 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2201      	movs	r2, #1
 800481e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004824:	88bb      	ldrh	r3, [r7, #4]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	8952      	ldrh	r2, [r2, #10]
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800482e:	e061      	b.n	80048f4 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004830:	2008      	movs	r0, #8
 8004832:	f7ff fd71 	bl	8004318 <memp_malloc>
 8004836:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800483e:	f7ff ff47 	bl	80046d0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004842:	69f8      	ldr	r0, [r7, #28]
 8004844:	f000 fac2 	bl	8004dcc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	e0dd      	b.n	8004a08 <pbuf_alloc+0x320>
      }
      q->type = type;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	79ba      	ldrb	r2, [r7, #6]
 8004850:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800486a:	4293      	cmp	r3, r2
 800486c:	dd06      	ble.n	800487c <pbuf_alloc+0x194>
 800486e:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <pbuf_alloc+0x2e8>)
 8004870:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8004874:	495c      	ldr	r1, [pc, #368]	; (80049e8 <pbuf_alloc+0x300>)
 8004876:	4858      	ldr	r0, [pc, #352]	; (80049d8 <pbuf_alloc+0x2f0>)
 8004878:	f009 fe36 	bl	800e4e8 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800488c:	bf28      	it	cs
 800488e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f103 0210 	add.w	r2, r3, #16
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <pbuf_alloc+0x1d4>
 80048ae:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <pbuf_alloc+0x2e8>)
 80048b0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80048b4:	494d      	ldr	r1, [pc, #308]	; (80049ec <pbuf_alloc+0x304>)
 80048b6:	4848      	ldr	r0, [pc, #288]	; (80049d8 <pbuf_alloc+0x2f0>)
 80048b8:	f009 fe16 	bl	800e4e8 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	8952      	ldrh	r2, [r2, #10]
 80048c4:	441a      	add	r2, r3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d906      	bls.n	80048de <pbuf_alloc+0x1f6>
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <pbuf_alloc+0x2e8>)
 80048d2:	f240 1255 	movw	r2, #341	; 0x155
 80048d6:	4942      	ldr	r1, [pc, #264]	; (80049e0 <pbuf_alloc+0x2f8>)
 80048d8:	483f      	ldr	r0, [pc, #252]	; (80049d8 <pbuf_alloc+0x2f0>)
 80048da:	f009 fe05 	bl	800e4e8 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	895b      	ldrh	r3, [r3, #10]
 80048e8:	461a      	mov	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	dc9a      	bgt.n	8004830 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 80048fa:	e07e      	b.n	80049fa <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80048fc:	8afb      	ldrh	r3, [r7, #22]
 80048fe:	3313      	adds	r3, #19
 8004900:	b29b      	uxth	r3, r3
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	b29a      	uxth	r2, r3
 8004908:	88bb      	ldrh	r3, [r7, #4]
 800490a:	3303      	adds	r3, #3
 800490c:	b29b      	uxth	r3, r3
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	b29b      	uxth	r3, r3
 8004914:	4413      	add	r3, r2
 8004916:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004918:	897a      	ldrh	r2, [r7, #10]
 800491a:	88bb      	ldrh	r3, [r7, #4]
 800491c:	3303      	adds	r3, #3
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	429a      	cmp	r2, r3
 8004924:	d201      	bcs.n	800492a <pbuf_alloc+0x242>
        return NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	e06e      	b.n	8004a08 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800492a:	897b      	ldrh	r3, [r7, #10]
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fb95 	bl	800405c <mem_malloc>
 8004932:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <pbuf_alloc+0x256>
      return NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	e064      	b.n	8004a08 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800493e:	8afb      	ldrh	r3, [r7, #22]
 8004940:	3310      	adds	r3, #16
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	3303      	adds	r3, #3
 8004948:	f023 0303 	bic.w	r3, r3, #3
 800494c:	461a      	mov	r2, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	88ba      	ldrh	r2, [r7, #4]
 8004956:	811a      	strh	r2, [r3, #8]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	891a      	ldrh	r2, [r3, #8]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	79ba      	ldrb	r2, [r7, #6]
 800496a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d03f      	beq.n	80049f8 <pbuf_alloc+0x310>
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pbuf_alloc+0x2e8>)
 800497a:	f240 1277 	movw	r2, #375	; 0x177
 800497e:	491c      	ldr	r1, [pc, #112]	; (80049f0 <pbuf_alloc+0x308>)
 8004980:	4815      	ldr	r0, [pc, #84]	; (80049d8 <pbuf_alloc+0x2f0>)
 8004982:	f009 fdb1 	bl	800e4e8 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8004986:	e037      	b.n	80049f8 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004988:	2007      	movs	r0, #7
 800498a:	f7ff fcc5 	bl	8004318 <memp_malloc>
 800498e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	e036      	b.n	8004a08 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	88ba      	ldrh	r2, [r7, #4]
 80049a4:	811a      	strh	r2, [r3, #8]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	891a      	ldrh	r2, [r3, #8]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	79ba      	ldrb	r2, [r7, #6]
 80049b8:	731a      	strb	r2, [r3, #12]
    break;
 80049ba:	e01e      	b.n	80049fa <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <pbuf_alloc+0x2e8>)
 80049be:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80049c2:	490c      	ldr	r1, [pc, #48]	; (80049f4 <pbuf_alloc+0x30c>)
 80049c4:	4804      	ldr	r0, [pc, #16]	; (80049d8 <pbuf_alloc+0x2f0>)
 80049c6:	f009 fd8f 	bl	800e4e8 <iprintf>
    return NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e01c      	b.n	8004a08 <pbuf_alloc+0x320>
 80049ce:	bf00      	nop
 80049d0:	0800f6f0 	.word	0x0800f6f0
 80049d4:	0800f720 	.word	0x0800f720
 80049d8:	0800f73c 	.word	0x0800f73c
 80049dc:	0800f764 	.word	0x0800f764
 80049e0:	0800f794 	.word	0x0800f794
 80049e4:	0800f7c8 	.word	0x0800f7c8
 80049e8:	0800f7fc 	.word	0x0800f7fc
 80049ec:	0800f810 	.word	0x0800f810
 80049f0:	0800f840 	.word	0x0800f840
 80049f4:	0800f86c 	.word	0x0800f86c
    break;
 80049f8:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2201      	movs	r2, #1
 80049fe:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2200      	movs	r2, #0
 8004a04:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004a06:	69fb      	ldr	r3, [r7, #28]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3720      	adds	r7, #32
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4603      	mov	r3, r0
 8004a1a:	71fb      	strb	r3, [r7, #7]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	80bb      	strh	r3, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d81b      	bhi.n	8004a62 <pbuf_alloced_custom+0x52>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <pbuf_alloced_custom+0x20>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a45 	.word	0x08004a45
 8004a34:	08004a4b 	.word	0x08004a4b
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a57 	.word	0x08004a57
 8004a40:	08004a5d 	.word	0x08004a5d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004a44:	2336      	movs	r3, #54	; 0x36
 8004a46:	81fb      	strh	r3, [r7, #14]
    break;
 8004a48:	e014      	b.n	8004a74 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004a4a:	2322      	movs	r3, #34	; 0x22
 8004a4c:	81fb      	strh	r3, [r7, #14]
    break;
 8004a4e:	e011      	b.n	8004a74 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004a50:	230e      	movs	r3, #14
 8004a52:	81fb      	strh	r3, [r7, #14]
    break;
 8004a54:	e00e      	b.n	8004a74 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004a56:	2300      	movs	r3, #0
 8004a58:	81fb      	strh	r3, [r7, #14]
    break;
 8004a5a:	e00b      	b.n	8004a74 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	81fb      	strh	r3, [r7, #14]
    break;
 8004a60:	e008      	b.n	8004a74 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004a62:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <pbuf_alloced_custom+0xc8>)
 8004a64:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004a68:	491c      	ldr	r1, [pc, #112]	; (8004adc <pbuf_alloced_custom+0xcc>)
 8004a6a:	481d      	ldr	r0, [pc, #116]	; (8004ae0 <pbuf_alloced_custom+0xd0>)
 8004a6c:	f009 fd3c 	bl	800e4e8 <iprintf>
    return NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e02d      	b.n	8004ad0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	3303      	adds	r3, #3
 8004a78:	f023 0203 	bic.w	r2, r3, #3
 8004a7c:	88bb      	ldrh	r3, [r7, #4]
 8004a7e:	441a      	add	r2, r3
 8004a80:	8bbb      	ldrh	r3, [r7, #28]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d901      	bls.n	8004a8a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e022      	b.n	8004ad0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004a96:	89fb      	ldrh	r3, [r7, #14]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	e002      	b.n	8004aae <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	88ba      	ldrh	r2, [r7, #4]
 8004ab8:	811a      	strh	r2, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	891a      	ldrh	r2, [r3, #8]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	79ba      	ldrb	r2, [r7, #6]
 8004ac6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004ace:	683b      	ldr	r3, [r7, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	0800f6f0 	.word	0x0800f6f0
 8004adc:	0800f888 	.word	0x0800f888
 8004ae0:	0800f73c 	.word	0x0800f73c

08004ae4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <pbuf_realloc+0x20>
 8004af6:	4b4b      	ldr	r3, [pc, #300]	; (8004c24 <pbuf_realloc+0x140>)
 8004af8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004afc:	494a      	ldr	r1, [pc, #296]	; (8004c28 <pbuf_realloc+0x144>)
 8004afe:	484b      	ldr	r0, [pc, #300]	; (8004c2c <pbuf_realloc+0x148>)
 8004b00:	f009 fcf2 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7b1b      	ldrb	r3, [r3, #12]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d012      	beq.n	8004b32 <pbuf_realloc+0x4e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7b1b      	ldrb	r3, [r3, #12]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d00e      	beq.n	8004b32 <pbuf_realloc+0x4e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <pbuf_realloc+0x4e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7b1b      	ldrb	r3, [r3, #12]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d006      	beq.n	8004b32 <pbuf_realloc+0x4e>
 8004b24:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <pbuf_realloc+0x140>)
 8004b26:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004b2a:	4941      	ldr	r1, [pc, #260]	; (8004c30 <pbuf_realloc+0x14c>)
 8004b2c:	483f      	ldr	r0, [pc, #252]	; (8004c2c <pbuf_realloc+0x148>)
 8004b2e:	f009 fcdb 	bl	800e4e8 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	891b      	ldrh	r3, [r3, #8]
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d26f      	bcs.n	8004c1c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	8912      	ldrh	r2, [r2, #8]
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	827b      	strh	r3, [r7, #18]
  q = p;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004b4e:	e025      	b.n	8004b9c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	895b      	ldrh	r3, [r3, #10]
 8004b54:	8a7a      	ldrh	r2, [r7, #18]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b60:	4293      	cmp	r3, r2
 8004b62:	dd06      	ble.n	8004b72 <pbuf_realloc+0x8e>
 8004b64:	4b2f      	ldr	r3, [pc, #188]	; (8004c24 <pbuf_realloc+0x140>)
 8004b66:	f240 220b 	movw	r2, #523	; 0x20b
 8004b6a:	4932      	ldr	r1, [pc, #200]	; (8004c34 <pbuf_realloc+0x150>)
 8004b6c:	482f      	ldr	r0, [pc, #188]	; (8004c2c <pbuf_realloc+0x148>)
 8004b6e:	f009 fcbb 	bl	800e4e8 <iprintf>
    q->tot_len += (u16_t)grow;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	891a      	ldrh	r2, [r3, #8]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d106      	bne.n	8004b9c <pbuf_realloc+0xb8>
 8004b8e:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <pbuf_realloc+0x140>)
 8004b90:	f240 220f 	movw	r2, #527	; 0x20f
 8004b94:	4928      	ldr	r1, [pc, #160]	; (8004c38 <pbuf_realloc+0x154>)
 8004b96:	4825      	ldr	r0, [pc, #148]	; (8004c2c <pbuf_realloc+0x148>)
 8004b98:	f009 fca6 	bl	800e4e8 <iprintf>
  while (rem_len > q->len) {
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	895b      	ldrh	r3, [r3, #10]
 8004ba0:	8a7a      	ldrh	r2, [r7, #18]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d8d4      	bhi.n	8004b50 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	7b1b      	ldrb	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d122      	bne.n	8004bf4 <pbuf_realloc+0x110>
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	895b      	ldrh	r3, [r3, #10]
 8004bb2:	8a7a      	ldrh	r2, [r7, #18]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d01d      	beq.n	8004bf4 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	7b5b      	ldrb	r3, [r3, #13]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d117      	bne.n	8004bf4 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	8a7b      	ldrh	r3, [r7, #18]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6978      	ldr	r0, [r7, #20]
 8004bda:	f7ff f963 	bl	8003ea4 <mem_trim>
 8004bde:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <pbuf_realloc+0x110>
 8004be6:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <pbuf_realloc+0x140>)
 8004be8:	f240 221d 	movw	r2, #541	; 0x21d
 8004bec:	4913      	ldr	r1, [pc, #76]	; (8004c3c <pbuf_realloc+0x158>)
 8004bee:	480f      	ldr	r0, [pc, #60]	; (8004c2c <pbuf_realloc+0x148>)
 8004bf0:	f009 fc7a 	bl	800e4e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	8a7a      	ldrh	r2, [r7, #18]
 8004bf8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	895a      	ldrh	r2, [r3, #10]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 f8dc 	bl	8004dcc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e000      	b.n	8004c1e <pbuf_realloc+0x13a>
    return;
 8004c1c:	bf00      	nop

}
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	0800f6f0 	.word	0x0800f6f0
 8004c28:	0800f8ac 	.word	0x0800f8ac
 8004c2c:	0800f73c 	.word	0x0800f73c
 8004c30:	0800f8c4 	.word	0x0800f8c4
 8004c34:	0800f8e0 	.word	0x0800f8e0
 8004c38:	0800f8f4 	.word	0x0800f8f4
 8004c3c:	0800f90c 	.word	0x0800f90c

08004c40 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <pbuf_header_impl+0x24>
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <pbuf_header_impl+0x130>)
 8004c58:	f240 223f 	movw	r2, #575	; 0x23f
 8004c5c:	4945      	ldr	r1, [pc, #276]	; (8004d74 <pbuf_header_impl+0x134>)
 8004c5e:	4846      	ldr	r0, [pc, #280]	; (8004d78 <pbuf_header_impl+0x138>)
 8004c60:	f009 fc42 	bl	800e4e8 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <pbuf_header_impl+0x32>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <pbuf_header_impl+0x36>
    return 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e078      	b.n	8004d68 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004c76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	da10      	bge.n	8004ca0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	425b      	negs	r3, r3
 8004c82:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	895b      	ldrh	r3, [r3, #10]
 8004c88:	89fa      	ldrh	r2, [r7, #14]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d90a      	bls.n	8004ca4 <pbuf_header_impl+0x64>
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <pbuf_header_impl+0x130>)
 8004c90:	f240 2247 	movw	r2, #583	; 0x247
 8004c94:	4939      	ldr	r1, [pc, #228]	; (8004d7c <pbuf_header_impl+0x13c>)
 8004c96:	4838      	ldr	r0, [pc, #224]	; (8004d78 <pbuf_header_impl+0x138>)
 8004c98:	f009 fc26 	bl	800e4e8 <iprintf>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e063      	b.n	8004d68 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7b1b      	ldrb	r3, [r3, #12]
 8004ca8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004cb0:	89bb      	ldrh	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <pbuf_header_impl+0x7c>
 8004cb6:	89bb      	ldrh	r3, [r7, #12]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d112      	bne.n	8004ce2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	441a      	add	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3310      	adds	r3, #16
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d238      	bcs.n	8004d4a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e042      	b.n	8004d68 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004ce2:	89bb      	ldrh	r3, [r7, #12]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d002      	beq.n	8004cee <pbuf_header_impl+0xae>
 8004ce8:	89bb      	ldrh	r3, [r7, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d124      	bne.n	8004d38 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da0d      	bge.n	8004d12 <pbuf_header_impl+0xd2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	895b      	ldrh	r3, [r3, #10]
 8004cfa:	89fa      	ldrh	r2, [r7, #14]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d808      	bhi.n	8004d12 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d08:	425b      	negs	r3, r3
 8004d0a:	441a      	add	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	e011      	b.n	8004d36 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004d12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dd0b      	ble.n	8004d32 <pbuf_header_impl+0xf2>
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	441a      	add	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]
 8004d30:	e001      	b.n	8004d36 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e018      	b.n	8004d68 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004d36:	e008      	b.n	8004d4a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <pbuf_header_impl+0x130>)
 8004d3a:	f240 2277 	movw	r2, #631	; 0x277
 8004d3e:	4910      	ldr	r1, [pc, #64]	; (8004d80 <pbuf_header_impl+0x140>)
 8004d40:	480d      	ldr	r0, [pc, #52]	; (8004d78 <pbuf_header_impl+0x138>)
 8004d42:	f009 fbd1 	bl	800e4e8 <iprintf>
    return 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e00e      	b.n	8004d68 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	895a      	ldrh	r2, [r3, #10]
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	4413      	add	r3, r2
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	891a      	ldrh	r2, [r3, #8]
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	4413      	add	r3, r2
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	0800f6f0 	.word	0x0800f6f0
 8004d74:	0800f928 	.word	0x0800f928
 8004d78:	0800f73c 	.word	0x0800f73c
 8004d7c:	0800f934 	.word	0x0800f934
 8004d80:	0800f954 	.word	0x0800f954

08004d84 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d94:	2200      	movs	r2, #0
 8004d96:	4619      	mov	r1, r3
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff51 	bl	8004c40 <pbuf_header_impl>
 8004d9e:	4603      	mov	r3, r0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004db8:	2201      	movs	r2, #1
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff3f 	bl	8004c40 <pbuf_header_impl>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <pbuf_free+0x22>
 8004de0:	4b3e      	ldr	r3, [pc, #248]	; (8004edc <pbuf_free+0x110>)
 8004de2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004de6:	493e      	ldr	r1, [pc, #248]	; (8004ee0 <pbuf_free+0x114>)
 8004de8:	483e      	ldr	r0, [pc, #248]	; (8004ee4 <pbuf_free+0x118>)
 8004dea:	f009 fb7d 	bl	800e4e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e070      	b.n	8004ed4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7b1b      	ldrb	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <pbuf_free+0x54>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d00e      	beq.n	8004e20 <pbuf_free+0x54>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7b1b      	ldrb	r3, [r3, #12]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d00a      	beq.n	8004e20 <pbuf_free+0x54>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7b1b      	ldrb	r3, [r3, #12]
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d006      	beq.n	8004e20 <pbuf_free+0x54>
 8004e12:	4b32      	ldr	r3, [pc, #200]	; (8004edc <pbuf_free+0x110>)
 8004e14:	f240 22de 	movw	r2, #734	; 0x2de
 8004e18:	4933      	ldr	r1, [pc, #204]	; (8004ee8 <pbuf_free+0x11c>)
 8004e1a:	4832      	ldr	r0, [pc, #200]	; (8004ee4 <pbuf_free+0x118>)
 8004e1c:	f009 fb64 	bl	800e4e8 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004e24:	e052      	b.n	8004ecc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	89db      	ldrh	r3, [r3, #14]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <pbuf_free+0x70>
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <pbuf_free+0x110>)
 8004e30:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004e34:	492d      	ldr	r1, [pc, #180]	; (8004eec <pbuf_free+0x120>)
 8004e36:	482b      	ldr	r0, [pc, #172]	; (8004ee4 <pbuf_free+0x118>)
 8004e38:	f009 fb56 	bl	800e4e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	89db      	ldrh	r3, [r3, #14]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	81da      	strh	r2, [r3, #14]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	89db      	ldrh	r3, [r3, #14]
 8004e4c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004e4e:	8abb      	ldrh	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d139      	bne.n	8004ec8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7b1b      	ldrb	r3, [r3, #12]
 8004e5e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7b5b      	ldrb	r3, [r3, #13]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <pbuf_free+0xba>
 8004e78:	4b18      	ldr	r3, [pc, #96]	; (8004edc <pbuf_free+0x110>)
 8004e7a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004e7e:	491c      	ldr	r1, [pc, #112]	; (8004ef0 <pbuf_free+0x124>)
 8004e80:	4818      	ldr	r0, [pc, #96]	; (8004ee4 <pbuf_free+0x118>)
 8004e82:	f009 fb31 	bl	800e4e8 <iprintf>
        pc->custom_free_function(p);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	e015      	b.n	8004ebc <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d104      	bne.n	8004ea0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	2008      	movs	r0, #8
 8004e9a:	f7ff fa89 	bl	80043b0 <memp_free>
 8004e9e:	e00d      	b.n	8004ebc <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d002      	beq.n	8004eac <pbuf_free+0xe0>
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d104      	bne.n	8004eb6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	2007      	movs	r0, #7
 8004eb0:	f7ff fa7e 	bl	80043b0 <memp_free>
 8004eb4:	e002      	b.n	8004ebc <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fe ff92 	bl	8003de0 <mem_free>
        }
      }
      count++;
 8004ebc:	7dfb      	ldrb	r3, [r7, #23]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	e001      	b.n	8004ecc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1a9      	bne.n	8004e26 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	0800f6f0 	.word	0x0800f6f0
 8004ee0:	0800f928 	.word	0x0800f928
 8004ee4:	0800f73c 	.word	0x0800f73c
 8004ee8:	0800f964 	.word	0x0800f964
 8004eec:	0800f97c 	.word	0x0800f97c
 8004ef0:	0800f994 	.word	0x0800f994

08004ef4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004f00:	e005      	b.n	8004f0e <pbuf_clen+0x1a>
    ++len;
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	3301      	adds	r3, #1
 8004f06:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f6      	bne.n	8004f02 <pbuf_clen+0xe>
  }
  return len;
 8004f14:	89fb      	ldrh	r3, [r7, #14]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d010      	beq.n	8004f54 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	89db      	ldrh	r3, [r3, #14]
 8004f36:	3301      	adds	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	89db      	ldrh	r3, [r3, #14]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <pbuf_ref+0x30>
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <pbuf_ref+0x38>)
 8004f48:	f240 3239 	movw	r2, #825	; 0x339
 8004f4c:	4904      	ldr	r1, [pc, #16]	; (8004f60 <pbuf_ref+0x3c>)
 8004f4e:	4805      	ldr	r0, [pc, #20]	; (8004f64 <pbuf_ref+0x40>)
 8004f50:	f009 faca 	bl	800e4e8 <iprintf>
  }
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	0800f6f0 	.word	0x0800f6f0
 8004f60:	0800f9b8 	.word	0x0800f9b8
 8004f64:	0800f73c 	.word	0x0800f73c

08004f68 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <pbuf_cat+0x16>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d107      	bne.n	8004f8e <pbuf_cat+0x26>
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <pbuf_cat+0x98>)
 8004f80:	f240 324d 	movw	r2, #845	; 0x34d
 8004f84:	491f      	ldr	r1, [pc, #124]	; (8005004 <pbuf_cat+0x9c>)
 8004f86:	4820      	ldr	r0, [pc, #128]	; (8005008 <pbuf_cat+0xa0>)
 8004f88:	f009 faae 	bl	800e4e8 <iprintf>
 8004f8c:	e034      	b.n	8004ff8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e00a      	b.n	8004faa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	891a      	ldrh	r2, [r3, #8]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	891b      	ldrh	r3, [r3, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	891a      	ldrh	r2, [r3, #8]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	895b      	ldrh	r3, [r3, #10]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d006      	beq.n	8004fcc <pbuf_cat+0x64>
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <pbuf_cat+0x98>)
 8004fc0:	f240 3255 	movw	r2, #853	; 0x355
 8004fc4:	4911      	ldr	r1, [pc, #68]	; (800500c <pbuf_cat+0xa4>)
 8004fc6:	4810      	ldr	r0, [pc, #64]	; (8005008 <pbuf_cat+0xa0>)
 8004fc8:	f009 fa8e 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d006      	beq.n	8004fe2 <pbuf_cat+0x7a>
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <pbuf_cat+0x98>)
 8004fd6:	f240 3256 	movw	r2, #854	; 0x356
 8004fda:	490d      	ldr	r1, [pc, #52]	; (8005010 <pbuf_cat+0xa8>)
 8004fdc:	480a      	ldr	r0, [pc, #40]	; (8005008 <pbuf_cat+0xa0>)
 8004fde:	f009 fa83 	bl	800e4e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	891a      	ldrh	r2, [r3, #8]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	891b      	ldrh	r3, [r3, #8]
 8004fea:	4413      	add	r3, r2
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	0800f6f0 	.word	0x0800f6f0
 8005004:	0800f9cc 	.word	0x0800f9cc
 8005008:	0800f73c 	.word	0x0800f73c
 800500c:	0800fa04 	.word	0x0800fa04
 8005010:	0800fa34 	.word	0x0800fa34

08005014 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffa1 	bl	8004f68 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005026:	6838      	ldr	r0, [r7, #0]
 8005028:	f7ff ff7c 	bl	8004f24 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800503e:	2300      	movs	r3, #0
 8005040:	81fb      	strh	r3, [r7, #14]
 8005042:	2300      	movs	r3, #0
 8005044:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <pbuf_copy+0x2a>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <pbuf_copy+0x2a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	891a      	ldrh	r2, [r3, #8]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	891b      	ldrh	r3, [r3, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	d209      	bcs.n	8005072 <pbuf_copy+0x3e>
 800505e:	4b54      	ldr	r3, [pc, #336]	; (80051b0 <pbuf_copy+0x17c>)
 8005060:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005064:	4953      	ldr	r1, [pc, #332]	; (80051b4 <pbuf_copy+0x180>)
 8005066:	4854      	ldr	r0, [pc, #336]	; (80051b8 <pbuf_copy+0x184>)
 8005068:	f009 fa3e 	bl	800e4e8 <iprintf>
 800506c:	f06f 030f 	mvn.w	r3, #15
 8005070:	e099      	b.n	80051a6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	895b      	ldrh	r3, [r3, #10]
 8005076:	461a      	mov	r2, r3
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	895b      	ldrh	r3, [r3, #10]
 8005080:	4619      	mov	r1, r3
 8005082:	89bb      	ldrh	r3, [r7, #12]
 8005084:	1acb      	subs	r3, r1, r3
 8005086:	429a      	cmp	r2, r3
 8005088:	db05      	blt.n	8005096 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	895a      	ldrh	r2, [r3, #10]
 800508e:	89bb      	ldrh	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	817b      	strh	r3, [r7, #10]
 8005094:	e004      	b.n	80050a0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	895a      	ldrh	r2, [r3, #10]
 800509a:	89fb      	ldrh	r3, [r7, #14]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	18d0      	adds	r0, r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	89bb      	ldrh	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	897a      	ldrh	r2, [r7, #10]
 80050b2:	4619      	mov	r1, r3
 80050b4:	f009 fa05 	bl	800e4c2 <memcpy>
    offset_to += len;
 80050b8:	89fa      	ldrh	r2, [r7, #14]
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	4413      	add	r3, r2
 80050be:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80050c0:	89ba      	ldrh	r2, [r7, #12]
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	4413      	add	r3, r2
 80050c6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	895b      	ldrh	r3, [r3, #10]
 80050cc:	89fa      	ldrh	r2, [r7, #14]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d906      	bls.n	80050e0 <pbuf_copy+0xac>
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <pbuf_copy+0x17c>)
 80050d4:	f240 32cd 	movw	r2, #973	; 0x3cd
 80050d8:	4938      	ldr	r1, [pc, #224]	; (80051bc <pbuf_copy+0x188>)
 80050da:	4837      	ldr	r0, [pc, #220]	; (80051b8 <pbuf_copy+0x184>)
 80050dc:	f009 fa04 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	895b      	ldrh	r3, [r3, #10]
 80050e4:	89ba      	ldrh	r2, [r7, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d906      	bls.n	80050f8 <pbuf_copy+0xc4>
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <pbuf_copy+0x17c>)
 80050ec:	f240 32ce 	movw	r2, #974	; 0x3ce
 80050f0:	4933      	ldr	r1, [pc, #204]	; (80051c0 <pbuf_copy+0x18c>)
 80050f2:	4831      	ldr	r0, [pc, #196]	; (80051b8 <pbuf_copy+0x184>)
 80050f4:	f009 f9f8 	bl	800e4e8 <iprintf>
    if (offset_from >= p_from->len) {
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	895b      	ldrh	r3, [r3, #10]
 80050fc:	89ba      	ldrh	r2, [r7, #12]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d304      	bcc.n	800510c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	895b      	ldrh	r3, [r3, #10]
 8005110:	89fa      	ldrh	r2, [r7, #14]
 8005112:	429a      	cmp	r2, r3
 8005114:	d114      	bne.n	8005140 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10c      	bne.n	8005140 <pbuf_copy+0x10c>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <pbuf_copy+0x10c>
 800512c:	4b20      	ldr	r3, [pc, #128]	; (80051b0 <pbuf_copy+0x17c>)
 800512e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005132:	4924      	ldr	r1, [pc, #144]	; (80051c4 <pbuf_copy+0x190>)
 8005134:	4820      	ldr	r0, [pc, #128]	; (80051b8 <pbuf_copy+0x184>)
 8005136:	f009 f9d7 	bl	800e4e8 <iprintf>
 800513a:	f06f 030f 	mvn.w	r3, #15
 800513e:	e032      	b.n	80051a6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <pbuf_copy+0x13a>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	895a      	ldrh	r2, [r3, #10]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	891b      	ldrh	r3, [r3, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d10d      	bne.n	800516e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <pbuf_copy+0x13a>
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <pbuf_copy+0x17c>)
 800515c:	f240 32de 	movw	r2, #990	; 0x3de
 8005160:	4919      	ldr	r1, [pc, #100]	; (80051c8 <pbuf_copy+0x194>)
 8005162:	4815      	ldr	r0, [pc, #84]	; (80051b8 <pbuf_copy+0x184>)
 8005164:	f009 f9c0 	bl	800e4e8 <iprintf>
 8005168:	f06f 0305 	mvn.w	r3, #5
 800516c:	e01b      	b.n	80051a6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <pbuf_copy+0x168>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	895a      	ldrh	r2, [r3, #10]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	891b      	ldrh	r3, [r3, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	d10d      	bne.n	800519c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <pbuf_copy+0x168>
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <pbuf_copy+0x17c>)
 800518a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800518e:	490e      	ldr	r1, [pc, #56]	; (80051c8 <pbuf_copy+0x194>)
 8005190:	4809      	ldr	r0, [pc, #36]	; (80051b8 <pbuf_copy+0x184>)
 8005192:	f009 f9a9 	bl	800e4e8 <iprintf>
 8005196:	f06f 0305 	mvn.w	r3, #5
 800519a:	e004      	b.n	80051a6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f47f af67 	bne.w	8005072 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	0800f6f0 	.word	0x0800f6f0
 80051b4:	0800fa80 	.word	0x0800fa80
 80051b8:	0800f73c 	.word	0x0800f73c
 80051bc:	0800fab0 	.word	0x0800fab0
 80051c0:	0800fac8 	.word	0x0800fac8
 80051c4:	0800fae4 	.word	0x0800fae4
 80051c8:	0800faf4 	.word	0x0800faf4

080051cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4611      	mov	r1, r2
 80051d8:	461a      	mov	r2, r3
 80051da:	460b      	mov	r3, r1
 80051dc:	80fb      	strh	r3, [r7, #6]
 80051de:	4613      	mov	r3, r2
 80051e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d108      	bne.n	80051fe <pbuf_copy_partial+0x32>
 80051ec:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <pbuf_copy_partial+0xe4>)
 80051ee:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80051f2:	4930      	ldr	r1, [pc, #192]	; (80052b4 <pbuf_copy_partial+0xe8>)
 80051f4:	4830      	ldr	r0, [pc, #192]	; (80052b8 <pbuf_copy_partial+0xec>)
 80051f6:	f009 f977 	bl	800e4e8 <iprintf>
 80051fa:	2300      	movs	r3, #0
 80051fc:	e054      	b.n	80052a8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <pbuf_copy_partial+0x4a>
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <pbuf_copy_partial+0xe4>)
 8005206:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800520a:	492c      	ldr	r1, [pc, #176]	; (80052bc <pbuf_copy_partial+0xf0>)
 800520c:	482a      	ldr	r0, [pc, #168]	; (80052b8 <pbuf_copy_partial+0xec>)
 800520e:	f009 f96b 	bl	800e4e8 <iprintf>
 8005212:	2300      	movs	r3, #0
 8005214:	e048      	b.n	80052a8 <pbuf_copy_partial+0xdc>

  left = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <pbuf_copy_partial+0x5a>
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <pbuf_copy_partial+0x5e>
    return 0;
 8005226:	2300      	movs	r3, #0
 8005228:	e03e      	b.n	80052a8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	e034      	b.n	800529a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005230:	88bb      	ldrh	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <pbuf_copy_partial+0x80>
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	895b      	ldrh	r3, [r3, #10]
 800523a:	88ba      	ldrh	r2, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d305      	bcc.n	800524c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	895b      	ldrh	r3, [r3, #10]
 8005244:	88ba      	ldrh	r2, [r7, #4]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	80bb      	strh	r3, [r7, #4]
 800524a:	e023      	b.n	8005294 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	895a      	ldrh	r2, [r3, #10]
 8005250:	88bb      	ldrh	r3, [r7, #4]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005256:	8b3a      	ldrh	r2, [r7, #24]
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	429a      	cmp	r2, r3
 800525c:	d901      	bls.n	8005262 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005262:	8b7b      	ldrh	r3, [r7, #26]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	18d0      	adds	r0, r2, r3
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	88bb      	ldrh	r3, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	8b3a      	ldrh	r2, [r7, #24]
 8005272:	4619      	mov	r1, r3
 8005274:	f009 f925 	bl	800e4c2 <memcpy>
      copied_total += buf_copy_len;
 8005278:	8afa      	ldrh	r2, [r7, #22]
 800527a:	8b3b      	ldrh	r3, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005280:	8b7a      	ldrh	r2, [r7, #26]
 8005282:	8b3b      	ldrh	r3, [r7, #24]
 8005284:	4413      	add	r3, r2
 8005286:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005288:	88fa      	ldrh	r2, [r7, #6]
 800528a:	8b3b      	ldrh	r3, [r7, #24]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <pbuf_copy_partial+0xda>
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1c4      	bne.n	8005230 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80052a6:	8afb      	ldrh	r3, [r7, #22]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	0800f6f0 	.word	0x0800f6f0
 80052b4:	0800fb20 	.word	0x0800fb20
 80052b8:	0800f73c 	.word	0x0800f73c
 80052bc:	0800fb40 	.word	0x0800fb40

080052c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80052d4:	f000 fdf0 	bl	8005eb8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80052d8:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <tcp_tmr+0x28>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <tcp_tmr+0x28>)
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <tcp_tmr+0x28>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80052f0:	f000 fb22 	bl	8005938 <tcp_slowtmr>
  }
}
 80052f4:	bf00      	nop
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	200000cd 	.word	0x200000cd

080052fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e00a      	b.n	8005322 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d102      	bne.n	800531c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f1      	bne.n	800530c <tcp_remove_listener+0x10>
      }
   }
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <tcp_listen_closed+0x1a>
 8005342:	4b13      	ldr	r3, [pc, #76]	; (8005390 <tcp_listen_closed+0x5c>)
 8005344:	22c0      	movs	r2, #192	; 0xc0
 8005346:	4913      	ldr	r1, [pc, #76]	; (8005394 <tcp_listen_closed+0x60>)
 8005348:	4813      	ldr	r0, [pc, #76]	; (8005398 <tcp_listen_closed+0x64>)
 800534a:	f009 f8cd 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7d1b      	ldrb	r3, [r3, #20]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d005      	beq.n	8005362 <tcp_listen_closed+0x2e>
 8005356:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <tcp_listen_closed+0x5c>)
 8005358:	22c1      	movs	r2, #193	; 0xc1
 800535a:	4910      	ldr	r1, [pc, #64]	; (800539c <tcp_listen_closed+0x68>)
 800535c:	480e      	ldr	r0, [pc, #56]	; (8005398 <tcp_listen_closed+0x64>)
 800535e:	f009 f8c3 	bl	800e4e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005362:	2301      	movs	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e00b      	b.n	8005380 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <tcp_listen_closed+0x6c>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff ffc1 	bl	80052fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3301      	adds	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d9f0      	bls.n	8005368 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	0800fc74 	.word	0x0800fc74
 8005394:	0800fca4 	.word	0x0800fca4
 8005398:	0800fcb0 	.word	0x0800fcb0
 800539c:	0800fcd8 	.word	0x0800fcd8
 80053a0:	080115b0 	.word	0x080115b0

080053a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80053a4:	b5b0      	push	{r4, r5, r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d075      	beq.n	80054a2 <tcp_close_shutdown+0xfe>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7d1b      	ldrb	r3, [r3, #20]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d003      	beq.n	80053c6 <tcp_close_shutdown+0x22>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7d1b      	ldrb	r3, [r3, #20]
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	d16d      	bne.n	80054a2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <tcp_close_shutdown+0x34>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80053d6:	d064      	beq.n	80054a2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	7e9b      	ldrb	r3, [r3, #26]
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <tcp_close_shutdown+0x4e>
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <tcp_close_shutdown+0x1a8>)
 80053e6:	f240 120f 	movw	r2, #271	; 0x10f
 80053ea:	4959      	ldr	r1, [pc, #356]	; (8005550 <tcp_close_shutdown+0x1ac>)
 80053ec:	4859      	ldr	r0, [pc, #356]	; (8005554 <tcp_close_shutdown+0x1b0>)
 80053ee:	f009 f87b 	bl	800e4e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80053fa:	687c      	ldr	r4, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1d1d      	adds	r5, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8adb      	ldrh	r3, [r3, #22]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	8b12      	ldrh	r2, [r2, #24]
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	462b      	mov	r3, r5
 800540e:	4622      	mov	r2, r4
 8005410:	f004 f862 	bl	80094d8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 ffc5 	bl	80063a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800541a:	4b4f      	ldr	r3, [pc, #316]	; (8005558 <tcp_close_shutdown+0x1b4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d105      	bne.n	8005430 <tcp_close_shutdown+0x8c>
 8005424:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <tcp_close_shutdown+0x1b4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4a4b      	ldr	r2, [pc, #300]	; (8005558 <tcp_close_shutdown+0x1b4>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e013      	b.n	8005458 <tcp_close_shutdown+0xb4>
 8005430:	4b49      	ldr	r3, [pc, #292]	; (8005558 <tcp_close_shutdown+0x1b4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e00c      	b.n	8005452 <tcp_close_shutdown+0xae>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d104      	bne.n	800544c <tcp_close_shutdown+0xa8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e005      	b.n	8005458 <tcp_close_shutdown+0xb4>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ef      	bne.n	8005438 <tcp_close_shutdown+0x94>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	60da      	str	r2, [r3, #12]
 800545e:	4b3f      	ldr	r3, [pc, #252]	; (800555c <tcp_close_shutdown+0x1b8>)
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	2b04      	cmp	r3, #4
 800546a:	d10c      	bne.n	8005486 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	220a      	movs	r2, #10
 8005470:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <tcp_close_shutdown+0x1bc>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	4a39      	ldr	r2, [pc, #228]	; (8005560 <tcp_close_shutdown+0x1bc>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	f004 fa7c 	bl	800997c <tcp_timer_needed>
 8005484:	e00b      	b.n	800549e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <tcp_close_shutdown+0x1c0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d102      	bne.n	8005496 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005490:	f003 faec 	bl	8008a6c <tcp_trigger_input_pcb_close>
 8005494:	e003      	b.n	800549e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	2001      	movs	r0, #1
 800549a:	f7fe ff89 	bl	80043b0 <memp_free>
        }
      }
      return ERR_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	e050      	b.n	8005544 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	7d1b      	ldrb	r3, [r3, #20]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d02e      	beq.n	8005508 <tcp_close_shutdown+0x164>
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d038      	beq.n	8005520 <tcp_close_shutdown+0x17c>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d142      	bne.n	8005538 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8adb      	ldrh	r3, [r3, #22]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d021      	beq.n	80054fe <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80054ba:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <tcp_close_shutdown+0x1c4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d105      	bne.n	80054d0 <tcp_close_shutdown+0x12c>
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <tcp_close_shutdown+0x1c4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	4a27      	ldr	r2, [pc, #156]	; (8005568 <tcp_close_shutdown+0x1c4>)
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e013      	b.n	80054f8 <tcp_close_shutdown+0x154>
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <tcp_close_shutdown+0x1c4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	e00c      	b.n	80054f2 <tcp_close_shutdown+0x14e>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d104      	bne.n	80054ec <tcp_close_shutdown+0x148>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e005      	b.n	80054f8 <tcp_close_shutdown+0x154>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ef      	bne.n	80054d8 <tcp_close_shutdown+0x134>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	2001      	movs	r0, #1
 8005502:	f7fe ff55 	bl	80043b0 <memp_free>
    break;
 8005506:	e01c      	b.n	8005542 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff13 	bl	8005334 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4816      	ldr	r0, [pc, #88]	; (800556c <tcp_close_shutdown+0x1c8>)
 8005512:	f000 ff89 	bl	8006428 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	2002      	movs	r0, #2
 800551a:	f7fe ff49 	bl	80043b0 <memp_free>
    break;
 800551e:	e010      	b.n	8005542 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	480d      	ldr	r0, [pc, #52]	; (8005558 <tcp_close_shutdown+0x1b4>)
 8005524:	f000 ff80 	bl	8006428 <tcp_pcb_remove>
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <tcp_close_shutdown+0x1b8>)
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	2001      	movs	r0, #1
 8005532:	f7fe ff3d 	bl	80043b0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005536:	e004      	b.n	8005542 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f819 	bl	8005570 <tcp_close_shutdown_fin>
 800553e:	4603      	mov	r3, r0
 8005540:	e000      	b.n	8005544 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bdb0      	pop	{r4, r5, r7, pc}
 800554c:	0800fc74 	.word	0x0800fc74
 8005550:	0800fcf0 	.word	0x0800fcf0
 8005554:	0800fcb0 	.word	0x0800fcb0
 8005558:	20006998 	.word	0x20006998
 800555c:	20006994 	.word	0x20006994
 8005560:	200069a8 	.word	0x200069a8
 8005564:	200069ac 	.word	0x200069ac
 8005568:	200069a4 	.word	0x200069a4
 800556c:	200069a0 	.word	0x200069a0

08005570 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <tcp_close_shutdown_fin+0x1c>
 800557e:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <tcp_close_shutdown_fin+0xc0>)
 8005580:	f240 124d 	movw	r2, #333	; 0x14d
 8005584:	492b      	ldr	r1, [pc, #172]	; (8005634 <tcp_close_shutdown_fin+0xc4>)
 8005586:	482c      	ldr	r0, [pc, #176]	; (8005638 <tcp_close_shutdown_fin+0xc8>)
 8005588:	f008 ffae 	bl	800e4e8 <iprintf>

  switch (pcb->state) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7d1b      	ldrb	r3, [r3, #20]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d010      	beq.n	80055b6 <tcp_close_shutdown_fin+0x46>
 8005594:	2b07      	cmp	r3, #7
 8005596:	d01b      	beq.n	80055d0 <tcp_close_shutdown_fin+0x60>
 8005598:	2b03      	cmp	r3, #3
 800559a:	d126      	bne.n	80055ea <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f003 faf1 	bl	8008b84 <tcp_send_fin>
 80055a2:	4603      	mov	r3, r0
 80055a4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11f      	bne.n	80055ee <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2205      	movs	r2, #5
 80055b2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055b4:	e01b      	b.n	80055ee <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f003 fae4 	bl	8008b84 <tcp_send_fin>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d114      	bne.n	80055f2 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2205      	movs	r2, #5
 80055cc:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055ce:	e010      	b.n	80055f2 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f003 fad7 	bl	8008b84 <tcp_send_fin>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80055da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2209      	movs	r2, #9
 80055e6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80055e8:	e005      	b.n	80055f6 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e01c      	b.n	8005628 <tcp_close_shutdown_fin+0xb8>
    break;
 80055ee:	bf00      	nop
 80055f0:	e002      	b.n	80055f8 <tcp_close_shutdown_fin+0x88>
    break;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <tcp_close_shutdown_fin+0x88>
    break;
 80055f6:	bf00      	nop
  }

  if (err == ERR_OK) {
 80055f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f003 fcdf 	bl	8008fc4 <tcp_output>
 8005606:	e00d      	b.n	8005624 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005610:	d108      	bne.n	8005624 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7e9b      	ldrb	r3, [r3, #26]
 8005616:	f043 0308 	orr.w	r3, r3, #8
 800561a:	b2da      	uxtb	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e001      	b.n	8005628 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	0800fc74 	.word	0x0800fc74
 8005634:	0800fca4 	.word	0x0800fca4
 8005638:	0800fcb0 	.word	0x0800fcb0

0800563c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7d1b      	ldrb	r3, [r3, #20]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d006      	beq.n	800565a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	7e9b      	ldrb	r3, [r3, #26]
 8005650:	f043 0310 	orr.w	r3, r3, #16
 8005654:	b2da      	uxtb	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800565a:	2101      	movs	r1, #1
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff fea1 	bl	80053a4 <tcp_close_shutdown>
 8005662:	4603      	mov	r3, r0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	; 0x30
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	7d1b      	ldrb	r3, [r3, #20]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d106      	bne.n	800568c <tcp_abandon+0x20>
 800567e:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <tcp_abandon+0x148>)
 8005680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005684:	494c      	ldr	r1, [pc, #304]	; (80057b8 <tcp_abandon+0x14c>)
 8005686:	484d      	ldr	r0, [pc, #308]	; (80057bc <tcp_abandon+0x150>)
 8005688:	f008 ff2e 	bl	800e4e8 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7d1b      	ldrb	r3, [r3, #20]
 8005690:	2b0a      	cmp	r3, #10
 8005692:	d108      	bne.n	80056a6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	484a      	ldr	r0, [pc, #296]	; (80057c0 <tcp_abandon+0x154>)
 8005698:	f000 fec6 	bl	8006428 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	2001      	movs	r0, #1
 80056a0:	f7fe fe86 	bl	80043b0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80056a4:	e081      	b.n	80057aa <tcp_abandon+0x13e>
    int send_rst = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7d1b      	ldrb	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d126      	bne.n	800571e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8adb      	ldrh	r3, [r3, #22]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02e      	beq.n	8005736 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80056d8:	4b3a      	ldr	r3, [pc, #232]	; (80057c4 <tcp_abandon+0x158>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d105      	bne.n	80056ee <tcp_abandon+0x82>
 80056e2:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <tcp_abandon+0x158>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	4a36      	ldr	r2, [pc, #216]	; (80057c4 <tcp_abandon+0x158>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	e013      	b.n	8005716 <tcp_abandon+0xaa>
 80056ee:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <tcp_abandon+0x158>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	e00c      	b.n	8005710 <tcp_abandon+0xa4>
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <tcp_abandon+0x9e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e005      	b.n	8005716 <tcp_abandon+0xaa>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ef      	bne.n	80056f6 <tcp_abandon+0x8a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	60da      	str	r2, [r3, #12]
 800571c:	e00b      	b.n	8005736 <tcp_abandon+0xca>
      send_rst = reset;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8adb      	ldrh	r3, [r3, #22]
 8005726:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4827      	ldr	r0, [pc, #156]	; (80057c8 <tcp_abandon+0x15c>)
 800572c:	f000 fe7c 	bl	8006428 <tcp_pcb_remove>
 8005730:	4b26      	ldr	r3, [pc, #152]	; (80057cc <tcp_abandon+0x160>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc85 	bl	8006052 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fc7c 	bl	8006052 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fc73 	bl	8006052 <tcp_segs_free>
    if (send_rst) {
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	1d19      	adds	r1, r3, #4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8b1b      	ldrh	r3, [r3, #24]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	460b      	mov	r3, r1
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	69b8      	ldr	r0, [r7, #24]
 8005788:	f003 fea6 	bl	80094d8 <tcp_rst>
    last_state = pcb->state;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	7d1b      	ldrb	r3, [r3, #20]
 8005790:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	2001      	movs	r0, #1
 8005796:	f7fe fe0b 	bl	80043b0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <tcp_abandon+0x13e>
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f06f 010c 	mvn.w	r1, #12
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	4798      	blx	r3
}
 80057aa:	bf00      	nop
 80057ac:	3728      	adds	r7, #40	; 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	0800fc74 	.word	0x0800fc74
 80057b8:	0800fd0c 	.word	0x0800fd0c
 80057bc:	0800fcb0 	.word	0x0800fcb0
 80057c0:	200069a8 	.word	0x200069a8
 80057c4:	200069a4 	.word	0x200069a4
 80057c8:	20006998 	.word	0x20006998
 80057cc:	20006994 	.word	0x20006994

080057d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80057d8:	2101      	movs	r1, #1
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7ff ff46 	bl	800566c <tcp_abandon>
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80057f8:	4413      	add	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005804:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005808:	bf28      	it	cs
 800580a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800580e:	b292      	uxth	r2, r2
 8005810:	4413      	add	r3, r2
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	db08      	blt.n	800582c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	e020      	b.n	800586e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	dd03      	ble.n	8005842 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005840:	e014      	b.n	800586c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005854:	d306      	bcc.n	8005864 <tcp_update_rcv_ann_wnd+0x7c>
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <tcp_update_rcv_ann_wnd+0x90>)
 8005858:	f44f 7242 	mov.w	r2, #776	; 0x308
 800585c:	4907      	ldr	r1, [pc, #28]	; (800587c <tcp_update_rcv_ann_wnd+0x94>)
 800585e:	4808      	ldr	r0, [pc, #32]	; (8005880 <tcp_update_rcv_ann_wnd+0x98>)
 8005860:	f008 fe42 	bl	800e4e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800586c:	2300      	movs	r3, #0
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	0800fc74 	.word	0x0800fc74
 800587c:	0800fd8c 	.word	0x0800fd8c
 8005880:	0800fcb0 	.word	0x0800fcb0

08005884 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	7d1b      	ldrb	r3, [r3, #20]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <tcp_recved+0x22>
 8005898:	4b23      	ldr	r3, [pc, #140]	; (8005928 <tcp_recved+0xa4>)
 800589a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800589e:	4923      	ldr	r1, [pc, #140]	; (800592c <tcp_recved+0xa8>)
 80058a0:	4823      	ldr	r0, [pc, #140]	; (8005930 <tcp_recved+0xac>)
 80058a2:	f008 fe21 	bl	800e4e8 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	4413      	add	r3, r2
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80058bc:	d904      	bls.n	80058c8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80058c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80058c6:	e017      	b.n	80058f8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d113      	bne.n	80058f8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7d1b      	ldrb	r3, [r3, #20]
 80058d4:	2b07      	cmp	r3, #7
 80058d6:	d003      	beq.n	80058e0 <tcp_recved+0x5c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7d1b      	ldrb	r3, [r3, #20]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d104      	bne.n	80058ea <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80058e8:	e006      	b.n	80058f8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <tcp_recved+0xa4>)
 80058ec:	f240 322d 	movw	r2, #813	; 0x32d
 80058f0:	4910      	ldr	r1, [pc, #64]	; (8005934 <tcp_recved+0xb0>)
 80058f2:	480f      	ldr	r0, [pc, #60]	; (8005930 <tcp_recved+0xac>)
 80058f4:	f008 fdf8 	bl	800e4e8 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7ff ff75 	bl	80057e8 <tcp_update_rcv_ann_wnd>
 80058fe:	4603      	mov	r3, r0
 8005900:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005908:	db09      	blt.n	800591e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	7e9b      	ldrb	r3, [r3, #26]
 800590e:	f043 0302 	orr.w	r3, r3, #2
 8005912:	b2da      	uxtb	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f003 fb53 	bl	8008fc4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	0800fc74 	.word	0x0800fc74
 800592c:	0800fda8 	.word	0x0800fda8
 8005930:	0800fcb0 	.word	0x0800fcb0
 8005934:	0800fdd0 	.word	0x0800fdd0

08005938 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8005942:	4b96      	ldr	r3, [pc, #600]	; (8005b9c <tcp_slowtmr+0x264>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	4a94      	ldr	r2, [pc, #592]	; (8005b9c <tcp_slowtmr+0x264>)
 800594a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800594c:	4b94      	ldr	r3, [pc, #592]	; (8005ba0 <tcp_slowtmr+0x268>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	4b92      	ldr	r3, [pc, #584]	; (8005ba0 <tcp_slowtmr+0x268>)
 8005956:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800595c:	4b91      	ldr	r3, [pc, #580]	; (8005ba4 <tcp_slowtmr+0x26c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005962:	e227      	b.n	8005db4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	7d1b      	ldrb	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <tcp_slowtmr+0x42>
 800596c:	4b8e      	ldr	r3, [pc, #568]	; (8005ba8 <tcp_slowtmr+0x270>)
 800596e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005972:	498e      	ldr	r1, [pc, #568]	; (8005bac <tcp_slowtmr+0x274>)
 8005974:	488e      	ldr	r0, [pc, #568]	; (8005bb0 <tcp_slowtmr+0x278>)
 8005976:	f008 fdb7 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	7d1b      	ldrb	r3, [r3, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d106      	bne.n	8005990 <tcp_slowtmr+0x58>
 8005982:	4b89      	ldr	r3, [pc, #548]	; (8005ba8 <tcp_slowtmr+0x270>)
 8005984:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005988:	498a      	ldr	r1, [pc, #552]	; (8005bb4 <tcp_slowtmr+0x27c>)
 800598a:	4889      	ldr	r0, [pc, #548]	; (8005bb0 <tcp_slowtmr+0x278>)
 800598c:	f008 fdac 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	7d1b      	ldrb	r3, [r3, #20]
 8005994:	2b0a      	cmp	r3, #10
 8005996:	d106      	bne.n	80059a6 <tcp_slowtmr+0x6e>
 8005998:	4b83      	ldr	r3, [pc, #524]	; (8005ba8 <tcp_slowtmr+0x270>)
 800599a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800599e:	4986      	ldr	r1, [pc, #536]	; (8005bb8 <tcp_slowtmr+0x280>)
 80059a0:	4883      	ldr	r0, [pc, #524]	; (8005bb0 <tcp_slowtmr+0x278>)
 80059a2:	f008 fda1 	bl	800e4e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	7f5a      	ldrb	r2, [r3, #29]
 80059aa:	4b7d      	ldr	r3, [pc, #500]	; (8005ba0 <tcp_slowtmr+0x268>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d103      	bne.n	80059ba <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80059b8:	e1fc      	b.n	8005db4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80059ba:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <tcp_slowtmr+0x268>)
 80059bc:	781a      	ldrb	r2, [r3, #0]
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	7d1b      	ldrb	r3, [r3, #20]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d108      	bne.n	80059e4 <tcp_slowtmr+0xac>
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d903      	bls.n	80059e4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	3301      	adds	r3, #1
 80059e0:	77fb      	strb	r3, [r7, #31]
 80059e2:	e0a2      	b.n	8005b2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d903      	bls.n	80059f6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80059ee:	7ffb      	ldrb	r3, [r7, #31]
 80059f0:	3301      	adds	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e099      	b.n	8005b2a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d032      	beq.n	8005a66 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a6c      	ldr	r2, [pc, #432]	; (8005bbc <tcp_slowtmr+0x284>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005a14:	7cfa      	ldrb	r2, [r7, #19]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d907      	bls.n	8005a2a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005a20:	3301      	adds	r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005a30:	7cfa      	ldrb	r2, [r7, #19]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d879      	bhi.n	8005b2a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005a36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a38:	f003 fee0 	bl	80097fc <tcp_zero_window_probe>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d173      	bne.n	8005b2a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d86a      	bhi.n	8005b2a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005a64:	e061      	b.n	8005b2a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	db08      	blt.n	8005a82 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	b21a      	sxth	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d04f      	beq.n	8005b2a <tcp_slowtmr+0x1f2>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005a96:	429a      	cmp	r2, r3
 8005a98:	db47      	blt.n	8005b2a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	7d1b      	ldrb	r3, [r3, #20]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d018      	beq.n	8005ad4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005aa8:	2b0c      	cmp	r3, #12
 8005aaa:	bf28      	it	cs
 8005aac:	230c      	movcs	r3, #12
 8005aae:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005ab6:	10db      	asrs	r3, r3, #3
 8005ab8:	b21b      	sxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005ac2:	4413      	add	r3, r2
 8005ac4:	7dfa      	ldrb	r2, [r7, #23]
 8005ac6:	493e      	ldr	r1, [pc, #248]	; (8005bc0 <tcp_slowtmr+0x288>)
 8005ac8:	5c8a      	ldrb	r2, [r1, r2]
 8005aca:	4093      	lsls	r3, r2
 8005acc:	b21a      	sxth	r2, r3
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bf28      	it	cs
 8005aea:	4613      	movcs	r3, r2
 8005aec:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005aee:	8abb      	ldrh	r3, [r7, #20]
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d206      	bcs.n	8005b1a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b26:	f003 fd4d 	bl	80095c4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	7d1b      	ldrb	r3, [r3, #20]
 8005b2e:	2b06      	cmp	r3, #6
 8005b30:	d10f      	bne.n	8005b52 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	7e9b      	ldrb	r3, [r3, #26]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <tcp_slowtmr+0x264>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b28      	cmp	r3, #40	; 0x28
 8005b4a:	d902      	bls.n	8005b52 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005b4c:	7ffb      	ldrb	r3, [r7, #31]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	7a1b      	ldrb	r3, [r3, #8]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d05d      	beq.n	8005c1a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d003      	beq.n	8005b6e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	d155      	bne.n	8005c1a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <tcp_slowtmr+0x264>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <tcp_slowtmr+0x28c>)
 8005b80:	440b      	add	r3, r1
 8005b82:	4911      	ldr	r1, [pc, #68]	; (8005bc8 <tcp_slowtmr+0x290>)
 8005b84:	fba1 1303 	umull	r1, r3, r1, r3
 8005b88:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d91e      	bls.n	8005bcc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005b8e:	7ffb      	ldrb	r3, [r7, #31]
 8005b90:	3301      	adds	r3, #1
 8005b92:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005b94:	7fbb      	ldrb	r3, [r7, #30]
 8005b96:	3301      	adds	r3, #1
 8005b98:	77bb      	strb	r3, [r7, #30]
 8005b9a:	e03e      	b.n	8005c1a <tcp_slowtmr+0x2e2>
 8005b9c:	2000699c 	.word	0x2000699c
 8005ba0:	200000ce 	.word	0x200000ce
 8005ba4:	20006998 	.word	0x20006998
 8005ba8:	0800fc74 	.word	0x0800fc74
 8005bac:	0800fe24 	.word	0x0800fe24
 8005bb0:	0800fcb0 	.word	0x0800fcb0
 8005bb4:	0800fe50 	.word	0x0800fe50
 8005bb8:	0800fe7c 	.word	0x0800fe7c
 8005bbc:	080115a8 	.word	0x080115a8
 8005bc0:	08011598 	.word	0x08011598
 8005bc4:	000a4cb8 	.word	0x000a4cb8
 8005bc8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005bcc:	4b97      	ldr	r3, [pc, #604]	; (8005e2c <tcp_slowtmr+0x4f4>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005be2:	4618      	mov	r0, r3
 8005be4:	4b92      	ldr	r3, [pc, #584]	; (8005e30 <tcp_slowtmr+0x4f8>)
 8005be6:	fb03 f300 	mul.w	r3, r3, r0
 8005bea:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005bec:	4991      	ldr	r1, [pc, #580]	; (8005e34 <tcp_slowtmr+0x4fc>)
 8005bee:	fba1 1303 	umull	r1, r3, r1, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d910      	bls.n	8005c1a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8005bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bfa:	f003 fdc2 	bl	8009782 <tcp_keepalive>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005c02:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d107      	bne.n	8005c1a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005c10:	3301      	adds	r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d016      	beq.n	8005c50 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005c22:	4b82      	ldr	r3, [pc, #520]	; (8005e2c <tcp_slowtmr+0x4f4>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005c32:	4619      	mov	r1, r3
 8005c34:	460b      	mov	r3, r1
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	440b      	add	r3, r1
 8005c3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d307      	bcc.n	8005c50 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fa04 	bl	8006052 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	7d1b      	ldrb	r3, [r3, #20]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d109      	bne.n	8005c6c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c58:	4b74      	ldr	r3, [pc, #464]	; (8005e2c <tcp_slowtmr+0x4f4>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b28      	cmp	r3, #40	; 0x28
 8005c64:	d902      	bls.n	8005c6c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005c66:	7ffb      	ldrb	r3, [r7, #31]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	7d1b      	ldrb	r3, [r3, #20]
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	d109      	bne.n	8005c88 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005c74:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <tcp_slowtmr+0x4f4>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2bf0      	cmp	r3, #240	; 0xf0
 8005c80:	d902      	bls.n	8005c88 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005c82:	7ffb      	ldrb	r3, [r7, #31]
 8005c84:	3301      	adds	r3, #1
 8005c86:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005c88:	7ffb      	ldrb	r3, [r7, #31]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d05d      	beq.n	8005d4a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c94:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c98:	f000 fb84 	bl	80063a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d010      	beq.n	8005cc4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005ca2:	4b65      	ldr	r3, [pc, #404]	; (8005e38 <tcp_slowtmr+0x500>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d106      	bne.n	8005cba <tcp_slowtmr+0x382>
 8005cac:	4b63      	ldr	r3, [pc, #396]	; (8005e3c <tcp_slowtmr+0x504>)
 8005cae:	f240 4289 	movw	r2, #1161	; 0x489
 8005cb2:	4963      	ldr	r1, [pc, #396]	; (8005e40 <tcp_slowtmr+0x508>)
 8005cb4:	4863      	ldr	r0, [pc, #396]	; (8005e44 <tcp_slowtmr+0x50c>)
 8005cb6:	f008 fc17 	bl	800e4e8 <iprintf>
        prev->next = pcb->next;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	e00f      	b.n	8005ce4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005cc4:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <tcp_slowtmr+0x500>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d006      	beq.n	8005cdc <tcp_slowtmr+0x3a4>
 8005cce:	4b5b      	ldr	r3, [pc, #364]	; (8005e3c <tcp_slowtmr+0x504>)
 8005cd0:	f240 428d 	movw	r2, #1165	; 0x48d
 8005cd4:	495c      	ldr	r1, [pc, #368]	; (8005e48 <tcp_slowtmr+0x510>)
 8005cd6:	485b      	ldr	r0, [pc, #364]	; (8005e44 <tcp_slowtmr+0x50c>)
 8005cd8:	f008 fc06 	bl	800e4e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	4a55      	ldr	r2, [pc, #340]	; (8005e38 <tcp_slowtmr+0x500>)
 8005ce2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005ce4:	7fbb      	ldrb	r3, [r7, #30]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d010      	beq.n	8005d0c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cf2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1d1d      	adds	r5, r3, #4
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	8adb      	ldrh	r3, [r3, #22]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	8b12      	ldrh	r2, [r2, #24]
 8005d00:	9201      	str	r2, [sp, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	462b      	mov	r3, r5
 8005d06:	4622      	mov	r2, r4
 8005d08:	f003 fbe6 	bl	80094d8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	7d1b      	ldrb	r3, [r3, #20]
 8005d16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	2001      	movs	r0, #1
 8005d26:	f7fe fb43 	bl	80043b0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8005d2a:	4b48      	ldr	r3, [pc, #288]	; (8005e4c <tcp_slowtmr+0x514>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <tcp_slowtmr+0x408>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f06f 010c 	mvn.w	r1, #12
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005d40:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <tcp_slowtmr+0x514>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d035      	beq.n	8005db4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005d48:	e606      	b.n	8005958 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	7edb      	ldrb	r3, [r3, #27]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	7eda      	ldrb	r2, [r3, #27]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	7f1b      	ldrb	r3, [r3, #28]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d323      	bcc.n	8005db4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005d72:	4b36      	ldr	r3, [pc, #216]	; (8005e4c <tcp_slowtmr+0x514>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <tcp_slowtmr+0x460>
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d88:	6a3a      	ldr	r2, [r7, #32]
 8005d8a:	6912      	ldr	r2, [r2, #16]
 8005d8c:	6a39      	ldr	r1, [r7, #32]
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4798      	blx	r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	777b      	strb	r3, [r7, #29]
 8005d96:	e001      	b.n	8005d9c <tcp_slowtmr+0x464>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005d9c:	4b2b      	ldr	r3, [pc, #172]	; (8005e4c <tcp_slowtmr+0x514>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d000      	beq.n	8005da6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005da4:	e5d8      	b.n	8005958 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005dae:	6a38      	ldr	r0, [r7, #32]
 8005db0:	f003 f908 	bl	8008fc4 <tcp_output>
  while (pcb != NULL) {
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f47f add4 	bne.w	8005964 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005dc0:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <tcp_slowtmr+0x518>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005dc6:	e068      	b.n	8005e9a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	7d1b      	ldrb	r3, [r3, #20]
 8005dcc:	2b0a      	cmp	r3, #10
 8005dce:	d006      	beq.n	8005dde <tcp_slowtmr+0x4a6>
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <tcp_slowtmr+0x504>)
 8005dd2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005dd6:	491f      	ldr	r1, [pc, #124]	; (8005e54 <tcp_slowtmr+0x51c>)
 8005dd8:	481a      	ldr	r0, [pc, #104]	; (8005e44 <tcp_slowtmr+0x50c>)
 8005dda:	f008 fb85 	bl	800e4e8 <iprintf>
    pcb_remove = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <tcp_slowtmr+0x4f4>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2bf0      	cmp	r3, #240	; 0xf0
 8005dee:	d902      	bls.n	8005df6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005df0:	7ffb      	ldrb	r3, [r7, #31]
 8005df2:	3301      	adds	r3, #1
 8005df4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005df6:	7ffb      	ldrb	r3, [r7, #31]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d049      	beq.n	8005e90 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dfe:	f000 fad1 	bl	80063a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d029      	beq.n	8005e5c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005e08:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <tcp_slowtmr+0x518>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d106      	bne.n	8005e20 <tcp_slowtmr+0x4e8>
 8005e12:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <tcp_slowtmr+0x504>)
 8005e14:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005e18:	490f      	ldr	r1, [pc, #60]	; (8005e58 <tcp_slowtmr+0x520>)
 8005e1a:	480a      	ldr	r0, [pc, #40]	; (8005e44 <tcp_slowtmr+0x50c>)
 8005e1c:	f008 fb64 	bl	800e4e8 <iprintf>
        prev->next = pcb->next;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	e028      	b.n	8005e7c <tcp_slowtmr+0x544>
 8005e2a:	bf00      	nop
 8005e2c:	2000699c 	.word	0x2000699c
 8005e30:	000124f8 	.word	0x000124f8
 8005e34:	10624dd3 	.word	0x10624dd3
 8005e38:	20006998 	.word	0x20006998
 8005e3c:	0800fc74 	.word	0x0800fc74
 8005e40:	0800feac 	.word	0x0800feac
 8005e44:	0800fcb0 	.word	0x0800fcb0
 8005e48:	0800fed8 	.word	0x0800fed8
 8005e4c:	20006994 	.word	0x20006994
 8005e50:	200069a8 	.word	0x200069a8
 8005e54:	0800ff04 	.word	0x0800ff04
 8005e58:	0800ff34 	.word	0x0800ff34
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005e5c:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <tcp_slowtmr+0x570>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d006      	beq.n	8005e74 <tcp_slowtmr+0x53c>
 8005e66:	4b11      	ldr	r3, [pc, #68]	; (8005eac <tcp_slowtmr+0x574>)
 8005e68:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005e6c:	4910      	ldr	r1, [pc, #64]	; (8005eb0 <tcp_slowtmr+0x578>)
 8005e6e:	4811      	ldr	r0, [pc, #68]	; (8005eb4 <tcp_slowtmr+0x57c>)
 8005e70:	f008 fb3a 	bl	800e4e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a0b      	ldr	r2, [pc, #44]	; (8005ea8 <tcp_slowtmr+0x570>)
 8005e7a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	2001      	movs	r0, #1
 8005e8a:	f7fe fa91 	bl	80043b0 <memp_free>
 8005e8e:	e004      	b.n	8005e9a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d193      	bne.n	8005dc8 <tcp_slowtmr+0x490>
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea8:	200069a8 	.word	0x200069a8
 8005eac:	0800fc74 	.word	0x0800fc74
 8005eb0:	0800ff5c 	.word	0x0800ff5c
 8005eb4:	0800fcb0 	.word	0x0800fcb0

08005eb8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005ebe:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <tcp_fasttmr+0xbc>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <tcp_fasttmr+0xbc>)
 8005ec8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <tcp_fasttmr+0xc0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005ed0:	e048      	b.n	8005f64 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7f5a      	ldrb	r2, [r3, #29]
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <tcp_fasttmr+0xbc>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d03f      	beq.n	8005f5e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <tcp_fasttmr+0xbc>)
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7e9b      	ldrb	r3, [r3, #26]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d010      	beq.n	8005f14 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7e9b      	ldrb	r3, [r3, #26]
 8005ef6:	f043 0302 	orr.w	r3, r3, #2
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f003 f85f 	bl	8008fc4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7e9b      	ldrb	r3, [r3, #26]
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7e9b      	ldrb	r3, [r3, #26]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7e9b      	ldrb	r3, [r3, #26]
 8005f24:	f023 0308 	bic.w	r3, r3, #8
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fb1e 	bl	8005570 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <tcp_fasttmr+0xc4>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f819 	bl	8005f80 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <tcp_fasttmr+0xc4>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d000      	beq.n	8005f58 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005f56:	e7b8      	b.n	8005eca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	e002      	b.n	8005f64 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1b3      	bne.n	8005ed2 <tcp_fasttmr+0x1a>
    }
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200000ce 	.word	0x200000ce
 8005f78:	20006998 	.word	0x20006998
 8005f7c:	20006994 	.word	0x20006994

08005f80 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8c:	7b5b      	ldrb	r3, [r3, #13]
 8005f8e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <tcp_process_refused_data+0x3e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6918      	ldr	r0, [r3, #16]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	47a0      	blx	r4
 8005fb8:	4603      	mov	r3, r0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e007      	b.n	8005fce <tcp_process_refused_data+0x4e>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	f000 f88c 	bl	80060e2 <tcp_recv_null>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d12a      	bne.n	800602c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d033      	beq.n	8006048 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005fe8:	d005      	beq.n	8005ff6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00b      	beq.n	8006018 <tcp_process_refused_data+0x98>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6918      	ldr	r0, [r3, #16]
 800600a:	2300      	movs	r3, #0
 800600c:	2200      	movs	r2, #0
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	47a0      	blx	r4
 8006012:	4603      	mov	r3, r0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e001      	b.n	800601c <tcp_process_refused_data+0x9c>
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	f113 0f0d 	cmn.w	r3, #13
 8006024:	d110      	bne.n	8006048 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006026:	f06f 030c 	mvn.w	r3, #12
 800602a:	e00e      	b.n	800604a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800602c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006030:	f113 0f0d 	cmn.w	r3, #13
 8006034:	d102      	bne.n	800603c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006036:	f06f 030c 	mvn.w	r3, #12
 800603a:	e006      	b.n	800604a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8006042:	f06f 0304 	mvn.w	r3, #4
 8006046:	e000      	b.n	800604a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	bd90      	pop	{r4, r7, pc}

08006052 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800605a:	e007      	b.n	800606c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f809 	bl	800607a <tcp_seg_free>
    seg = next;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f4      	bne.n	800605c <tcp_segs_free+0xa>
  }
}
 8006072:	bf00      	nop
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fe99 	bl	8004dcc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	2003      	movs	r0, #3
 800609e:	f7fe f987 	bl	80043b0 <memp_free>
  }
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80060b2:	2003      	movs	r0, #3
 80060b4:	f7fe f930 	bl	8004318 <memp_malloc>
 80060b8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <tcp_seg_copy+0x1a>
    return NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e00a      	b.n	80060da <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80060c4:	2210      	movs	r2, #16
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f008 f9fa 	bl	800e4c2 <memcpy>
  pbuf_ref(cseg->p);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe ff26 	bl	8004f24 <pbuf_ref>
  return cseg;
 80060d8:	68fb      	ldr	r3, [r7, #12]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	891b      	ldrh	r3, [r3, #8]
 80060fa:	4619      	mov	r1, r3
 80060fc:	68b8      	ldr	r0, [r7, #8]
 80060fe:	f7ff fbc1 	bl	8005884 <tcp_recved>
    pbuf_free(p);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fe fe62 	bl	8004dcc <pbuf_free>
 8006108:	e008      	b.n	800611c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800610a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006112:	68b8      	ldr	r0, [r7, #8]
 8006114:	f7ff fa92 	bl	800563c <tcp_close>
 8006118:	4603      	mov	r3, r0
 800611a:	e000      	b.n	800611e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	db01      	blt.n	800613e <tcp_kill_prio+0x16>
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	e000      	b.n	8006140 <tcp_kill_prio+0x18>
 800613e:	237f      	movs	r3, #127	; 0x7f
 8006140:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <tcp_kill_prio+0x7c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e01a      	b.n	8006188 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	7d5b      	ldrb	r3, [r3, #21]
 8006156:	7afa      	ldrb	r2, [r7, #11]
 8006158:	429a      	cmp	r2, r3
 800615a:	d312      	bcc.n	8006182 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <tcp_kill_prio+0x80>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d80a      	bhi.n	8006182 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <tcp_kill_prio+0x80>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	7d5b      	ldrb	r3, [r3, #21]
 8006180:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e1      	bne.n	8006152 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006194:	6938      	ldr	r0, [r7, #16]
 8006196:	f7ff fb1b 	bl	80057d0 <tcp_abort>
  }
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20006998 	.word	0x20006998
 80061a8:	2000699c 	.word	0x2000699c

080061ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80061b6:	79fb      	ldrb	r3, [r7, #7]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d009      	beq.n	80061d0 <tcp_kill_state+0x24>
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	2b09      	cmp	r3, #9
 80061c0:	d006      	beq.n	80061d0 <tcp_kill_state+0x24>
 80061c2:	4b1a      	ldr	r3, [pc, #104]	; (800622c <tcp_kill_state+0x80>)
 80061c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80061c8:	4919      	ldr	r1, [pc, #100]	; (8006230 <tcp_kill_state+0x84>)
 80061ca:	481a      	ldr	r0, [pc, #104]	; (8006234 <tcp_kill_state+0x88>)
 80061cc:	f008 f98c 	bl	800e4e8 <iprintf>

  inactivity = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80061d8:	4b17      	ldr	r3, [pc, #92]	; (8006238 <tcp_kill_state+0x8c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	e017      	b.n	8006210 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	7d1b      	ldrb	r3, [r3, #20]
 80061e4:	79fa      	ldrb	r2, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d10f      	bne.n	800620a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <tcp_kill_state+0x90>)
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d807      	bhi.n	800620a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <tcp_kill_state+0x90>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e4      	bne.n	80061e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800621c:	2100      	movs	r1, #0
 800621e:	6938      	ldr	r0, [r7, #16]
 8006220:	f7ff fa24 	bl	800566c <tcp_abandon>
  }
}
 8006224:	bf00      	nop
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	0800fc74 	.word	0x0800fc74
 8006230:	0800ff84 	.word	0x0800ff84
 8006234:	0800fcb0 	.word	0x0800fcb0
 8006238:	20006998 	.word	0x20006998
 800623c:	2000699c 	.word	0x2000699c

08006240 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <tcp_kill_timewait+0x58>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e012      	b.n	800627c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <tcp_kill_timewait+0x5c>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d807      	bhi.n	8006276 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <tcp_kill_timewait+0x5c>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e9      	bne.n	8006256 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f7ff faa1 	bl	80057d0 <tcp_abort>
  }
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	200069a8 	.word	0x200069a8
 800629c:	2000699c 	.word	0x2000699c

080062a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80062aa:	2001      	movs	r0, #1
 80062ac:	f7fe f834 	bl	8004318 <memp_malloc>
 80062b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d124      	bne.n	8006302 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80062b8:	f7ff ffc2 	bl	8006240 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fe f82b 	bl	8004318 <memp_malloc>
 80062c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11b      	bne.n	8006302 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80062ca:	2009      	movs	r0, #9
 80062cc:	f7ff ff6e 	bl	80061ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80062d0:	2001      	movs	r0, #1
 80062d2:	f7fe f821 	bl	8004318 <memp_malloc>
 80062d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d111      	bne.n	8006302 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80062de:	2008      	movs	r0, #8
 80062e0:	f7ff ff64 	bl	80061ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80062e4:	2001      	movs	r0, #1
 80062e6:	f7fe f817 	bl	8004318 <memp_malloc>
 80062ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d107      	bne.n	8006302 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff ff17 	bl	8006128 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7fe f80c 	bl	8004318 <memp_malloc>
 8006300:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d03f      	beq.n	8006388 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006308:	2298      	movs	r2, #152	; 0x98
 800630a:	2100      	movs	r1, #0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f008 f8e3 	bl	800e4d8 <memset>
    pcb->prio = prio;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	79fa      	ldrb	r2, [r7, #7]
 8006316:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800631e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006328:	855a      	strh	r2, [r3, #42]	; 0x2a
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	22ff      	movs	r2, #255	; 0xff
 8006336:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800633e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2206      	movs	r2, #6
 8006344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2206      	movs	r2, #6
 800634c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006354:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <tcp_alloc+0xf4>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <tcp_alloc+0xf8>)
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006374:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a08      	ldr	r2, [pc, #32]	; (800639c <tcp_alloc+0xfc>)
 800637c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a07      	ldr	r2, [pc, #28]	; (80063a0 <tcp_alloc+0x100>)
 8006384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2000699c 	.word	0x2000699c
 8006398:	200000ce 	.word	0x200000ce
 800639c:	080060e3 	.word	0x080060e3
 80063a0:	006ddd00 	.word	0x006ddd00

080063a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7d1b      	ldrb	r3, [r3, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d034      	beq.n	800641e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80063b8:	2b0a      	cmp	r3, #10
 80063ba:	d030      	beq.n	800641e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d02c      	beq.n	800641e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fcfb 	bl	8004dcc <pbuf_free>
      pcb->refused_data = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fe36 	bl	8006052 <tcp_segs_free>
    pcb->ooseq = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063f2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fe2a 	bl	8006052 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fe25 	bl	8006052 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	669a      	str	r2, [r3, #104]	; 0x68
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800641e:	bf00      	nop
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d105      	bne.n	8006448 <tcp_pcb_remove+0x20>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e013      	b.n	8006470 <tcp_pcb_remove+0x48>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	e00c      	b.n	800646a <tcp_pcb_remove+0x42>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d104      	bne.n	8006464 <tcp_pcb_remove+0x3c>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e005      	b.n	8006470 <tcp_pcb_remove+0x48>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ef      	bne.n	8006450 <tcp_pcb_remove+0x28>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006476:	6838      	ldr	r0, [r7, #0]
 8006478:	f7ff ff94 	bl	80063a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	7d1b      	ldrb	r3, [r3, #20]
 8006480:	2b0a      	cmp	r3, #10
 8006482:	d013      	beq.n	80064ac <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006488:	2b01      	cmp	r3, #1
 800648a:	d00f      	beq.n	80064ac <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	7e9b      	ldrb	r3, [r3, #26]
 8006490:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	7e9b      	ldrb	r3, [r3, #26]
 800649c:	f043 0302 	orr.w	r3, r3, #2
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80064a6:	6838      	ldr	r0, [r7, #0]
 80064a8:	f002 fd8c 	bl	8008fc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	7d1b      	ldrb	r3, [r3, #20]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d020      	beq.n	80064f6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <tcp_pcb_remove+0xa2>
 80064bc:	4b13      	ldr	r3, [pc, #76]	; (800650c <tcp_pcb_remove+0xe4>)
 80064be:	f240 7253 	movw	r2, #1875	; 0x753
 80064c2:	4913      	ldr	r1, [pc, #76]	; (8006510 <tcp_pcb_remove+0xe8>)
 80064c4:	4813      	ldr	r0, [pc, #76]	; (8006514 <tcp_pcb_remove+0xec>)
 80064c6:	f008 f80f 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <tcp_pcb_remove+0xb8>
 80064d2:	4b0e      	ldr	r3, [pc, #56]	; (800650c <tcp_pcb_remove+0xe4>)
 80064d4:	f240 7254 	movw	r2, #1876	; 0x754
 80064d8:	490f      	ldr	r1, [pc, #60]	; (8006518 <tcp_pcb_remove+0xf0>)
 80064da:	480e      	ldr	r0, [pc, #56]	; (8006514 <tcp_pcb_remove+0xec>)
 80064dc:	f008 f804 	bl	800e4e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d006      	beq.n	80064f6 <tcp_pcb_remove+0xce>
 80064e8:	4b08      	ldr	r3, [pc, #32]	; (800650c <tcp_pcb_remove+0xe4>)
 80064ea:	f240 7256 	movw	r2, #1878	; 0x756
 80064ee:	490b      	ldr	r1, [pc, #44]	; (800651c <tcp_pcb_remove+0xf4>)
 80064f0:	4808      	ldr	r0, [pc, #32]	; (8006514 <tcp_pcb_remove+0xec>)
 80064f2:	f007 fff9 	bl	800e4e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	0800fc74 	.word	0x0800fc74
 8006510:	0801002c 	.word	0x0801002c
 8006514:	0800fcb0 	.word	0x0800fcb0
 8006518:	08010044 	.word	0x08010044
 800651c:	08010060 	.word	0x08010060

08006520 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <tcp_next_iss+0x28>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b07      	ldr	r3, [pc, #28]	; (800654c <tcp_next_iss+0x2c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4413      	add	r3, r2
 8006532:	4a05      	ldr	r2, [pc, #20]	; (8006548 <tcp_next_iss+0x28>)
 8006534:	6013      	str	r3, [r2, #0]
  return iss;
 8006536:	4b04      	ldr	r3, [pc, #16]	; (8006548 <tcp_next_iss+0x28>)
 8006538:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c
 800654c:	2000699c 	.word	0x2000699c

08006550 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800655c:	6838      	ldr	r0, [r7, #0]
 800655e:	f006 fdfb 	bl	800d158 <ip4_route>
 8006562:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	e010      	b.n	8006590 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006572:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006574:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d008      	beq.n	800658e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800657c:	897b      	ldrh	r3, [r7, #10]
 800657e:	3b28      	subs	r3, #40	; 0x28
 8006580:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006582:	893a      	ldrh	r2, [r7, #8]
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	4293      	cmp	r3, r2
 8006588:	bf28      	it	cs
 800658a:	4613      	movcs	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800658e:	88fb      	ldrh	r3, [r7, #6]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80065a6:	e011      	b.n	80065cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d108      	bne.n	80065c6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff f908 	bl	80057d0 <tcp_abort>
      pcb = next;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	e002      	b.n	80065cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1ea      	bne.n	80065a8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d02c      	beq.n	8006646 <tcp_netif_ip_addr_changed+0x6a>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d028      	beq.n	8006646 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <tcp_netif_ip_addr_changed+0x74>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ffcc 	bl	8006598 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <tcp_netif_ip_addr_changed+0x78>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff ffc6 	bl	8006598 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d019      	beq.n	8006646 <tcp_netif_ip_addr_changed+0x6a>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d015      	beq.n	8006646 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <tcp_netif_ip_addr_changed+0x7c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e00e      	b.n	8006640 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d103      	bne.n	800663c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ed      	bne.n	8006622 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20006998 	.word	0x20006998
 8006654:	200069a4 	.word	0x200069a4
 8006658:	200069a0 	.word	0x200069a0

0800665c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b08b      	sub	sp, #44	; 0x2c
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4a82      	ldr	r2, [pc, #520]	; (8006874 <tcp_input+0x218>)
 800666c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	895b      	ldrh	r3, [r3, #10]
 8006672:	2b13      	cmp	r3, #19
 8006674:	f240 838a 	bls.w	8006d8c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006678:	4b7f      	ldr	r3, [pc, #508]	; (8006878 <tcp_input+0x21c>)
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	4b7e      	ldr	r3, [pc, #504]	; (8006878 <tcp_input+0x21c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f007 f800 	bl	800d688 <ip4_addr_isbroadcast_u32>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 8380 	bne.w	8006d90 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006690:	4b79      	ldr	r3, [pc, #484]	; (8006878 <tcp_input+0x21c>)
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006698:	2be0      	cmp	r3, #224	; 0xe0
 800669a:	f000 8379 	beq.w	8006d90 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800669e:	4b75      	ldr	r3, [pc, #468]	; (8006874 <tcp_input+0x218>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	899b      	ldrh	r3, [r3, #12]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fd fa87 	bl	8003bba <lwip_htons>
 80066ac:	4603      	mov	r3, r0
 80066ae:	0b1b      	lsrs	r3, r3, #12
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80066b8:	7cbb      	ldrb	r3, [r7, #18]
 80066ba:	2b13      	cmp	r3, #19
 80066bc:	f240 8368 	bls.w	8006d90 <tcp_input+0x734>
 80066c0:	7cbb      	ldrb	r3, [r7, #18]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	891b      	ldrh	r3, [r3, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	f200 8361 	bhi.w	8006d90 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80066ce:	7cbb      	ldrb	r3, [r7, #18]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b14      	subs	r3, #20
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	4b69      	ldr	r3, [pc, #420]	; (800687c <tcp_input+0x220>)
 80066d8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80066da:	4b69      	ldr	r3, [pc, #420]	; (8006880 <tcp_input+0x224>)
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	895a      	ldrh	r2, [r3, #10]
 80066e4:	7cbb      	ldrb	r3, [r7, #18]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d30d      	bcc.n	8006708 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80066ec:	4b63      	ldr	r3, [pc, #396]	; (800687c <tcp_input+0x220>)
 80066ee:	881a      	ldrh	r2, [r3, #0]
 80066f0:	4b64      	ldr	r3, [pc, #400]	; (8006884 <tcp_input+0x228>)
 80066f2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80066f4:	7cbb      	ldrb	r3, [r7, #18]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	425b      	negs	r3, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7fe fb3f 	bl	8004d84 <pbuf_header>
 8006706:	e055      	b.n	80067b4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <tcp_input+0xc0>
 8006710:	4b5d      	ldr	r3, [pc, #372]	; (8006888 <tcp_input+0x22c>)
 8006712:	22b2      	movs	r2, #178	; 0xb2
 8006714:	495d      	ldr	r1, [pc, #372]	; (800688c <tcp_input+0x230>)
 8006716:	485e      	ldr	r0, [pc, #376]	; (8006890 <tcp_input+0x234>)
 8006718:	f007 fee6 	bl	800e4e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800671c:	f06f 0113 	mvn.w	r1, #19
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fe fb2f 	bl	8004d84 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	895a      	ldrh	r2, [r3, #10]
 800672a:	4b56      	ldr	r3, [pc, #344]	; (8006884 <tcp_input+0x228>)
 800672c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800672e:	4b53      	ldr	r3, [pc, #332]	; (800687c <tcp_input+0x220>)
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <tcp_input+0x228>)
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800673a:	4b52      	ldr	r3, [pc, #328]	; (8006884 <tcp_input+0x228>)
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	425b      	negs	r3, r3
 8006740:	b29b      	uxth	r3, r3
 8006742:	b21b      	sxth	r3, r3
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fe fb1c 	bl	8004d84 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	895b      	ldrh	r3, [r3, #10]
 8006752:	8a3a      	ldrh	r2, [r7, #16]
 8006754:	429a      	cmp	r2, r3
 8006756:	f200 831d 	bhi.w	8006d94 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a47      	ldr	r2, [pc, #284]	; (8006880 <tcp_input+0x224>)
 8006762:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	8a3b      	ldrh	r3, [r7, #16]
 800676a:	425b      	negs	r3, r3
 800676c:	b29b      	uxth	r3, r3
 800676e:	b21b      	sxth	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f7fe fb06 	bl	8004d84 <pbuf_header>
    p->tot_len -= opt2len;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	891a      	ldrh	r2, [r3, #8]
 800677c:	8a3b      	ldrh	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29a      	uxth	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	895b      	ldrh	r3, [r3, #10]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <tcp_input+0x13e>
 800678e:	4b3e      	ldr	r3, [pc, #248]	; (8006888 <tcp_input+0x22c>)
 8006790:	22cf      	movs	r2, #207	; 0xcf
 8006792:	4940      	ldr	r1, [pc, #256]	; (8006894 <tcp_input+0x238>)
 8006794:	483e      	ldr	r0, [pc, #248]	; (8006890 <tcp_input+0x234>)
 8006796:	f007 fea7 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	891a      	ldrh	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	891b      	ldrh	r3, [r3, #8]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d005      	beq.n	80067b4 <tcp_input+0x158>
 80067a8:	4b37      	ldr	r3, [pc, #220]	; (8006888 <tcp_input+0x22c>)
 80067aa:	22d0      	movs	r2, #208	; 0xd0
 80067ac:	493a      	ldr	r1, [pc, #232]	; (8006898 <tcp_input+0x23c>)
 80067ae:	4838      	ldr	r0, [pc, #224]	; (8006890 <tcp_input+0x234>)
 80067b0:	f007 fe9a 	bl	800e4e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80067b4:	4b2f      	ldr	r3, [pc, #188]	; (8006874 <tcp_input+0x218>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	4b2d      	ldr	r3, [pc, #180]	; (8006874 <tcp_input+0x218>)
 80067be:	681c      	ldr	r4, [r3, #0]
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fd f9fa 	bl	8003bba <lwip_htons>
 80067c6:	4603      	mov	r3, r0
 80067c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80067ca:	4b2a      	ldr	r3, [pc, #168]	; (8006874 <tcp_input+0x218>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	885b      	ldrh	r3, [r3, #2]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	4b28      	ldr	r3, [pc, #160]	; (8006874 <tcp_input+0x218>)
 80067d4:	681c      	ldr	r4, [r3, #0]
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fd f9ef 	bl	8003bba <lwip_htons>
 80067dc:	4603      	mov	r3, r0
 80067de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80067e0:	4b24      	ldr	r3, [pc, #144]	; (8006874 <tcp_input+0x218>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <tcp_input+0x218>)
 80067e8:	681c      	ldr	r4, [r3, #0]
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fd f9f3 	bl	8003bd6 <lwip_htonl>
 80067f0:	4603      	mov	r3, r0
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	4a29      	ldr	r2, [pc, #164]	; (800689c <tcp_input+0x240>)
 80067f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80067fa:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <tcp_input+0x218>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <tcp_input+0x218>)
 8006802:	681c      	ldr	r4, [r3, #0]
 8006804:	4610      	mov	r0, r2
 8006806:	f7fd f9e6 	bl	8003bd6 <lwip_htonl>
 800680a:	4603      	mov	r3, r0
 800680c:	60a3      	str	r3, [r4, #8]
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	4a23      	ldr	r2, [pc, #140]	; (80068a0 <tcp_input+0x244>)
 8006812:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <tcp_input+0x218>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	89db      	ldrh	r3, [r3, #14]
 800681a:	b29a      	uxth	r2, r3
 800681c:	4b15      	ldr	r3, [pc, #84]	; (8006874 <tcp_input+0x218>)
 800681e:	681c      	ldr	r4, [r3, #0]
 8006820:	4610      	mov	r0, r2
 8006822:	f7fd f9ca 	bl	8003bba <lwip_htons>
 8006826:	4603      	mov	r3, r0
 8006828:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <tcp_input+0x218>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	899b      	ldrh	r3, [r3, #12]
 8006830:	b29b      	uxth	r3, r3
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd f9c1 	bl	8003bba <lwip_htons>
 8006838:	4603      	mov	r3, r0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006840:	b2da      	uxtb	r2, r3
 8006842:	4b18      	ldr	r3, [pc, #96]	; (80068a4 <tcp_input+0x248>)
 8006844:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	891a      	ldrh	r2, [r3, #8]
 800684a:	4b16      	ldr	r3, [pc, #88]	; (80068a4 <tcp_input+0x248>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b00      	cmp	r3, #0
 8006854:	bf14      	ite	ne
 8006856:	2301      	movne	r3, #1
 8006858:	2300      	moveq	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	b29b      	uxth	r3, r3
 800685e:	4413      	add	r3, r2
 8006860:	b29a      	uxth	r2, r3
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <tcp_input+0x24c>)
 8006864:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800686a:	4b10      	ldr	r3, [pc, #64]	; (80068ac <tcp_input+0x250>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e082      	b.n	8006978 <tcp_input+0x31c>
 8006872:	bf00      	nop
 8006874:	200000e0 	.word	0x200000e0
 8006878:	20003448 	.word	0x20003448
 800687c:	200000e4 	.word	0x200000e4
 8006880:	200000e8 	.word	0x200000e8
 8006884:	200000e6 	.word	0x200000e6
 8006888:	08010078 	.word	0x08010078
 800688c:	080100ac 	.word	0x080100ac
 8006890:	080100bc 	.word	0x080100bc
 8006894:	080100e4 	.word	0x080100e4
 8006898:	080100f0 	.word	0x080100f0
 800689c:	200000f0 	.word	0x200000f0
 80068a0:	200000f4 	.word	0x200000f4
 80068a4:	200000fc 	.word	0x200000fc
 80068a8:	200000fa 	.word	0x200000fa
 80068ac:	20006998 	.word	0x20006998
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	7d1b      	ldrb	r3, [r3, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <tcp_input+0x268>
 80068b8:	4b8f      	ldr	r3, [pc, #572]	; (8006af8 <tcp_input+0x49c>)
 80068ba:	22e2      	movs	r2, #226	; 0xe2
 80068bc:	498f      	ldr	r1, [pc, #572]	; (8006afc <tcp_input+0x4a0>)
 80068be:	4890      	ldr	r0, [pc, #576]	; (8006b00 <tcp_input+0x4a4>)
 80068c0:	f007 fe12 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b0a      	cmp	r3, #10
 80068ca:	d105      	bne.n	80068d8 <tcp_input+0x27c>
 80068cc:	4b8a      	ldr	r3, [pc, #552]	; (8006af8 <tcp_input+0x49c>)
 80068ce:	22e3      	movs	r2, #227	; 0xe3
 80068d0:	498c      	ldr	r1, [pc, #560]	; (8006b04 <tcp_input+0x4a8>)
 80068d2:	488b      	ldr	r0, [pc, #556]	; (8006b00 <tcp_input+0x4a4>)
 80068d4:	f007 fe08 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	7d1b      	ldrb	r3, [r3, #20]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d105      	bne.n	80068ec <tcp_input+0x290>
 80068e0:	4b85      	ldr	r3, [pc, #532]	; (8006af8 <tcp_input+0x49c>)
 80068e2:	22e4      	movs	r2, #228	; 0xe4
 80068e4:	4988      	ldr	r1, [pc, #544]	; (8006b08 <tcp_input+0x4ac>)
 80068e6:	4886      	ldr	r0, [pc, #536]	; (8006b00 <tcp_input+0x4a4>)
 80068e8:	f007 fdfe 	bl	800e4e8 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	8b1a      	ldrh	r2, [r3, #24]
 80068f0:	4b86      	ldr	r3, [pc, #536]	; (8006b0c <tcp_input+0x4b0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d138      	bne.n	800696e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	8ada      	ldrh	r2, [r3, #22]
 8006900:	4b82      	ldr	r3, [pc, #520]	; (8006b0c <tcp_input+0x4b0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	885b      	ldrh	r3, [r3, #2]
 8006906:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006908:	429a      	cmp	r2, r3
 800690a:	d130      	bne.n	800696e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	4b7f      	ldr	r3, [pc, #508]	; (8006b10 <tcp_input+0x4b4>)
 8006912:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006914:	429a      	cmp	r2, r3
 8006916:	d12a      	bne.n	800696e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b7c      	ldr	r3, [pc, #496]	; (8006b10 <tcp_input+0x4b4>)
 800691e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006920:	429a      	cmp	r2, r3
 8006922:	d124      	bne.n	800696e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	429a      	cmp	r2, r3
 800692c:	d105      	bne.n	800693a <tcp_input+0x2de>
 800692e:	4b72      	ldr	r3, [pc, #456]	; (8006af8 <tcp_input+0x49c>)
 8006930:	22ec      	movs	r2, #236	; 0xec
 8006932:	4978      	ldr	r1, [pc, #480]	; (8006b14 <tcp_input+0x4b8>)
 8006934:	4872      	ldr	r0, [pc, #456]	; (8006b00 <tcp_input+0x4a4>)
 8006936:	f007 fdd7 	bl	800e4e8 <iprintf>
      if (prev != NULL) {
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006948:	4b73      	ldr	r3, [pc, #460]	; (8006b18 <tcp_input+0x4bc>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006950:	4a71      	ldr	r2, [pc, #452]	; (8006b18 <tcp_input+0x4bc>)
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	429a      	cmp	r2, r3
 800695e:	d10f      	bne.n	8006980 <tcp_input+0x324>
 8006960:	4b65      	ldr	r3, [pc, #404]	; (8006af8 <tcp_input+0x49c>)
 8006962:	22f4      	movs	r2, #244	; 0xf4
 8006964:	496d      	ldr	r1, [pc, #436]	; (8006b1c <tcp_input+0x4c0>)
 8006966:	4866      	ldr	r0, [pc, #408]	; (8006b00 <tcp_input+0x4a4>)
 8006968:	f007 fdbe 	bl	800e4e8 <iprintf>
      break;
 800696c:	e008      	b.n	8006980 <tcp_input+0x324>
    }
    prev = pcb;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d198      	bne.n	80068b0 <tcp_input+0x254>
 800697e:	e000      	b.n	8006982 <tcp_input+0x326>
      break;
 8006980:	bf00      	nop
  }

  if (pcb == NULL) {
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d173      	bne.n	8006a70 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006988:	4b65      	ldr	r3, [pc, #404]	; (8006b20 <tcp_input+0x4c4>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	e02f      	b.n	80069f0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	2b0a      	cmp	r3, #10
 8006996:	d005      	beq.n	80069a4 <tcp_input+0x348>
 8006998:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <tcp_input+0x49c>)
 800699a:	22fe      	movs	r2, #254	; 0xfe
 800699c:	4961      	ldr	r1, [pc, #388]	; (8006b24 <tcp_input+0x4c8>)
 800699e:	4858      	ldr	r0, [pc, #352]	; (8006b00 <tcp_input+0x4a4>)
 80069a0:	f007 fda2 	bl	800e4e8 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	8b1a      	ldrh	r2, [r3, #24]
 80069a8:	4b58      	ldr	r3, [pc, #352]	; (8006b0c <tcp_input+0x4b0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d11a      	bne.n	80069ea <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	8ada      	ldrh	r2, [r3, #22]
 80069b8:	4b54      	ldr	r3, [pc, #336]	; (8006b0c <tcp_input+0x4b0>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	885b      	ldrh	r3, [r3, #2]
 80069be:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d112      	bne.n	80069ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	4b51      	ldr	r3, [pc, #324]	; (8006b10 <tcp_input+0x4b4>)
 80069ca:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d10c      	bne.n	80069ea <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b4e      	ldr	r3, [pc, #312]	; (8006b10 <tcp_input+0x4b4>)
 80069d6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80069d8:	429a      	cmp	r2, r3
 80069da:	d106      	bne.n	80069ea <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80069dc:	69f8      	ldr	r0, [r7, #28]
 80069de:	f000 fb15 	bl	800700c <tcp_timewait_input>
        pbuf_free(p);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fe f9f2 	bl	8004dcc <pbuf_free>
        return;
 80069e8:	e1da      	b.n	8006da0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1cc      	bne.n	8006990 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80069fa:	4b4b      	ldr	r3, [pc, #300]	; (8006b28 <tcp_input+0x4cc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e019      	b.n	8006a36 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	8ada      	ldrh	r2, [r3, #22]
 8006a06:	4b41      	ldr	r3, [pc, #260]	; (8006b0c <tcp_input+0x4b0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	885b      	ldrh	r3, [r3, #2]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d10c      	bne.n	8006a2c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b3e      	ldr	r3, [pc, #248]	; (8006b10 <tcp_input+0x4b4>)
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d00f      	beq.n	8006a3e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <tcp_input+0x3e4>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d009      	beq.n	8006a40 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	617b      	str	r3, [r7, #20]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e2      	bne.n	8006a02 <tcp_input+0x3a6>
 8006a3c:	e000      	b.n	8006a40 <tcp_input+0x3e4>
            break;
 8006a3e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d014      	beq.n	8006a70 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006a54:	4b34      	ldr	r3, [pc, #208]	; (8006b28 <tcp_input+0x4cc>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006a5c:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <tcp_input+0x4cc>)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f000 f9f0 	bl	8006e48 <tcp_listen_input>
      pbuf_free(p);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fe f9af 	bl	8004dcc <pbuf_free>
      return;
 8006a6e:	e197      	b.n	8006da0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8164 	beq.w	8006d40 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006a78:	4b2c      	ldr	r3, [pc, #176]	; (8006b2c <tcp_input+0x4d0>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	891a      	ldrh	r2, [r3, #8]
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <tcp_input+0x4d0>)
 8006a84:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006a86:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <tcp_input+0x4d0>)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006a8c:	4b1f      	ldr	r3, [pc, #124]	; (8006b0c <tcp_input+0x4b0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <tcp_input+0x4d0>)
 8006a92:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006a94:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <tcp_input+0x4d4>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006a9a:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <tcp_input+0x4d8>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <tcp_input+0x4dc>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006aa6:	4b25      	ldr	r3, [pc, #148]	; (8006b3c <tcp_input+0x4e0>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d006      	beq.n	8006ac0 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7b5b      	ldrb	r3, [r3, #13]
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d03d      	beq.n	8006b44 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006ac8:	69f8      	ldr	r0, [r7, #28]
 8006aca:	f7ff fa59 	bl	8005f80 <tcp_process_refused_data>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f113 0f0d 	cmn.w	r3, #13
 8006ad4:	d007      	beq.n	8006ae6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d032      	beq.n	8006b44 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006ade:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <tcp_input+0x4e4>)
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02e      	beq.n	8006b44 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f040 8108 	bne.w	8006d00 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006af0:	69f8      	ldr	r0, [r7, #28]
 8006af2:	f002 fa0b 	bl	8008f0c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006af6:	e103      	b.n	8006d00 <tcp_input+0x6a4>
 8006af8:	08010078 	.word	0x08010078
 8006afc:	08010110 	.word	0x08010110
 8006b00:	080100bc 	.word	0x080100bc
 8006b04:	08010138 	.word	0x08010138
 8006b08:	08010164 	.word	0x08010164
 8006b0c:	200000e0 	.word	0x200000e0
 8006b10:	20003448 	.word	0x20003448
 8006b14:	0801018c 	.word	0x0801018c
 8006b18:	20006998 	.word	0x20006998
 8006b1c:	080101b8 	.word	0x080101b8
 8006b20:	200069a8 	.word	0x200069a8
 8006b24:	080101e4 	.word	0x080101e4
 8006b28:	200069a0 	.word	0x200069a0
 8006b2c:	200000d0 	.word	0x200000d0
 8006b30:	20000100 	.word	0x20000100
 8006b34:	200000fd 	.word	0x200000fd
 8006b38:	200000f8 	.word	0x200000f8
 8006b3c:	200000fc 	.word	0x200000fc
 8006b40:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8006b44:	4a98      	ldr	r2, [pc, #608]	; (8006da8 <tcp_input+0x74c>)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006b4a:	69f8      	ldr	r0, [r7, #28]
 8006b4c:	f000 fac6 	bl	80070dc <tcp_process>
 8006b50:	4603      	mov	r3, r0
 8006b52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006b54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b58:	f113 0f0d 	cmn.w	r3, #13
 8006b5c:	f000 80d2 	beq.w	8006d04 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8006b60:	4b92      	ldr	r3, [pc, #584]	; (8006dac <tcp_input+0x750>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d008      	beq.n	8006b88 <tcp_input+0x52c>
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	6912      	ldr	r2, [r2, #16]
 8006b80:	f06f 010d 	mvn.w	r1, #13
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006b88:	69f9      	ldr	r1, [r7, #28]
 8006b8a:	4889      	ldr	r0, [pc, #548]	; (8006db0 <tcp_input+0x754>)
 8006b8c:	f7ff fc4c 	bl	8006428 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	2001      	movs	r0, #1
 8006b94:	f7fd fc0c 	bl	80043b0 <memp_free>
 8006b98:	e0bf      	b.n	8006d1a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006b9e:	4b85      	ldr	r3, [pc, #532]	; (8006db4 <tcp_input+0x758>)
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01b      	beq.n	8006bde <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006ba6:	4b83      	ldr	r3, [pc, #524]	; (8006db4 <tcp_input+0x758>)
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d009      	beq.n	8006bc8 <tcp_input+0x56c>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	6910      	ldr	r0, [r2, #16]
 8006bbc:	89fa      	ldrh	r2, [r7, #14]
 8006bbe:	69f9      	ldr	r1, [r7, #28]
 8006bc0:	4798      	blx	r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	74fb      	strb	r3, [r7, #19]
 8006bc6:	e001      	b.n	8006bcc <tcp_input+0x570>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bd0:	f113 0f0d 	cmn.w	r3, #13
 8006bd4:	f000 8098 	beq.w	8006d08 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006bd8:	4b76      	ldr	r3, [pc, #472]	; (8006db4 <tcp_input+0x758>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006bde:	69f8      	ldr	r0, [r7, #28]
 8006be0:	f000 f900 	bl	8006de4 <tcp_input_delayed_close>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8090 	bne.w	8006d0c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006bec:	4b72      	ldr	r3, [pc, #456]	; (8006db8 <tcp_input+0x75c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d041      	beq.n	8006c78 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <tcp_input+0x5ae>
 8006bfc:	4b6f      	ldr	r3, [pc, #444]	; (8006dbc <tcp_input+0x760>)
 8006bfe:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006c02:	496f      	ldr	r1, [pc, #444]	; (8006dc0 <tcp_input+0x764>)
 8006c04:	486f      	ldr	r0, [pc, #444]	; (8006dc4 <tcp_input+0x768>)
 8006c06:	f007 fc6f 	bl	800e4e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	7e9b      	ldrb	r3, [r3, #26]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006c16:	4b68      	ldr	r3, [pc, #416]	; (8006db8 <tcp_input+0x75c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe f8d6 	bl	8004dcc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006c20:	69f8      	ldr	r0, [r7, #28]
 8006c22:	f7fe fdd5 	bl	80057d0 <tcp_abort>
            goto aborted;
 8006c26:	e078      	b.n	8006d1a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <tcp_input+0x5f0>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	6918      	ldr	r0, [r3, #16]
 8006c3c:	4b5e      	ldr	r3, [pc, #376]	; (8006db8 <tcp_input+0x75c>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	69f9      	ldr	r1, [r7, #28]
 8006c44:	47a0      	blx	r4
 8006c46:	4603      	mov	r3, r0
 8006c48:	74fb      	strb	r3, [r7, #19]
 8006c4a:	e008      	b.n	8006c5e <tcp_input+0x602>
 8006c4c:	4b5a      	ldr	r3, [pc, #360]	; (8006db8 <tcp_input+0x75c>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	69f9      	ldr	r1, [r7, #28]
 8006c54:	2000      	movs	r0, #0
 8006c56:	f7ff fa44 	bl	80060e2 <tcp_recv_null>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006c5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c62:	f113 0f0d 	cmn.w	r3, #13
 8006c66:	d053      	beq.n	8006d10 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006c68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006c70:	4b51      	ldr	r3, [pc, #324]	; (8006db8 <tcp_input+0x75c>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <tcp_input+0x750>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 0320 	and.w	r3, r3, #32
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d030      	beq.n	8006ce6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c90:	7b5a      	ldrb	r2, [r3, #13]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	f042 0220 	orr.w	r2, r2, #32
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	735a      	strb	r2, [r3, #13]
 8006c9e:	e022      	b.n	8006ce6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ca8:	d005      	beq.n	8006cb6 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <tcp_input+0x67c>
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	6918      	ldr	r0, [r3, #16]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	69f9      	ldr	r1, [r7, #28]
 8006cd0:	47a0      	blx	r4
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	74fb      	strb	r3, [r7, #19]
 8006cd6:	e001      	b.n	8006cdc <tcp_input+0x680>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006cdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ce0:	f113 0f0d 	cmn.w	r3, #13
 8006ce4:	d016      	beq.n	8006d14 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006ce6:	4b30      	ldr	r3, [pc, #192]	; (8006da8 <tcp_input+0x74c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006cec:	69f8      	ldr	r0, [r7, #28]
 8006cee:	f000 f879 	bl	8006de4 <tcp_input_delayed_close>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10f      	bne.n	8006d18 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006cf8:	69f8      	ldr	r0, [r7, #28]
 8006cfa:	f002 f963 	bl	8008fc4 <tcp_output>
 8006cfe:	e00c      	b.n	8006d1a <tcp_input+0x6be>
        goto aborted;
 8006d00:	bf00      	nop
 8006d02:	e00a      	b.n	8006d1a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006d04:	bf00      	nop
 8006d06:	e008      	b.n	8006d1a <tcp_input+0x6be>
              goto aborted;
 8006d08:	bf00      	nop
 8006d0a:	e006      	b.n	8006d1a <tcp_input+0x6be>
          goto aborted;
 8006d0c:	bf00      	nop
 8006d0e:	e004      	b.n	8006d1a <tcp_input+0x6be>
            goto aborted;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <tcp_input+0x6be>
              goto aborted;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <tcp_input+0x6be>
          goto aborted;
 8006d18:	bf00      	nop
    tcp_input_pcb = NULL;
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <tcp_input+0x74c>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <tcp_input+0x75c>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006d26:	4b28      	ldr	r3, [pc, #160]	; (8006dc8 <tcp_input+0x76c>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d037      	beq.n	8006d9e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8006d2e:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <tcp_input+0x76c>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe f84a 	bl	8004dcc <pbuf_free>
      inseg.p = NULL;
 8006d38:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <tcp_input+0x76c>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006d3e:	e02e      	b.n	8006d9e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006d40:	4b22      	ldr	r3, [pc, #136]	; (8006dcc <tcp_input+0x770>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	899b      	ldrh	r3, [r3, #12]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fc ff36 	bl	8003bba <lwip_htons>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d115      	bne.n	8006d84 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <tcp_input+0x774>)
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <tcp_input+0x778>)
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <tcp_input+0x77c>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d68:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <tcp_input+0x770>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d6c:	885b      	ldrh	r3, [r3, #2]
 8006d6e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d70:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <tcp_input+0x770>)
 8006d72:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d74:	8812      	ldrh	r2, [r2, #0]
 8006d76:	b292      	uxth	r2, r2
 8006d78:	9201      	str	r2, [sp, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <tcp_input+0x780>)
 8006d7e:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <tcp_input+0x784>)
 8006d80:	f002 fbaa 	bl	80094d8 <tcp_rst>
    pbuf_free(p);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fe f821 	bl	8004dcc <pbuf_free>
  return;
 8006d8a:	e008      	b.n	8006d9e <tcp_input+0x742>
    goto dropped;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <tcp_input+0x73a>
dropped:
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <tcp_input+0x73a>
      goto dropped;
 8006d94:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fe f818 	bl	8004dcc <pbuf_free>
 8006d9c:	e000      	b.n	8006da0 <tcp_input+0x744>
  return;
 8006d9e:	bf00      	nop
}
 8006da0:	3724      	adds	r7, #36	; 0x24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd90      	pop	{r4, r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200069ac 	.word	0x200069ac
 8006dac:	200000fd 	.word	0x200000fd
 8006db0:	20006998 	.word	0x20006998
 8006db4:	200000f8 	.word	0x200000f8
 8006db8:	20000100 	.word	0x20000100
 8006dbc:	08010078 	.word	0x08010078
 8006dc0:	08010214 	.word	0x08010214
 8006dc4:	080100bc 	.word	0x080100bc
 8006dc8:	200000d0 	.word	0x200000d0
 8006dcc:	200000e0 	.word	0x200000e0
 8006dd0:	200000f4 	.word	0x200000f4
 8006dd4:	200000fa 	.word	0x200000fa
 8006dd8:	200000f0 	.word	0x200000f0
 8006ddc:	20003458 	.word	0x20003458
 8006de0:	2000345c 	.word	0x2000345c

08006de4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8006dec:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <tcp_input_delayed_close+0x5c>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01d      	beq.n	8006e34 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7e9b      	ldrb	r3, [r3, #26]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10d      	bne.n	8006e20 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <tcp_input_delayed_close+0x3c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6912      	ldr	r2, [r2, #16]
 8006e18:	f06f 010e 	mvn.w	r1, #14
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4808      	ldr	r0, [pc, #32]	; (8006e44 <tcp_input_delayed_close+0x60>)
 8006e24:	f7ff fb00 	bl	8006428 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	f7fd fac0 	bl	80043b0 <memp_free>
    return 1;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200000fd 	.word	0x200000fd
 8006e44:	20006998 	.word	0x20006998

08006e48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006e50:	4b64      	ldr	r3, [pc, #400]	; (8006fe4 <tcp_listen_input+0x19c>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f040 80bc 	bne.w	8006fd6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006e5e:	4b61      	ldr	r3, [pc, #388]	; (8006fe4 <tcp_listen_input+0x19c>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e6a:	4b5f      	ldr	r3, [pc, #380]	; (8006fe8 <tcp_listen_input+0x1a0>)
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	4b5f      	ldr	r3, [pc, #380]	; (8006fec <tcp_listen_input+0x1a4>)
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	4b5e      	ldr	r3, [pc, #376]	; (8006ff0 <tcp_listen_input+0x1a8>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e7a:	4b5e      	ldr	r3, [pc, #376]	; (8006ff4 <tcp_listen_input+0x1ac>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e7e:	885b      	ldrh	r3, [r3, #2]
 8006e80:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e82:	4a5c      	ldr	r2, [pc, #368]	; (8006ff4 <tcp_listen_input+0x1ac>)
 8006e84:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e86:	8812      	ldrh	r2, [r2, #0]
 8006e88:	b292      	uxth	r2, r2
 8006e8a:	9201      	str	r2, [sp, #4]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4b5a      	ldr	r3, [pc, #360]	; (8006ff8 <tcp_listen_input+0x1b0>)
 8006e90:	4a5a      	ldr	r2, [pc, #360]	; (8006ffc <tcp_listen_input+0x1b4>)
 8006e92:	f002 fb21 	bl	80094d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006e96:	e0a0      	b.n	8006fda <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8006e98:	4b52      	ldr	r3, [pc, #328]	; (8006fe4 <tcp_listen_input+0x19c>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 809a 	beq.w	8006fda <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7d5b      	ldrb	r3, [r3, #21]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff f9f8 	bl	80062a0 <tcp_alloc>
 8006eb0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d111      	bne.n	8006edc <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <tcp_listen_input+0x8e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6910      	ldr	r0, [r2, #16]
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4798      	blx	r3
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]
      return;
 8006ed4:	e082      	b.n	8006fdc <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006ed6:	23f0      	movs	r3, #240	; 0xf0
 8006ed8:	73bb      	strb	r3, [r7, #14]
      return;
 8006eda:	e07f      	b.n	8006fdc <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006edc:	4b48      	ldr	r3, [pc, #288]	; (8007000 <tcp_listen_input+0x1b8>)
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006ee4:	4b46      	ldr	r3, [pc, #280]	; (8007000 <tcp_listen_input+0x1b8>)
 8006ee6:	691a      	ldr	r2, [r3, #16]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8ada      	ldrh	r2, [r3, #22]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006ef4:	4b3f      	ldr	r3, [pc, #252]	; (8006ff4 <tcp_listen_input+0x1ac>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2203      	movs	r2, #3
 8006f04:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006f06:	4b3a      	ldr	r3, [pc, #232]	; (8006ff0 <tcp_listen_input+0x1a8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006f18:	6978      	ldr	r0, [r7, #20]
 8006f1a:	f7ff fb01 	bl	8006520 <tcp_next_iss>
 8006f1e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006f38:	4b2d      	ldr	r3, [pc, #180]	; (8006ff0 <tcp_listen_input+0x1a8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	1e5a      	subs	r2, r3, #1
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7a1b      	ldrb	r3, [r3, #8]
 8006f54:	f003 030c 	and.w	r3, r3, #12
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006f5e:	4b29      	ldr	r3, [pc, #164]	; (8007004 <tcp_listen_input+0x1bc>)
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	4a27      	ldr	r2, [pc, #156]	; (8007004 <tcp_listen_input+0x1bc>)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	f002 fd06 	bl	800997c <tcp_timer_needed>
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <tcp_listen_input+0x1c0>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f001 fd14 	bl	80089a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <tcp_listen_input+0x1ac>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	89db      	ldrh	r3, [r3, #14]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7ff fad5 	bl	8006550 <tcp_eff_send_mss_impl>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461a      	mov	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006fae:	2112      	movs	r1, #18
 8006fb0:	6978      	ldr	r0, [r7, #20]
 8006fb2:	f001 feaf 	bl	8008d14 <tcp_enqueue_flags>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8006fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	6978      	ldr	r0, [r7, #20]
 8006fc6:	f7fe fb51 	bl	800566c <tcp_abandon>
      return;
 8006fca:	e007      	b.n	8006fdc <tcp_listen_input+0x194>
    tcp_output(npcb);
 8006fcc:	6978      	ldr	r0, [r7, #20]
 8006fce:	f001 fff9 	bl	8008fc4 <tcp_output>
  return;
 8006fd2:	bf00      	nop
 8006fd4:	e001      	b.n	8006fda <tcp_listen_input+0x192>
    return;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <tcp_listen_input+0x194>
  return;
 8006fda:	bf00      	nop
}
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200000fc 	.word	0x200000fc
 8006fe8:	200000f4 	.word	0x200000f4
 8006fec:	200000fa 	.word	0x200000fa
 8006ff0:	200000f0 	.word	0x200000f0
 8006ff4:	200000e0 	.word	0x200000e0
 8006ff8:	20003458 	.word	0x20003458
 8006ffc:	2000345c 	.word	0x2000345c
 8007000:	20003448 	.word	0x20003448
 8007004:	20006998 	.word	0x20006998
 8007008:	20006994 	.word	0x20006994

0800700c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af02      	add	r7, sp, #8
 8007012:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007014:	4b29      	ldr	r3, [pc, #164]	; (80070bc <tcp_timewait_input+0xb0>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d147      	bne.n	80070b0 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007020:	4b26      	ldr	r3, [pc, #152]	; (80070bc <tcp_timewait_input+0xb0>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d027      	beq.n	800707c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800702c:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <tcp_timewait_input+0xb4>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	db2a      	blt.n	8007090 <tcp_timewait_input+0x84>
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <tcp_timewait_input+0xb4>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007046:	440b      	add	r3, r1
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	dc20      	bgt.n	8007090 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800704e:	4b1d      	ldr	r3, [pc, #116]	; (80070c4 <tcp_timewait_input+0xb8>)
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <tcp_timewait_input+0xbc>)
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <tcp_timewait_input+0xb4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800705e:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <tcp_timewait_input+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007066:	4a19      	ldr	r2, [pc, #100]	; (80070cc <tcp_timewait_input+0xc0>)
 8007068:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800706a:	8812      	ldrh	r2, [r2, #0]
 800706c:	b292      	uxth	r2, r2
 800706e:	9201      	str	r2, [sp, #4]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <tcp_timewait_input+0xc4>)
 8007074:	4a17      	ldr	r2, [pc, #92]	; (80070d4 <tcp_timewait_input+0xc8>)
 8007076:	f002 fa2f 	bl	80094d8 <tcp_rst>
      return;
 800707a:	e01c      	b.n	80070b6 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800707c:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <tcp_timewait_input+0xb0>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <tcp_timewait_input+0xcc>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <tcp_timewait_input+0xbc>)
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7e9b      	ldrb	r3, [r3, #26]
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 ff8c 	bl	8008fc4 <tcp_output>
  }
  return;
 80070ac:	bf00      	nop
 80070ae:	e001      	b.n	80070b4 <tcp_timewait_input+0xa8>
    return;
 80070b0:	bf00      	nop
 80070b2:	e000      	b.n	80070b6 <tcp_timewait_input+0xaa>
  return;
 80070b4:	bf00      	nop
}
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200000fc 	.word	0x200000fc
 80070c0:	200000f0 	.word	0x200000f0
 80070c4:	200000f4 	.word	0x200000f4
 80070c8:	200000fa 	.word	0x200000fa
 80070cc:	200000e0 	.word	0x200000e0
 80070d0:	20003458 	.word	0x20003458
 80070d4:	2000345c 	.word	0x2000345c
 80070d8:	2000699c 	.word	0x2000699c

080070dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80070ec:	4ba4      	ldr	r3, [pc, #656]	; (8007380 <tcp_process+0x2a4>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d04e      	beq.n	8007196 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7d1b      	ldrb	r3, [r3, #20]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d108      	bne.n	8007112 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007104:	4b9f      	ldr	r3, [pc, #636]	; (8007384 <tcp_process+0x2a8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d123      	bne.n	8007154 <tcp_process+0x78>
        acceptable = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	76fb      	strb	r3, [r7, #27]
 8007110:	e020      	b.n	8007154 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007116:	4b9c      	ldr	r3, [pc, #624]	; (8007388 <tcp_process+0x2ac>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d102      	bne.n	8007124 <tcp_process+0x48>
        acceptable = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	76fb      	strb	r3, [r7, #27]
 8007122:	e017      	b.n	8007154 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007124:	4b98      	ldr	r3, [pc, #608]	; (8007388 <tcp_process+0x2ac>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	db10      	blt.n	8007154 <tcp_process+0x78>
 8007132:	4b95      	ldr	r3, [pc, #596]	; (8007388 <tcp_process+0x2ac>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800713e:	440b      	add	r3, r1
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc06      	bgt.n	8007154 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7e9b      	ldrb	r3, [r3, #26]
 800714a:	f043 0302 	orr.w	r3, r3, #2
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007154:	7efb      	ldrb	r3, [r7, #27]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01b      	beq.n	8007192 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7d1b      	ldrb	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d106      	bne.n	8007170 <tcp_process+0x94>
 8007162:	4b8a      	ldr	r3, [pc, #552]	; (800738c <tcp_process+0x2b0>)
 8007164:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007168:	4989      	ldr	r1, [pc, #548]	; (8007390 <tcp_process+0x2b4>)
 800716a:	488a      	ldr	r0, [pc, #552]	; (8007394 <tcp_process+0x2b8>)
 800716c:	f007 f9bc 	bl	800e4e8 <iprintf>
      recv_flags |= TF_RESET;
 8007170:	4b89      	ldr	r3, [pc, #548]	; (8007398 <tcp_process+0x2bc>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f043 0308 	orr.w	r3, r3, #8
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4b87      	ldr	r3, [pc, #540]	; (8007398 <tcp_process+0x2bc>)
 800717c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7e9b      	ldrb	r3, [r3, #26]
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	b2da      	uxtb	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800718c:	f06f 030d 	mvn.w	r3, #13
 8007190:	e34d      	b.n	800782e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e34b      	b.n	800782e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007196:	4b7a      	ldr	r3, [pc, #488]	; (8007380 <tcp_process+0x2a4>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <tcp_process+0xe8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7d1b      	ldrb	r3, [r3, #20]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d00c      	beq.n	80071c4 <tcp_process+0xe8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d008      	beq.n	80071c4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7e9b      	ldrb	r3, [r3, #26]
 80071b6:	f043 0302 	orr.w	r3, r3, #2
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e334      	b.n	800782e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7e9b      	ldrb	r3, [r3, #26]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80071d0:	4b72      	ldr	r3, [pc, #456]	; (800739c <tcp_process+0x2c0>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fbdf 	bl	80089a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7d1b      	ldrb	r3, [r3, #20]
 80071ea:	3b02      	subs	r3, #2
 80071ec:	2b07      	cmp	r3, #7
 80071ee:	f200 830e 	bhi.w	800780e <tcp_process+0x732>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <tcp_process+0x11c>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007219 	.word	0x08007219
 80071fc:	08007411 	.word	0x08007411
 8007200:	08007569 	.word	0x08007569
 8007204:	08007593 	.word	0x08007593
 8007208:	080076bd 	.word	0x080076bd
 800720c:	08007569 	.word	0x08007569
 8007210:	08007749 	.word	0x08007749
 8007214:	080077d9 	.word	0x080077d9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007218:	4b59      	ldr	r3, [pc, #356]	; (8007380 <tcp_process+0x2a4>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 80cb 	beq.w	80073bc <tcp_process+0x2e0>
 8007226:	4b56      	ldr	r3, [pc, #344]	; (8007380 <tcp_process+0x2a4>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80c4 	beq.w	80073bc <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	4b52      	ldr	r3, [pc, #328]	; (8007384 <tcp_process+0x2a8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	f040 80bc 	bne.w	80073bc <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8007244:	4b50      	ldr	r3, [pc, #320]	; (8007388 <tcp_process+0x2ac>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8007256:	4b4b      	ldr	r3, [pc, #300]	; (8007384 <tcp_process+0x2a8>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800725e:	4b50      	ldr	r3, [pc, #320]	; (80073a0 <tcp_process+0x2c4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	89db      	ldrh	r3, [r3, #14]
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007278:	4b43      	ldr	r3, [pc, #268]	; (8007388 <tcp_process+0x2ac>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	1e5a      	subs	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2204      	movs	r2, #4
 8007286:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7ff f95c 	bl	8006550 <tcp_eff_send_mss_impl>
 8007298:	4603      	mov	r3, r0
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80072aa:	429a      	cmp	r2, r3
 80072ac:	bf38      	it	cc
 80072ae:	461a      	movcc	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4293      	cmp	r3, r2
 80072b8:	bf28      	it	cs
 80072ba:	4613      	movcs	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <tcp_process+0x200>
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <tcp_process+0x2b0>)
 80072d0:	f240 321a 	movw	r2, #794	; 0x31a
 80072d4:	4933      	ldr	r1, [pc, #204]	; (80073a4 <tcp_process+0x2c8>)
 80072d6:	482f      	ldr	r0, [pc, #188]	; (8007394 <tcp_process+0x2b8>)
 80072d8:	f007 f906 	bl	800e4e8 <iprintf>
      --pcb->snd_queuelen;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d111      	bne.n	800731c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072fc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <tcp_process+0x236>
 8007304:	4b21      	ldr	r3, [pc, #132]	; (800738c <tcp_process+0x2b0>)
 8007306:	f240 3222 	movw	r2, #802	; 0x322
 800730a:	4927      	ldr	r1, [pc, #156]	; (80073a8 <tcp_process+0x2cc>)
 800730c:	4821      	ldr	r0, [pc, #132]	; (8007394 <tcp_process+0x2b8>)
 800730e:	f007 f8eb 	bl	800e4e8 <iprintf>
        pcb->unsent = rseg->next;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	669a      	str	r2, [r3, #104]	; 0x68
 800731a:	e003      	b.n	8007324 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007324:	69f8      	ldr	r0, [r7, #28]
 8007326:	f7fe fea8 	bl	800607a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <tcp_process+0x260>
        pcb->rtime = -1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007338:	861a      	strh	r2, [r3, #48]	; 0x30
 800733a:	e006      	b.n	800734a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <tcp_process+0x28e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6910      	ldr	r0, [r2, #16]
 800735e:	2200      	movs	r2, #0
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	76bb      	strb	r3, [r7, #26]
 8007368:	e001      	b.n	800736e <tcp_process+0x292>
 800736a:	2300      	movs	r3, #0
 800736c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800736e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007372:	f113 0f0d 	cmn.w	r3, #13
 8007376:	d119      	bne.n	80073ac <tcp_process+0x2d0>
        return ERR_ABRT;
 8007378:	f06f 030c 	mvn.w	r3, #12
 800737c:	e257      	b.n	800782e <tcp_process+0x752>
 800737e:	bf00      	nop
 8007380:	200000fc 	.word	0x200000fc
 8007384:	200000f4 	.word	0x200000f4
 8007388:	200000f0 	.word	0x200000f0
 800738c:	08010078 	.word	0x08010078
 8007390:	08010230 	.word	0x08010230
 8007394:	080100bc 	.word	0x080100bc
 8007398:	200000fd 	.word	0x200000fd
 800739c:	2000699c 	.word	0x2000699c
 80073a0:	200000e0 	.word	0x200000e0
 80073a4:	08010250 	.word	0x08010250
 80073a8:	08010268 	.word	0x08010268
      }
      tcp_ack_now(pcb);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	7e9b      	ldrb	r3, [r3, #26]
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80073ba:	e22a      	b.n	8007812 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80073bc:	4b9f      	ldr	r3, [pc, #636]	; (800763c <tcp_process+0x560>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8224 	beq.w	8007812 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80073ca:	4b9d      	ldr	r3, [pc, #628]	; (8007640 <tcp_process+0x564>)
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	4b9d      	ldr	r3, [pc, #628]	; (8007644 <tcp_process+0x568>)
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	4b9c      	ldr	r3, [pc, #624]	; (8007648 <tcp_process+0x56c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073da:	4b9c      	ldr	r3, [pc, #624]	; (800764c <tcp_process+0x570>)
 80073dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073e2:	4a9a      	ldr	r2, [pc, #616]	; (800764c <tcp_process+0x570>)
 80073e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80073e6:	8812      	ldrh	r2, [r2, #0]
 80073e8:	b292      	uxth	r2, r2
 80073ea:	9201      	str	r2, [sp, #4]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4b98      	ldr	r3, [pc, #608]	; (8007650 <tcp_process+0x574>)
 80073f0:	4a98      	ldr	r2, [pc, #608]	; (8007654 <tcp_process+0x578>)
 80073f2:	f002 f871 	bl	80094d8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073fc:	2b05      	cmp	r3, #5
 80073fe:	f200 8208 	bhi.w	8007812 <tcp_process+0x736>
        pcb->rtime = 0;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f002 f8db 	bl	80095c4 <tcp_rexmit_rto>
    break;
 800740e:	e200      	b.n	8007812 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007410:	4b8a      	ldr	r3, [pc, #552]	; (800763c <tcp_process+0x560>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8091 	beq.w	8007540 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800741e:	4b88      	ldr	r3, [pc, #544]	; (8007640 <tcp_process+0x564>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	db71      	blt.n	8007512 <tcp_process+0x436>
 800742e:	4b84      	ldr	r3, [pc, #528]	; (8007640 <tcp_process+0x564>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	dc6a      	bgt.n	8007512 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2204      	movs	r2, #4
 8007440:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00b      	beq.n	8007462 <tcp_process+0x386>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <tcp_process+0x386>
 8007454:	4b80      	ldr	r3, [pc, #512]	; (8007658 <tcp_process+0x57c>)
 8007456:	f240 3251 	movw	r2, #849	; 0x351
 800745a:	4980      	ldr	r1, [pc, #512]	; (800765c <tcp_process+0x580>)
 800745c:	4880      	ldr	r0, [pc, #512]	; (8007660 <tcp_process+0x584>)
 800745e:	f007 f843 	bl	800e4e8 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007466:	2b00      	cmp	r3, #0
 8007468:	d102      	bne.n	8007470 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800746a:	23fa      	movs	r3, #250	; 0xfa
 800746c:	76bb      	strb	r3, [r7, #26]
 800746e:	e011      	b.n	8007494 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <tcp_process+0x3b4>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6910      	ldr	r0, [r2, #16]
 8007484:	2200      	movs	r2, #0
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4798      	blx	r3
 800748a:	4603      	mov	r3, r0
 800748c:	76bb      	strb	r3, [r7, #26]
 800748e:	e001      	b.n	8007494 <tcp_process+0x3b8>
 8007490:	23f0      	movs	r3, #240	; 0xf0
 8007492:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007494:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800749c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80074a0:	f113 0f0d 	cmn.w	r3, #13
 80074a4:	d002      	beq.n	80074ac <tcp_process+0x3d0>
            tcp_abort(pcb);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fe f992 	bl	80057d0 <tcp_abort>
          }
          return ERR_ABRT;
 80074ac:	f06f 030c 	mvn.w	r3, #12
 80074b0:	e1bd      	b.n	800782e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa42 	bl	800793c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80074b8:	4b6a      	ldr	r3, [pc, #424]	; (8007664 <tcp_process+0x588>)
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <tcp_process+0x3f0>
          recv_acked--;
 80074c0:	4b68      	ldr	r3, [pc, #416]	; (8007664 <tcp_process+0x588>)
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	4b66      	ldr	r3, [pc, #408]	; (8007664 <tcp_process+0x588>)
 80074ca:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	bf38      	it	cc
 80074da:	461a      	movcc	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4293      	cmp	r3, r2
 80074e4:	bf28      	it	cs
 80074e6:	4613      	movcs	r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80074f0:	4b5d      	ldr	r3, [pc, #372]	; (8007668 <tcp_process+0x58c>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d034      	beq.n	8007566 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7e9b      	ldrb	r3, [r3, #26]
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2207      	movs	r2, #7
 800750e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007510:	e029      	b.n	8007566 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007512:	4b4b      	ldr	r3, [pc, #300]	; (8007640 <tcp_process+0x564>)
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	4b4b      	ldr	r3, [pc, #300]	; (8007644 <tcp_process+0x568>)
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	4b4a      	ldr	r3, [pc, #296]	; (8007648 <tcp_process+0x56c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007522:	4b4a      	ldr	r3, [pc, #296]	; (800764c <tcp_process+0x570>)
 8007524:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007526:	885b      	ldrh	r3, [r3, #2]
 8007528:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800752a:	4a48      	ldr	r2, [pc, #288]	; (800764c <tcp_process+0x570>)
 800752c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800752e:	8812      	ldrh	r2, [r2, #0]
 8007530:	b292      	uxth	r2, r2
 8007532:	9201      	str	r2, [sp, #4]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	4b46      	ldr	r3, [pc, #280]	; (8007650 <tcp_process+0x574>)
 8007538:	4a46      	ldr	r2, [pc, #280]	; (8007654 <tcp_process+0x578>)
 800753a:	f001 ffcd 	bl	80094d8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800753e:	e16a      	b.n	8007816 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007540:	4b3e      	ldr	r3, [pc, #248]	; (800763c <tcp_process+0x560>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8164 	beq.w	8007816 <tcp_process+0x73a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	1e5a      	subs	r2, r3, #1
 8007554:	4b3c      	ldr	r3, [pc, #240]	; (8007648 <tcp_process+0x56c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	f040 815c 	bne.w	8007816 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f002 f866 	bl	8009630 <tcp_rexmit>
    break;
 8007564:	e157      	b.n	8007816 <tcp_process+0x73a>
 8007566:	e156      	b.n	8007816 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f9e7 	bl	800793c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800756e:	4b3e      	ldr	r3, [pc, #248]	; (8007668 <tcp_process+0x58c>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 814f 	beq.w	800781a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7e9b      	ldrb	r3, [r3, #26]
 8007580:	f043 0302 	orr.w	r3, r3, #2
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2207      	movs	r2, #7
 800758e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007590:	e143      	b.n	800781a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f9d2 	bl	800793c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007598:	4b33      	ldr	r3, [pc, #204]	; (8007668 <tcp_process+0x58c>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d074      	beq.n	800768e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80075a4:	4b25      	ldr	r3, [pc, #148]	; (800763c <tcp_process+0x560>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d063      	beq.n	8007678 <tcp_process+0x59c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b4:	4b22      	ldr	r3, [pc, #136]	; (8007640 <tcp_process+0x564>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d15d      	bne.n	8007678 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d159      	bne.n	8007678 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	7e9b      	ldrb	r3, [r3, #26]
 80075c8:	f043 0302 	orr.w	r3, r3, #2
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fe fee6 	bl	80063a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80075d8:	4b24      	ldr	r3, [pc, #144]	; (800766c <tcp_process+0x590>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d105      	bne.n	80075ee <tcp_process+0x512>
 80075e2:	4b22      	ldr	r3, [pc, #136]	; (800766c <tcp_process+0x590>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4a20      	ldr	r2, [pc, #128]	; (800766c <tcp_process+0x590>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e013      	b.n	8007616 <tcp_process+0x53a>
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <tcp_process+0x590>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e00c      	b.n	8007610 <tcp_process+0x534>
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d104      	bne.n	800760a <tcp_process+0x52e>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	60da      	str	r2, [r3, #12]
 8007608:	e005      	b.n	8007616 <tcp_process+0x53a>
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1ef      	bne.n	80075f6 <tcp_process+0x51a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	60da      	str	r2, [r3, #12]
 800761c:	4b14      	ldr	r3, [pc, #80]	; (8007670 <tcp_process+0x594>)
 800761e:	2201      	movs	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	220a      	movs	r2, #10
 8007626:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007628:	4b12      	ldr	r3, [pc, #72]	; (8007674 <tcp_process+0x598>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]
 8007630:	4a10      	ldr	r2, [pc, #64]	; (8007674 <tcp_process+0x598>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	f002 f9a1 	bl	800997c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800763a:	e0f0      	b.n	800781e <tcp_process+0x742>
 800763c:	200000fc 	.word	0x200000fc
 8007640:	200000f4 	.word	0x200000f4
 8007644:	200000fa 	.word	0x200000fa
 8007648:	200000f0 	.word	0x200000f0
 800764c:	200000e0 	.word	0x200000e0
 8007650:	20003458 	.word	0x20003458
 8007654:	2000345c 	.word	0x2000345c
 8007658:	08010078 	.word	0x08010078
 800765c:	0801027c 	.word	0x0801027c
 8007660:	080100bc 	.word	0x080100bc
 8007664:	200000f8 	.word	0x200000f8
 8007668:	200000fd 	.word	0x200000fd
 800766c:	20006998 	.word	0x20006998
 8007670:	20006994 	.word	0x20006994
 8007674:	200069a8 	.word	0x200069a8
        tcp_ack_now(pcb);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7e9b      	ldrb	r3, [r3, #26]
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	b2da      	uxtb	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2208      	movs	r2, #8
 800768a:	751a      	strb	r2, [r3, #20]
    break;
 800768c:	e0c7      	b.n	800781e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800768e:	4b6a      	ldr	r3, [pc, #424]	; (8007838 <tcp_process+0x75c>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80c1 	beq.w	800781e <tcp_process+0x742>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076a0:	4b66      	ldr	r3, [pc, #408]	; (800783c <tcp_process+0x760>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	f040 80ba 	bne.w	800781e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f040 80b5 	bne.w	800781e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2206      	movs	r2, #6
 80076b8:	751a      	strb	r2, [r3, #20]
    break;
 80076ba:	e0b0      	b.n	800781e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f93d 	bl	800793c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80076c2:	4b5f      	ldr	r3, [pc, #380]	; (8007840 <tcp_process+0x764>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 80a9 	beq.w	8007822 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	7e9b      	ldrb	r3, [r3, #26]
 80076d4:	f043 0302 	orr.w	r3, r3, #2
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fe fe60 	bl	80063a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80076e4:	4b57      	ldr	r3, [pc, #348]	; (8007844 <tcp_process+0x768>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d105      	bne.n	80076fa <tcp_process+0x61e>
 80076ee:	4b55      	ldr	r3, [pc, #340]	; (8007844 <tcp_process+0x768>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4a53      	ldr	r2, [pc, #332]	; (8007844 <tcp_process+0x768>)
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	e013      	b.n	8007722 <tcp_process+0x646>
 80076fa:	4b52      	ldr	r3, [pc, #328]	; (8007844 <tcp_process+0x768>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	e00c      	b.n	800771c <tcp_process+0x640>
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	429a      	cmp	r2, r3
 800770a:	d104      	bne.n	8007716 <tcp_process+0x63a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	60da      	str	r2, [r3, #12]
 8007714:	e005      	b.n	8007722 <tcp_process+0x646>
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1ef      	bne.n	8007702 <tcp_process+0x626>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	60da      	str	r2, [r3, #12]
 8007728:	4b47      	ldr	r3, [pc, #284]	; (8007848 <tcp_process+0x76c>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	220a      	movs	r2, #10
 8007732:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007734:	4b45      	ldr	r3, [pc, #276]	; (800784c <tcp_process+0x770>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]
 800773c:	4a43      	ldr	r2, [pc, #268]	; (800784c <tcp_process+0x770>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	f002 f91b 	bl	800997c <tcp_timer_needed>
    }
    break;
 8007746:	e06c      	b.n	8007822 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f8f7 	bl	800793c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800774e:	4b3a      	ldr	r3, [pc, #232]	; (8007838 <tcp_process+0x75c>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d065      	beq.n	8007826 <tcp_process+0x74a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800775e:	4b37      	ldr	r3, [pc, #220]	; (800783c <tcp_process+0x760>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d15f      	bne.n	8007826 <tcp_process+0x74a>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776a:	2b00      	cmp	r3, #0
 800776c:	d15b      	bne.n	8007826 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fe fe18 	bl	80063a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007774:	4b33      	ldr	r3, [pc, #204]	; (8007844 <tcp_process+0x768>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d105      	bne.n	800778a <tcp_process+0x6ae>
 800777e:	4b31      	ldr	r3, [pc, #196]	; (8007844 <tcp_process+0x768>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4a2f      	ldr	r2, [pc, #188]	; (8007844 <tcp_process+0x768>)
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	e013      	b.n	80077b2 <tcp_process+0x6d6>
 800778a:	4b2e      	ldr	r3, [pc, #184]	; (8007844 <tcp_process+0x768>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e00c      	b.n	80077ac <tcp_process+0x6d0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d104      	bne.n	80077a6 <tcp_process+0x6ca>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e005      	b.n	80077b2 <tcp_process+0x6d6>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1ef      	bne.n	8007792 <tcp_process+0x6b6>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	60da      	str	r2, [r3, #12]
 80077b8:	4b23      	ldr	r3, [pc, #140]	; (8007848 <tcp_process+0x76c>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220a      	movs	r2, #10
 80077c2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80077c4:	4b21      	ldr	r3, [pc, #132]	; (800784c <tcp_process+0x770>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60da      	str	r2, [r3, #12]
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <tcp_process+0x770>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	f002 f8d3 	bl	800997c <tcp_timer_needed>
    }
    break;
 80077d6:	e026      	b.n	8007826 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8af 	bl	800793c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <tcp_process+0x75c>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	f003 0310 	and.w	r3, r3, #16
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <tcp_process+0x74e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <tcp_process+0x760>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d119      	bne.n	800782a <tcp_process+0x74e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d115      	bne.n	800782a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <tcp_process+0x764>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	f043 0310 	orr.w	r3, r3, #16
 8007806:	b2da      	uxtb	r2, r3
 8007808:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <tcp_process+0x764>)
 800780a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800780c:	e00d      	b.n	800782a <tcp_process+0x74e>
  default:
    break;
 800780e:	bf00      	nop
 8007810:	e00c      	b.n	800782c <tcp_process+0x750>
    break;
 8007812:	bf00      	nop
 8007814:	e00a      	b.n	800782c <tcp_process+0x750>
    break;
 8007816:	bf00      	nop
 8007818:	e008      	b.n	800782c <tcp_process+0x750>
    break;
 800781a:	bf00      	nop
 800781c:	e006      	b.n	800782c <tcp_process+0x750>
    break;
 800781e:	bf00      	nop
 8007820:	e004      	b.n	800782c <tcp_process+0x750>
    break;
 8007822:	bf00      	nop
 8007824:	e002      	b.n	800782c <tcp_process+0x750>
    break;
 8007826:	bf00      	nop
 8007828:	e000      	b.n	800782c <tcp_process+0x750>
    break;
 800782a:	bf00      	nop
  }
  return ERR_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3720      	adds	r7, #32
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200000fc 	.word	0x200000fc
 800783c:	200000f4 	.word	0x200000f4
 8007840:	200000fd 	.word	0x200000fd
 8007844:	20006998 	.word	0x20006998
 8007848:	20006994 	.word	0x20006994
 800784c:	200069a8 	.word	0x200069a8

08007850 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	899b      	ldrh	r3, [r3, #12]
 8007860:	b29b      	uxth	r3, r3
 8007862:	4618      	mov	r0, r3
 8007864:	f7fc f9a9 	bl	8003bba <lwip_htons>
 8007868:	4603      	mov	r3, r0
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d027      	beq.n	80078c2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007872:	6838      	ldr	r0, [r7, #0]
 8007874:	f7fe fbed 	bl	8006052 <tcp_segs_free>
    next = NULL;
 8007878:	2300      	movs	r3, #0
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	e055      	b.n	800792a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	899b      	ldrh	r3, [r3, #12]
 8007884:	b29b      	uxth	r3, r3
 8007886:	4618      	mov	r0, r3
 8007888:	f7fc f997 	bl	8003bba <lwip_htons>
 800788c:	4603      	mov	r3, r0
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	899b      	ldrh	r3, [r3, #12]
 800789c:	b29c      	uxth	r4, r3
 800789e:	2001      	movs	r0, #1
 80078a0:	f7fc f98b 	bl	8003bba <lwip_htons>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4322      	orrs	r2, r4
 80078ae:	b292      	uxth	r2, r2
 80078b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7fe fbdc 	bl	800607a <tcp_seg_free>
    while (next &&
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00e      	beq.n	80078e6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	891b      	ldrh	r3, [r3, #8]
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <tcp_oos_insert_segment+0xe8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	441a      	add	r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	8909      	ldrh	r1, [r1, #8]
 80078de:	440b      	add	r3, r1
 80078e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	dacb      	bge.n	800787e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01e      	beq.n	800792a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b11      	ldr	r3, [pc, #68]	; (8007938 <tcp_oos_insert_segment+0xe8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	441a      	add	r2, r3
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007900:	2b00      	cmp	r3, #0
 8007902:	dd12      	ble.n	800792a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b29a      	uxth	r2, r3
 800790c:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <tcp_oos_insert_segment+0xe8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	891b      	ldrh	r3, [r3, #8]
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7fd f8dd 	bl	8004ae4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	601a      	str	r2, [r3, #0]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	bd90      	pop	{r4, r7, pc}
 8007938:	200000f0 	.word	0x200000f0

0800793c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800793c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793e:	b08d      	sub	sp, #52	; 0x34
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7d1b      	ldrb	r3, [r3, #20]
 800794c:	2b03      	cmp	r3, #3
 800794e:	d806      	bhi.n	800795e <tcp_receive+0x22>
 8007950:	4ba6      	ldr	r3, [pc, #664]	; (8007bec <tcp_receive+0x2b0>)
 8007952:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007956:	49a6      	ldr	r1, [pc, #664]	; (8007bf0 <tcp_receive+0x2b4>)
 8007958:	48a6      	ldr	r0, [pc, #664]	; (8007bf4 <tcp_receive+0x2b8>)
 800795a:	f006 fdc5 	bl	800e4e8 <iprintf>

  if (flags & TCP_ACK) {
 800795e:	4ba6      	ldr	r3, [pc, #664]	; (8007bf8 <tcp_receive+0x2bc>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 82bf 	beq.w	8007eea <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	4413      	add	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007980:	4b9e      	ldr	r3, [pc, #632]	; (8007bfc <tcp_receive+0x2c0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	db1b      	blt.n	80079c2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800798e:	4b9b      	ldr	r3, [pc, #620]	; (8007bfc <tcp_receive+0x2c0>)
 8007990:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d106      	bne.n	80079a4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800799a:	4b99      	ldr	r3, [pc, #612]	; (8007c00 <tcp_receive+0x2c4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	db0e      	blt.n	80079c2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079a8:	4b95      	ldr	r3, [pc, #596]	; (8007c00 <tcp_receive+0x2c4>)
 80079aa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d141      	bne.n	8007a34 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80079b0:	4b94      	ldr	r3, [pc, #592]	; (8007c04 <tcp_receive+0x2c8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	89db      	ldrh	r3, [r3, #14]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079be:	429a      	cmp	r2, r3
 80079c0:	d938      	bls.n	8007a34 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80079c2:	4b90      	ldr	r3, [pc, #576]	; (8007c04 <tcp_receive+0x2c8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	89db      	ldrh	r3, [r3, #14]
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079dc:	429a      	cmp	r2, r3
 80079de:	d205      	bcs.n	80079ec <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80079ec:	4b83      	ldr	r3, [pc, #524]	; (8007bfc <tcp_receive+0x2c0>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80079f4:	4b82      	ldr	r3, [pc, #520]	; (8007c00 <tcp_receive+0x2c4>)
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10d      	bne.n	8007a22 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d111      	bne.n	8007a34 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007a20:	e008      	b.n	8007a34 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d003      	beq.n	8007a34 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007a34:	4b72      	ldr	r3, [pc, #456]	; (8007c00 <tcp_receive+0x2c4>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dc53      	bgt.n	8007aea <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007a42:	4b71      	ldr	r3, [pc, #452]	; (8007c08 <tcp_receive+0x2cc>)
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d146      	bne.n	8007ad8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007a54:	4413      	add	r3, r2
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d13d      	bne.n	8007ad8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	db38      	blt.n	8007ad8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a6a:	4b65      	ldr	r3, [pc, #404]	; (8007c00 <tcp_receive+0x2c4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d132      	bne.n	8007ad8 <tcp_receive+0x19c>
              found_dupack = 1;
 8007a72:	2301      	movs	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a7c:	2bff      	cmp	r3, #255	; 0xff
 8007a7e:	d007      	beq.n	8007a90 <tcp_receive+0x154>
                ++pcb->dupacks;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a86:	3301      	adds	r3, #1
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d916      	bls.n	8007ac8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aa4:	4413      	add	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d912      	bls.n	8007ad8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007abc:	4413      	add	r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007ac6:	e007      	b.n	8007ad8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d102      	bne.n	8007ad8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 fdfc 	bl	80096d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f040 8169 	bne.w	8007db2 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ae8:	e163      	b.n	8007db2 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007aea:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <tcp_receive+0x2c4>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f2c0 8107 	blt.w	8007d0a <tcp_receive+0x3ce>
 8007afc:	4b40      	ldr	r3, [pc, #256]	; (8007c00 <tcp_receive+0x2c4>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f300 80ff 	bgt.w	8007d0a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7e9b      	ldrb	r3, [r3, #26]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00c      	beq.n	8007b32 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7e9b      	ldrb	r3, [r3, #26]
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007b40:	10db      	asrs	r3, r3, #3
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	b21a      	sxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <tcp_receive+0x2c4>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7d1b      	ldrb	r3, [r3, #20]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	f240 8094 	bls.w	8007c9c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d216      	bcs.n	8007bb2 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007b8e:	4413      	add	r3, r2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d97f      	bls.n	8007c9c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ba6:	4413      	add	r3, r2
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007bb0:	e074      	b.n	8007c9c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007bc2:	fb03 f301 	mul.w	r3, r3, r1
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8007bcc:	fb93 f3f1 	sdiv	r3, r3, r1
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007bdc:	8a7a      	ldrh	r2, [r7, #18]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d95c      	bls.n	8007c9c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8a7a      	ldrh	r2, [r7, #18]
 8007be6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8007bea:	e057      	b.n	8007c9c <tcp_receive+0x360>
 8007bec:	08010078 	.word	0x08010078
 8007bf0:	0801029c 	.word	0x0801029c
 8007bf4:	080100bc 	.word	0x080100bc
 8007bf8:	200000fc 	.word	0x200000fc
 8007bfc:	200000f0 	.word	0x200000f0
 8007c00:	200000f4 	.word	0x200000f4
 8007c04:	200000e0 	.word	0x200000e0
 8007c08:	200000fa 	.word	0x200000fa
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd f964 	bl	8004ef4 <pbuf_clen>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d206      	bcs.n	8007c40 <tcp_receive+0x304>
 8007c32:	4b70      	ldr	r3, [pc, #448]	; (8007df4 <tcp_receive+0x4b8>)
 8007c34:	f240 429e 	movw	r2, #1182	; 0x49e
 8007c38:	496f      	ldr	r1, [pc, #444]	; (8007df8 <tcp_receive+0x4bc>)
 8007c3a:	4870      	ldr	r0, [pc, #448]	; (8007dfc <tcp_receive+0x4c0>)
 8007c3c:	f006 fc54 	bl	800e4e8 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fd f955 	bl	8004ef4 <pbuf_clen>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	891a      	ldrh	r2, [r3, #8]
 8007c62:	4b67      	ldr	r3, [pc, #412]	; (8007e00 <tcp_receive+0x4c4>)
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	4b65      	ldr	r3, [pc, #404]	; (8007e00 <tcp_receive+0x4c4>)
 8007c6c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c70:	f7fe fa03 	bl	800607a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00e      	beq.n	8007c9c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <tcp_receive+0x360>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <tcp_receive+0x360>
 8007c8e:	4b59      	ldr	r3, [pc, #356]	; (8007df4 <tcp_receive+0x4b8>)
 8007c90:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007c94:	495b      	ldr	r1, [pc, #364]	; (8007e04 <tcp_receive+0x4c8>)
 8007c96:	4859      	ldr	r0, [pc, #356]	; (8007dfc <tcp_receive+0x4c0>)
 8007c98:	f006 fc26 	bl	800e4e8 <iprintf>
      while (pcb->unacked != NULL &&
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d022      	beq.n	8007cea <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fb ff92 	bl	8003bd6 <lwip_htonl>
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb8:	891b      	ldrh	r3, [r3, #8]
 8007cba:	461d      	mov	r5, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	899b      	ldrh	r3, [r3, #12]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fb ff77 	bl	8003bba <lwip_htons>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <tcp_receive+0x39e>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <tcp_receive+0x3a0>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	442b      	add	r3, r5
 8007cde:	18e2      	adds	r2, r4, r3
 8007ce0:	4b49      	ldr	r3, [pc, #292]	; (8007e08 <tcp_receive+0x4cc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd90      	ble.n	8007c0c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d104      	bne.n	8007cfc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cf8:	861a      	strh	r2, [r3, #48]	; 0x30
 8007cfa:	e002      	b.n	8007d02 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	76da      	strb	r2, [r3, #27]
 8007d08:	e002      	b.n	8007d10 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 f8fe 	bl	8008f0c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007d10:	e04f      	b.n	8007db2 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd f8d9 	bl	8004ef4 <pbuf_clen>
 8007d42:	4603      	mov	r3, r0
 8007d44:	429c      	cmp	r4, r3
 8007d46:	d206      	bcs.n	8007d56 <tcp_receive+0x41a>
 8007d48:	4b2a      	ldr	r3, [pc, #168]	; (8007df4 <tcp_receive+0x4b8>)
 8007d4a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007d4e:	492a      	ldr	r1, [pc, #168]	; (8007df8 <tcp_receive+0x4bc>)
 8007d50:	482a      	ldr	r0, [pc, #168]	; (8007dfc <tcp_receive+0x4c0>)
 8007d52:	f006 fbc9 	bl	800e4e8 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd f8ca 	bl	8004ef4 <pbuf_clen>
 8007d60:	4603      	mov	r3, r0
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	891a      	ldrh	r2, [r3, #8]
 8007d78:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <tcp_receive+0x4c4>)
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	4b1f      	ldr	r3, [pc, #124]	; (8007e00 <tcp_receive+0x4c4>)
 8007d82:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d86:	f7fe f978 	bl	800607a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <tcp_receive+0x476>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <tcp_receive+0x476>
 8007da4:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <tcp_receive+0x4b8>)
 8007da6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8007daa:	4916      	ldr	r1, [pc, #88]	; (8007e04 <tcp_receive+0x4c8>)
 8007dac:	4813      	ldr	r0, [pc, #76]	; (8007dfc <tcp_receive+0x4c0>)
 8007dae:	f006 fb9b 	bl	800e4e8 <iprintf>
    while (pcb->unsent != NULL &&
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d036      	beq.n	8007e28 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <tcp_receive+0x4cc>)
 8007dbc:	681c      	ldr	r4, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fb ff05 	bl	8003bd6 <lwip_htonl>
 8007dcc:	4605      	mov	r5, r0
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	891b      	ldrh	r3, [r3, #8]
 8007dd4:	461e      	mov	r6, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fb feea 	bl	8003bba <lwip_htons>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00d      	beq.n	8007e0c <tcp_receive+0x4d0>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e00c      	b.n	8007e0e <tcp_receive+0x4d2>
 8007df4:	08010078 	.word	0x08010078
 8007df8:	080102b8 	.word	0x080102b8
 8007dfc:	080100bc 	.word	0x080100bc
 8007e00:	200000f8 	.word	0x200000f8
 8007e04:	080102e0 	.word	0x080102e0
 8007e08:	200000f4 	.word	0x200000f4
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4433      	add	r3, r6
 8007e10:	442b      	add	r3, r5
 8007e12:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	db07      	blt.n	8007e28 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007e18:	4b8d      	ldr	r3, [pc, #564]	; (8008050 <tcp_receive+0x714>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f77f af75 	ble.w	8007d12 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007e2e:	4b89      	ldr	r3, [pc, #548]	; (8008054 <tcp_receive+0x718>)
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	4413      	add	r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d052      	beq.n	8007eea <tcp_receive+0x5ae>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e48:	4b81      	ldr	r3, [pc, #516]	; (8008050 <tcp_receive+0x714>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	da4b      	bge.n	8007eea <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007e52:	4b81      	ldr	r3, [pc, #516]	; (8008058 <tcp_receive+0x71c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007e64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007e6c:	10db      	asrs	r3, r3, #3
 8007e6e:	b21b      	sxth	r3, r3
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e82:	4413      	add	r3, r2
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	b21a      	sxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8007e8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	da03      	bge.n	8007e9c <tcp_receive+0x560>
        m = -m;
 8007e94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e96:	425b      	negs	r3, r3
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8007e9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ea4:	109b      	asrs	r3, r3, #2
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007eba:	4413      	add	r3, r2
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	b21a      	sxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007eca:	10db      	asrs	r3, r3, #3
 8007ecc:	b21b      	sxth	r3, r3
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	4413      	add	r3, r2
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	b21a      	sxth	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007eea:	4b5c      	ldr	r3, [pc, #368]	; (800805c <tcp_receive+0x720>)
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 84f1 	beq.w	80088d6 <tcp_receive+0xf9a>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7d1b      	ldrb	r3, [r3, #20]
 8007ef8:	2b06      	cmp	r3, #6
 8007efa:	f200 84ec 	bhi.w	80088d6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f02:	4b57      	ldr	r3, [pc, #348]	; (8008060 <tcp_receive+0x724>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f2c0 80b8 	blt.w	8008080 <tcp_receive+0x744>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f14:	4b51      	ldr	r3, [pc, #324]	; (800805c <tcp_receive+0x720>)
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4b51      	ldr	r3, [pc, #324]	; (8008060 <tcp_receive+0x724>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	440b      	add	r3, r1
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	3301      	adds	r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f300 80ab 	bgt.w	8008080 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007f2a:	4b4e      	ldr	r3, [pc, #312]	; (8008064 <tcp_receive+0x728>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f34:	4b4a      	ldr	r3, [pc, #296]	; (8008060 <tcp_receive+0x724>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007f3c:	4b49      	ldr	r3, [pc, #292]	; (8008064 <tcp_receive+0x728>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d106      	bne.n	8007f52 <tcp_receive+0x616>
 8007f44:	4b48      	ldr	r3, [pc, #288]	; (8008068 <tcp_receive+0x72c>)
 8007f46:	f240 523c 	movw	r2, #1340	; 0x53c
 8007f4a:	4948      	ldr	r1, [pc, #288]	; (800806c <tcp_receive+0x730>)
 8007f4c:	4848      	ldr	r0, [pc, #288]	; (8008070 <tcp_receive+0x734>)
 8007f4e:	f006 facb 	bl	800e4e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	dd06      	ble.n	8007f6a <tcp_receive+0x62e>
 8007f5c:	4b42      	ldr	r3, [pc, #264]	; (8008068 <tcp_receive+0x72c>)
 8007f5e:	f240 523d 	movw	r2, #1341	; 0x53d
 8007f62:	4944      	ldr	r1, [pc, #272]	; (8008074 <tcp_receive+0x738>)
 8007f64:	4842      	ldr	r0, [pc, #264]	; (8008070 <tcp_receive+0x734>)
 8007f66:	f006 fabf 	bl	800e4e8 <iprintf>
      if (inseg.p->len < off) {
 8007f6a:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <tcp_receive+0x728>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	895b      	ldrh	r3, [r3, #10]
 8007f70:	461a      	mov	r2, r3
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	4293      	cmp	r3, r2
 8007f76:	dd3e      	ble.n	8007ff6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007f78:	4b3a      	ldr	r3, [pc, #232]	; (8008064 <tcp_receive+0x728>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	891b      	ldrh	r3, [r3, #8]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	4293      	cmp	r3, r2
 8007f84:	dd06      	ble.n	8007f94 <tcp_receive+0x658>
 8007f86:	4b38      	ldr	r3, [pc, #224]	; (8008068 <tcp_receive+0x72c>)
 8007f88:	f240 523f 	movw	r2, #1343	; 0x53f
 8007f8c:	493a      	ldr	r1, [pc, #232]	; (8008078 <tcp_receive+0x73c>)
 8007f8e:	4838      	ldr	r0, [pc, #224]	; (8008070 <tcp_receive+0x734>)
 8007f90:	f006 faaa 	bl	800e4e8 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007f94:	4b33      	ldr	r3, [pc, #204]	; (8008064 <tcp_receive+0x728>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	891a      	ldrh	r2, [r3, #8]
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8007fa2:	e00e      	b.n	8007fc2 <tcp_receive+0x686>
          off -= p->len;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	895b      	ldrh	r3, [r3, #10]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	8a3a      	ldrh	r2, [r7, #16]
 8007fb4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	895b      	ldrh	r3, [r3, #10]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	dcea      	bgt.n	8007fa4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	425b      	negs	r3, r3
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	b21b      	sxth	r3, r3
 8007fd8:	4619      	mov	r1, r3
 8007fda:	69b8      	ldr	r0, [r7, #24]
 8007fdc:	f7fc fed2 	bl	8004d84 <pbuf_header>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01c      	beq.n	8008020 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007fe6:	4b20      	ldr	r3, [pc, #128]	; (8008068 <tcp_receive+0x72c>)
 8007fe8:	f240 524c 	movw	r2, #1356	; 0x54c
 8007fec:	4923      	ldr	r1, [pc, #140]	; (800807c <tcp_receive+0x740>)
 8007fee:	4820      	ldr	r0, [pc, #128]	; (8008070 <tcp_receive+0x734>)
 8007ff0:	f006 fa7a 	bl	800e4e8 <iprintf>
 8007ff4:	e014      	b.n	8008020 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007ff6:	4b1b      	ldr	r3, [pc, #108]	; (8008064 <tcp_receive+0x728>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffc:	b292      	uxth	r2, r2
 8007ffe:	4252      	negs	r2, r2
 8008000:	b292      	uxth	r2, r2
 8008002:	b212      	sxth	r2, r2
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fc febc 	bl	8004d84 <pbuf_header>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d006      	beq.n	8008020 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <tcp_receive+0x72c>)
 8008014:	f240 5251 	movw	r2, #1361	; 0x551
 8008018:	4918      	ldr	r1, [pc, #96]	; (800807c <tcp_receive+0x740>)
 800801a:	4815      	ldr	r0, [pc, #84]	; (8008070 <tcp_receive+0x734>)
 800801c:	f006 fa64 	bl	800e4e8 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008020:	4b10      	ldr	r3, [pc, #64]	; (8008064 <tcp_receive+0x728>)
 8008022:	891a      	ldrh	r2, [r3, #8]
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <tcp_receive+0x724>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	b299      	uxth	r1, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	b29b      	uxth	r3, r3
 8008030:	1acb      	subs	r3, r1, r3
 8008032:	b29b      	uxth	r3, r3
 8008034:	4413      	add	r3, r2
 8008036:	b29a      	uxth	r2, r3
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <tcp_receive+0x728>)
 800803a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	4a07      	ldr	r2, [pc, #28]	; (8008060 <tcp_receive+0x724>)
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4b07      	ldr	r3, [pc, #28]	; (8008064 <tcp_receive+0x728>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a05      	ldr	r2, [pc, #20]	; (8008060 <tcp_receive+0x724>)
 800804a:	6812      	ldr	r2, [r2, #0]
 800804c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800804e:	e025      	b.n	800809c <tcp_receive+0x760>
 8008050:	200000f4 	.word	0x200000f4
 8008054:	200000f8 	.word	0x200000f8
 8008058:	2000699c 	.word	0x2000699c
 800805c:	200000fa 	.word	0x200000fa
 8008060:	200000f0 	.word	0x200000f0
 8008064:	200000d0 	.word	0x200000d0
 8008068:	08010078 	.word	0x08010078
 800806c:	08010300 	.word	0x08010300
 8008070:	080100bc 	.word	0x080100bc
 8008074:	08010310 	.word	0x08010310
 8008078:	08010320 	.word	0x08010320
 800807c:	08010330 	.word	0x08010330
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008080:	4b87      	ldr	r3, [pc, #540]	; (80082a0 <tcp_receive+0x964>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	da06      	bge.n	800809c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	7e9b      	ldrb	r3, [r3, #26]
 8008092:	f043 0302 	orr.w	r3, r3, #2
 8008096:	b2da      	uxtb	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800809c:	4b80      	ldr	r3, [pc, #512]	; (80082a0 <tcp_receive+0x964>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f2c0 8410 	blt.w	80088cc <tcp_receive+0xf90>
 80080ac:	4b7c      	ldr	r3, [pc, #496]	; (80082a0 <tcp_receive+0x964>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80080b8:	440b      	add	r3, r1
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	3301      	adds	r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f300 8404 	bgt.w	80088cc <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c8:	4b75      	ldr	r3, [pc, #468]	; (80082a0 <tcp_receive+0x964>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	f040 8287 	bne.w	80085e0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80080d2:	4b74      	ldr	r3, [pc, #464]	; (80082a4 <tcp_receive+0x968>)
 80080d4:	891c      	ldrh	r4, [r3, #8]
 80080d6:	4b73      	ldr	r3, [pc, #460]	; (80082a4 <tcp_receive+0x968>)
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	899b      	ldrh	r3, [r3, #12]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fb fd6b 	bl	8003bba <lwip_htons>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <tcp_receive+0x7b6>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <tcp_receive+0x7b8>
 80080f2:	2300      	movs	r3, #0
 80080f4:	4423      	add	r3, r4
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	4b6b      	ldr	r3, [pc, #428]	; (80082a8 <tcp_receive+0x96c>)
 80080fa:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008100:	4b69      	ldr	r3, [pc, #420]	; (80082a8 <tcp_receive+0x96c>)
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d26e      	bcs.n	80081e6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008108:	4b66      	ldr	r3, [pc, #408]	; (80082a4 <tcp_receive+0x968>)
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	899b      	ldrh	r3, [r3, #12]
 800810e:	b29b      	uxth	r3, r3
 8008110:	4618      	mov	r0, r3
 8008112:	f7fb fd52 	bl	8003bba <lwip_htons>
 8008116:	4603      	mov	r3, r0
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01b      	beq.n	8008158 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008120:	4b60      	ldr	r3, [pc, #384]	; (80082a4 <tcp_receive+0x968>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	899b      	ldrh	r3, [r3, #12]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800812c:	b29c      	uxth	r4, r3
 800812e:	4b5d      	ldr	r3, [pc, #372]	; (80082a4 <tcp_receive+0x968>)
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	899b      	ldrh	r3, [r3, #12]
 8008134:	b29b      	uxth	r3, r3
 8008136:	4618      	mov	r0, r3
 8008138:	f7fb fd3f 	bl	8003bba <lwip_htons>
 800813c:	4603      	mov	r3, r0
 800813e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008142:	b29b      	uxth	r3, r3
 8008144:	4618      	mov	r0, r3
 8008146:	f7fb fd38 	bl	8003bba <lwip_htons>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	4b55      	ldr	r3, [pc, #340]	; (80082a4 <tcp_receive+0x968>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	4322      	orrs	r2, r4
 8008154:	b292      	uxth	r2, r2
 8008156:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800815c:	4b51      	ldr	r3, [pc, #324]	; (80082a4 <tcp_receive+0x968>)
 800815e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008160:	4b50      	ldr	r3, [pc, #320]	; (80082a4 <tcp_receive+0x968>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	899b      	ldrh	r3, [r3, #12]
 8008166:	b29b      	uxth	r3, r3
 8008168:	4618      	mov	r0, r3
 800816a:	f7fb fd26 	bl	8003bba <lwip_htons>
 800816e:	4603      	mov	r3, r0
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <tcp_receive+0x848>
            inseg.len -= 1;
 8008178:	4b4a      	ldr	r3, [pc, #296]	; (80082a4 <tcp_receive+0x968>)
 800817a:	891b      	ldrh	r3, [r3, #8]
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	4b48      	ldr	r3, [pc, #288]	; (80082a4 <tcp_receive+0x968>)
 8008182:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008184:	4b47      	ldr	r3, [pc, #284]	; (80082a4 <tcp_receive+0x968>)
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	4b46      	ldr	r3, [pc, #280]	; (80082a4 <tcp_receive+0x968>)
 800818a:	891b      	ldrh	r3, [r3, #8]
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fc fca8 	bl	8004ae4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008194:	4b43      	ldr	r3, [pc, #268]	; (80082a4 <tcp_receive+0x968>)
 8008196:	891c      	ldrh	r4, [r3, #8]
 8008198:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <tcp_receive+0x968>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	899b      	ldrh	r3, [r3, #12]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fb fd0a 	bl	8003bba <lwip_htons>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <tcp_receive+0x878>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <tcp_receive+0x87a>
 80081b4:	2300      	movs	r3, #0
 80081b6:	4423      	add	r3, r4
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	4b3b      	ldr	r3, [pc, #236]	; (80082a8 <tcp_receive+0x96c>)
 80081bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80081be:	4b3a      	ldr	r3, [pc, #232]	; (80082a8 <tcp_receive+0x96c>)
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	4b36      	ldr	r3, [pc, #216]	; (80082a0 <tcp_receive+0x964>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	441a      	add	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ce:	6879      	ldr	r1, [r7, #4]
 80081d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80081d2:	440b      	add	r3, r1
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d006      	beq.n	80081e6 <tcp_receive+0x8aa>
 80081d8:	4b34      	ldr	r3, [pc, #208]	; (80082ac <tcp_receive+0x970>)
 80081da:	f240 527f 	movw	r2, #1407	; 0x57f
 80081de:	4934      	ldr	r1, [pc, #208]	; (80082b0 <tcp_receive+0x974>)
 80081e0:	4834      	ldr	r0, [pc, #208]	; (80082b4 <tcp_receive+0x978>)
 80081e2:	f006 f981 	bl	800e4e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 80e1 	beq.w	80083b2 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80081f0:	4b2c      	ldr	r3, [pc, #176]	; (80082a4 <tcp_receive+0x968>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	899b      	ldrh	r3, [r3, #12]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fb fcde 	bl	8003bba <lwip_htons>
 80081fe:	4603      	mov	r3, r0
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008208:	e00a      	b.n	8008220 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800821a:	68b8      	ldr	r0, [r7, #8]
 800821c:	f7fd ff2d 	bl	800607a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <tcp_receive+0x8ce>
 8008228:	e0c3      	b.n	80083b2 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008230:	e04f      	b.n	80082d2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	899b      	ldrh	r3, [r3, #12]
 8008238:	b29b      	uxth	r3, r3
 800823a:	4618      	mov	r0, r3
 800823c:	f7fb fcbd 	bl	8003bba <lwip_htons>
 8008240:	4603      	mov	r3, r0
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d03b      	beq.n	80082c2 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800824a:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <tcp_receive+0x968>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	899b      	ldrh	r3, [r3, #12]
 8008250:	b29b      	uxth	r3, r3
 8008252:	4618      	mov	r0, r3
 8008254:	f7fb fcb1 	bl	8003bba <lwip_htons>
 8008258:	4603      	mov	r3, r0
 800825a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800825e:	2b00      	cmp	r3, #0
 8008260:	d12f      	bne.n	80082c2 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008262:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <tcp_receive+0x968>)
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	899b      	ldrh	r3, [r3, #12]
 8008268:	b29c      	uxth	r4, r3
 800826a:	2001      	movs	r0, #1
 800826c:	f7fb fca5 	bl	8003bba <lwip_htons>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
 8008274:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <tcp_receive+0x968>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	4322      	orrs	r2, r4
 800827a:	b292      	uxth	r2, r2
 800827c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <tcp_receive+0x968>)
 8008280:	891c      	ldrh	r4, [r3, #8]
 8008282:	4b08      	ldr	r3, [pc, #32]	; (80082a4 <tcp_receive+0x968>)
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	899b      	ldrh	r3, [r3, #12]
 8008288:	b29b      	uxth	r3, r3
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb fc95 	bl	8003bba <lwip_htons>
 8008290:	4603      	mov	r3, r0
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <tcp_receive+0x97c>
 800829a:	2301      	movs	r3, #1
 800829c:	e00d      	b.n	80082ba <tcp_receive+0x97e>
 800829e:	bf00      	nop
 80082a0:	200000f0 	.word	0x200000f0
 80082a4:	200000d0 	.word	0x200000d0
 80082a8:	200000fa 	.word	0x200000fa
 80082ac:	08010078 	.word	0x08010078
 80082b0:	08010344 	.word	0x08010344
 80082b4:	080100bc 	.word	0x080100bc
 80082b8:	2300      	movs	r3, #0
 80082ba:	4423      	add	r3, r4
 80082bc:	b29a      	uxth	r2, r3
 80082be:	4b95      	ldr	r3, [pc, #596]	; (8008514 <tcp_receive+0xbd8>)
 80082c0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 80082cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082ce:	f7fd fed4 	bl	800607a <tcp_seg_free>
            while (next &&
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00e      	beq.n	80082f6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80082d8:	4b8e      	ldr	r3, [pc, #568]	; (8008514 <tcp_receive+0xbd8>)
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	4b8e      	ldr	r3, [pc, #568]	; (8008518 <tcp_receive+0xbdc>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	441a      	add	r2, r3
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ec:	8909      	ldrh	r1, [r1, #8]
 80082ee:	440b      	add	r3, r1
 80082f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da9d      	bge.n	8008232 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d057      	beq.n	80083ac <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80082fc:	4b85      	ldr	r3, [pc, #532]	; (8008514 <tcp_receive+0xbd8>)
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	4b85      	ldr	r3, [pc, #532]	; (8008518 <tcp_receive+0xbdc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	441a      	add	r2, r3
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008310:	2b00      	cmp	r3, #0
 8008312:	dd4b      	ble.n	80083ac <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	b29a      	uxth	r2, r3
 800831c:	4b7e      	ldr	r3, [pc, #504]	; (8008518 <tcp_receive+0xbdc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	b29a      	uxth	r2, r3
 8008326:	4b7d      	ldr	r3, [pc, #500]	; (800851c <tcp_receive+0xbe0>)
 8008328:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800832a:	4b7c      	ldr	r3, [pc, #496]	; (800851c <tcp_receive+0xbe0>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	899b      	ldrh	r3, [r3, #12]
 8008330:	b29b      	uxth	r3, r3
 8008332:	4618      	mov	r0, r3
 8008334:	f7fb fc41 	bl	8003bba <lwip_htons>
 8008338:	4603      	mov	r3, r0
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <tcp_receive+0xa12>
                inseg.len -= 1;
 8008342:	4b76      	ldr	r3, [pc, #472]	; (800851c <tcp_receive+0xbe0>)
 8008344:	891b      	ldrh	r3, [r3, #8]
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	4b74      	ldr	r3, [pc, #464]	; (800851c <tcp_receive+0xbe0>)
 800834c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800834e:	4b73      	ldr	r3, [pc, #460]	; (800851c <tcp_receive+0xbe0>)
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	4b72      	ldr	r3, [pc, #456]	; (800851c <tcp_receive+0xbe0>)
 8008354:	891b      	ldrh	r3, [r3, #8]
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7fc fbc3 	bl	8004ae4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800835e:	4b6f      	ldr	r3, [pc, #444]	; (800851c <tcp_receive+0xbe0>)
 8008360:	891c      	ldrh	r4, [r3, #8]
 8008362:	4b6e      	ldr	r3, [pc, #440]	; (800851c <tcp_receive+0xbe0>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	899b      	ldrh	r3, [r3, #12]
 8008368:	b29b      	uxth	r3, r3
 800836a:	4618      	mov	r0, r3
 800836c:	f7fb fc25 	bl	8003bba <lwip_htons>
 8008370:	4603      	mov	r3, r0
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <tcp_receive+0xa42>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <tcp_receive+0xa44>
 800837e:	2300      	movs	r3, #0
 8008380:	4423      	add	r3, r4
 8008382:	b29a      	uxth	r2, r3
 8008384:	4b63      	ldr	r3, [pc, #396]	; (8008514 <tcp_receive+0xbd8>)
 8008386:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008388:	4b62      	ldr	r3, [pc, #392]	; (8008514 <tcp_receive+0xbd8>)
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	461a      	mov	r2, r3
 800838e:	4b62      	ldr	r3, [pc, #392]	; (8008518 <tcp_receive+0xbdc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	441a      	add	r2, r3
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d006      	beq.n	80083ac <tcp_receive+0xa70>
 800839e:	4b60      	ldr	r3, [pc, #384]	; (8008520 <tcp_receive+0xbe4>)
 80083a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80083a4:	495f      	ldr	r1, [pc, #380]	; (8008524 <tcp_receive+0xbe8>)
 80083a6:	4860      	ldr	r0, [pc, #384]	; (8008528 <tcp_receive+0xbec>)
 80083a8:	f006 f89e 	bl	800e4e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083b0:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80083b2:	4b58      	ldr	r3, [pc, #352]	; (8008514 <tcp_receive+0xbd8>)
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	4b57      	ldr	r3, [pc, #348]	; (8008518 <tcp_receive+0xbdc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	441a      	add	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80083c6:	4b53      	ldr	r3, [pc, #332]	; (8008514 <tcp_receive+0xbd8>)
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d206      	bcs.n	80083dc <tcp_receive+0xaa0>
 80083ce:	4b54      	ldr	r3, [pc, #336]	; (8008520 <tcp_receive+0xbe4>)
 80083d0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80083d4:	4955      	ldr	r1, [pc, #340]	; (800852c <tcp_receive+0xbf0>)
 80083d6:	4854      	ldr	r0, [pc, #336]	; (8008528 <tcp_receive+0xbec>)
 80083d8:	f006 f886 	bl	800e4e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80083e0:	4b4c      	ldr	r3, [pc, #304]	; (8008514 <tcp_receive+0xbd8>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fd f9fb 	bl	80057e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80083f2:	4b4a      	ldr	r3, [pc, #296]	; (800851c <tcp_receive+0xbe0>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	891b      	ldrh	r3, [r3, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d006      	beq.n	800840a <tcp_receive+0xace>
          recv_data = inseg.p;
 80083fc:	4b47      	ldr	r3, [pc, #284]	; (800851c <tcp_receive+0xbe0>)
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	4a4b      	ldr	r2, [pc, #300]	; (8008530 <tcp_receive+0xbf4>)
 8008402:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <tcp_receive+0xbe0>)
 8008406:	2200      	movs	r2, #0
 8008408:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800840a:	4b44      	ldr	r3, [pc, #272]	; (800851c <tcp_receive+0xbe0>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	899b      	ldrh	r3, [r3, #12]
 8008410:	b29b      	uxth	r3, r3
 8008412:	4618      	mov	r0, r3
 8008414:	f7fb fbd1 	bl	8003bba <lwip_htons>
 8008418:	4603      	mov	r3, r0
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 80b4 	beq.w	800858c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008424:	4b43      	ldr	r3, [pc, #268]	; (8008534 <tcp_receive+0xbf8>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f043 0320 	orr.w	r3, r3, #32
 800842c:	b2da      	uxtb	r2, r3
 800842e:	4b41      	ldr	r3, [pc, #260]	; (8008534 <tcp_receive+0xbf8>)
 8008430:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008432:	e0ab      	b.n	800858c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	4a35      	ldr	r2, [pc, #212]	; (8008518 <tcp_receive+0xbdc>)
 8008444:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	891b      	ldrh	r3, [r3, #8]
 800844a:	461c      	mov	r4, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	899b      	ldrh	r3, [r3, #12]
 8008452:	b29b      	uxth	r3, r3
 8008454:	4618      	mov	r0, r3
 8008456:	f7fb fbb0 	bl	8003bba <lwip_htons>
 800845a:	4603      	mov	r3, r0
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <tcp_receive+0xb2c>
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <tcp_receive+0xb2e>
 8008468:	2300      	movs	r3, #0
 800846a:	191a      	adds	r2, r3, r4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	441a      	add	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800847a:	461c      	mov	r4, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	891b      	ldrh	r3, [r3, #8]
 8008480:	461d      	mov	r5, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	899b      	ldrh	r3, [r3, #12]
 8008488:	b29b      	uxth	r3, r3
 800848a:	4618      	mov	r0, r3
 800848c:	f7fb fb95 	bl	8003bba <lwip_htons>
 8008490:	4603      	mov	r3, r0
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <tcp_receive+0xb62>
 800849a:	2301      	movs	r3, #1
 800849c:	e000      	b.n	80084a0 <tcp_receive+0xb64>
 800849e:	2300      	movs	r3, #0
 80084a0:	442b      	add	r3, r5
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d206      	bcs.n	80084b4 <tcp_receive+0xb78>
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <tcp_receive+0xbe4>)
 80084a8:	f240 52de 	movw	r2, #1502	; 0x5de
 80084ac:	4922      	ldr	r1, [pc, #136]	; (8008538 <tcp_receive+0xbfc>)
 80084ae:	481e      	ldr	r0, [pc, #120]	; (8008528 <tcp_receive+0xbec>)
 80084b0:	f006 f81a 	bl	800e4e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	891b      	ldrh	r3, [r3, #8]
 80084b8:	461c      	mov	r4, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	899b      	ldrh	r3, [r3, #12]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fb fb79 	bl	8003bba <lwip_htons>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <tcp_receive+0xb9a>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <tcp_receive+0xb9c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	1919      	adds	r1, r3, r4
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80084de:	b28b      	uxth	r3, r1
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fd f97d 	bl	80057e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	891b      	ldrh	r3, [r3, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d028      	beq.n	800854a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <tcp_receive+0xbf4>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01d      	beq.n	800853c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <tcp_receive+0xbf4>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fc fd2c 	bl	8004f68 <pbuf_cat>
 8008510:	e018      	b.n	8008544 <tcp_receive+0xc08>
 8008512:	bf00      	nop
 8008514:	200000fa 	.word	0x200000fa
 8008518:	200000f0 	.word	0x200000f0
 800851c:	200000d0 	.word	0x200000d0
 8008520:	08010078 	.word	0x08010078
 8008524:	0801037c 	.word	0x0801037c
 8008528:	080100bc 	.word	0x080100bc
 800852c:	080103b8 	.word	0x080103b8
 8008530:	20000100 	.word	0x20000100
 8008534:	200000fd 	.word	0x200000fd
 8008538:	080103d8 	.word	0x080103d8
            } else {
              recv_data = cseg->p;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	4a71      	ldr	r2, [pc, #452]	; (8008708 <tcp_receive+0xdcc>)
 8008542:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	899b      	ldrh	r3, [r3, #12]
 8008550:	b29b      	uxth	r3, r3
 8008552:	4618      	mov	r0, r3
 8008554:	f7fb fb31 	bl	8003bba <lwip_htons>
 8008558:	4603      	mov	r3, r0
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008562:	4b6a      	ldr	r3, [pc, #424]	; (800870c <tcp_receive+0xdd0>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f043 0320 	orr.w	r3, r3, #32
 800856a:	b2da      	uxtb	r2, r3
 800856c:	4b67      	ldr	r3, [pc, #412]	; (800870c <tcp_receive+0xdd0>)
 800856e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	7d1b      	ldrb	r3, [r3, #20]
 8008574:	2b04      	cmp	r3, #4
 8008576:	d102      	bne.n	800857e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2207      	movs	r2, #7
 800857c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7fd fd77 	bl	800607a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	2b00      	cmp	r3, #0
 8008592:	d008      	beq.n	80085a6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80085a0:	429a      	cmp	r2, r3
 80085a2:	f43f af47 	beq.w	8008434 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7e9b      	ldrb	r3, [r3, #26]
 80085aa:	f003 0301 	and.w	r3, r3, #1
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <tcp_receive+0xc94>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7e9b      	ldrb	r3, [r3, #26]
 80085b6:	f023 0301 	bic.w	r3, r3, #1
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	769a      	strb	r2, [r3, #26]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	7e9b      	ldrb	r3, [r3, #26]
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80085ce:	e181      	b.n	80088d4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7e9b      	ldrb	r3, [r3, #26]
 80085d4:	f043 0301 	orr.w	r3, r3, #1
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80085de:	e179      	b.n	80088d4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fc93 	bl	8008f0c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80085ee:	4848      	ldr	r0, [pc, #288]	; (8008710 <tcp_receive+0xdd4>)
 80085f0:	f7fd fd5b 	bl	80060aa <tcp_seg_copy>
 80085f4:	4602      	mov	r2, r0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 80085fa:	e16b      	b.n	80088d4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80085fc:	2300      	movs	r3, #0
 80085fe:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008606:	e150      	b.n	80088aa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8008608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b41      	ldr	r3, [pc, #260]	; (8008714 <tcp_receive+0xdd8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	429a      	cmp	r2, r3
 8008614:	d11d      	bne.n	8008652 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008616:	4b3e      	ldr	r3, [pc, #248]	; (8008710 <tcp_receive+0xdd4>)
 8008618:	891a      	ldrh	r2, [r3, #8]
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	891b      	ldrh	r3, [r3, #8]
 800861e:	429a      	cmp	r2, r3
 8008620:	f240 8148 	bls.w	80088b4 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008624:	483a      	ldr	r0, [pc, #232]	; (8008710 <tcp_receive+0xdd4>)
 8008626:	f7fd fd40 	bl	80060aa <tcp_seg_copy>
 800862a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 8142 	beq.w	80088b8 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <tcp_receive+0xd06>
                    prev->next = cseg;
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	e002      	b.n	8008648 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff f900 	bl	8007850 <tcp_oos_insert_segment>
                }
                break;
 8008650:	e132      	b.n	80088b8 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	2b00      	cmp	r3, #0
 8008656:	d117      	bne.n	8008688 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008658:	4b2e      	ldr	r3, [pc, #184]	; (8008714 <tcp_receive+0xdd8>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	da57      	bge.n	8008718 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008668:	4829      	ldr	r0, [pc, #164]	; (8008710 <tcp_receive+0xdd4>)
 800866a:	f7fd fd1e 	bl	80060aa <tcp_seg_copy>
 800866e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 8122 	beq.w	80088bc <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800867e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f7ff f8e5 	bl	8007850 <tcp_oos_insert_segment>
                  }
                  break;
 8008686:	e119      	b.n	80088bc <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008688:	4b22      	ldr	r3, [pc, #136]	; (8008714 <tcp_receive+0xdd8>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	3b01      	subs	r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	db3e      	blt.n	8008718 <tcp_receive+0xddc>
 800869a:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <tcp_receive+0xdd8>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	3301      	adds	r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dc35      	bgt.n	8008718 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80086ac:	4818      	ldr	r0, [pc, #96]	; (8008710 <tcp_receive+0xdd4>)
 80086ae:	f7fd fcfc 	bl	80060aa <tcp_seg_copy>
 80086b2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8102 	beq.w	80088c0 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c4:	8912      	ldrh	r2, [r2, #8]
 80086c6:	441a      	add	r2, r3
 80086c8:	4b12      	ldr	r3, [pc, #72]	; (8008714 <tcp_receive+0xdd8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd12      	ble.n	80086f8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <tcp_receive+0xdd8>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	891b      	ldrh	r3, [r3, #8]
 80086f0:	4619      	mov	r1, r3
 80086f2:	4610      	mov	r0, r2
 80086f4:	f7fc f9f6 	bl	8004ae4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80086fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff f8a5 	bl	8007850 <tcp_oos_insert_segment>
                  }
                  break;
 8008706:	e0db      	b.n	80088c0 <tcp_receive+0xf84>
 8008708:	20000100 	.word	0x20000100
 800870c:	200000fd 	.word	0x200000fd
 8008710:	200000d0 	.word	0x200000d0
 8008714:	200000f0 	.word	0x200000f0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 80bf 	bne.w	80088a0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008722:	4b7c      	ldr	r3, [pc, #496]	; (8008914 <tcp_receive+0xfd8>)
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800872e:	2b00      	cmp	r3, #0
 8008730:	f340 80b6 	ble.w	80088a0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	899b      	ldrh	r3, [r3, #12]
 800873a:	b29b      	uxth	r3, r3
 800873c:	4618      	mov	r0, r3
 800873e:	f7fb fa3c 	bl	8003bba <lwip_htons>
 8008742:	4603      	mov	r3, r0
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 80bb 	bne.w	80088c4 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800874e:	4872      	ldr	r0, [pc, #456]	; (8008918 <tcp_receive+0xfdc>)
 8008750:	f7fd fcab 	bl	80060aa <tcp_seg_copy>
 8008754:	4602      	mov	r2, r0
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80b2 	beq.w	80088c8 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800876c:	8912      	ldrh	r2, [r2, #8]
 800876e:	441a      	add	r2, r3
 8008770:	4b68      	ldr	r3, [pc, #416]	; (8008914 <tcp_receive+0xfd8>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	dd12      	ble.n	80087a0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800877a:	4b66      	ldr	r3, [pc, #408]	; (8008914 <tcp_receive+0xfd8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	b29a      	uxth	r2, r3
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b29b      	uxth	r3, r3
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	b29a      	uxth	r2, r3
 800878c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	891b      	ldrh	r3, [r3, #8]
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fc f9a2 	bl	8004ae4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80087a0:	4b5e      	ldr	r3, [pc, #376]	; (800891c <tcp_receive+0xfe0>)
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	4b5b      	ldr	r3, [pc, #364]	; (8008914 <tcp_receive+0xfd8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	441a      	add	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087b4:	440b      	add	r3, r1
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f340 8085 	ble.w	80088c8 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	899b      	ldrh	r3, [r3, #12]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fb f9f6 	bl	8003bba <lwip_htons>
 80087ce:	4603      	mov	r3, r0
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	899b      	ldrh	r3, [r3, #12]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80087e6:	b29c      	uxth	r4, r3
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	899b      	ldrh	r3, [r3, #12]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fb f9e1 	bl	8003bba <lwip_htons>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4618      	mov	r0, r3
 8008802:	f7fb f9da 	bl	8003bba <lwip_htons>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	4322      	orrs	r2, r4
 8008812:	b292      	uxth	r2, r2
 8008814:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008820:	4413      	add	r3, r2
 8008822:	b299      	uxth	r1, r3
 8008824:	4b3b      	ldr	r3, [pc, #236]	; (8008914 <tcp_receive+0xfd8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	b29a      	uxth	r2, r3
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	1a8a      	subs	r2, r1, r2
 8008830:	b292      	uxth	r2, r2
 8008832:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	891b      	ldrh	r3, [r3, #8]
 8008840:	4619      	mov	r1, r3
 8008842:	4610      	mov	r0, r2
 8008844:	f7fc f94e 	bl	8004ae4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	891c      	ldrh	r4, [r3, #8]
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	899b      	ldrh	r3, [r3, #12]
 8008856:	b29b      	uxth	r3, r3
 8008858:	4618      	mov	r0, r3
 800885a:	f7fb f9ae 	bl	8003bba <lwip_htons>
 800885e:	4603      	mov	r3, r0
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <tcp_receive+0xf30>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <tcp_receive+0xf32>
 800886c:	2300      	movs	r3, #0
 800886e:	4423      	add	r3, r4
 8008870:	b29a      	uxth	r2, r3
 8008872:	4b2a      	ldr	r3, [pc, #168]	; (800891c <tcp_receive+0xfe0>)
 8008874:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008876:	4b29      	ldr	r3, [pc, #164]	; (800891c <tcp_receive+0xfe0>)
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	4b25      	ldr	r3, [pc, #148]	; (8008914 <tcp_receive+0xfd8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	441a      	add	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800888a:	440b      	add	r3, r1
 800888c:	429a      	cmp	r2, r3
 800888e:	d01b      	beq.n	80088c8 <tcp_receive+0xf8c>
 8008890:	4b23      	ldr	r3, [pc, #140]	; (8008920 <tcp_receive+0xfe4>)
 8008892:	f240 627b 	movw	r2, #1659	; 0x67b
 8008896:	4923      	ldr	r1, [pc, #140]	; (8008924 <tcp_receive+0xfe8>)
 8008898:	4823      	ldr	r0, [pc, #140]	; (8008928 <tcp_receive+0xfec>)
 800889a:	f005 fe25 	bl	800e4e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800889e:	e013      	b.n	80088c8 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f47f aeab 	bne.w	8008608 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80088b2:	e00f      	b.n	80088d4 <tcp_receive+0xf98>
                break;
 80088b4:	bf00      	nop
 80088b6:	e00d      	b.n	80088d4 <tcp_receive+0xf98>
                break;
 80088b8:	bf00      	nop
 80088ba:	e00b      	b.n	80088d4 <tcp_receive+0xf98>
                  break;
 80088bc:	bf00      	nop
 80088be:	e009      	b.n	80088d4 <tcp_receive+0xf98>
                  break;
 80088c0:	bf00      	nop
 80088c2:	e007      	b.n	80088d4 <tcp_receive+0xf98>
                  break;
 80088c4:	bf00      	nop
 80088c6:	e005      	b.n	80088d4 <tcp_receive+0xf98>
                break;
 80088c8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80088ca:	e003      	b.n	80088d4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fb1d 	bl	8008f0c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80088d2:	e01a      	b.n	800890a <tcp_receive+0xfce>
 80088d4:	e019      	b.n	800890a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <tcp_receive+0xfd8>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	db0a      	blt.n	80088fa <tcp_receive+0xfbe>
 80088e4:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <tcp_receive+0xfd8>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80088f0:	440b      	add	r3, r1
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	3301      	adds	r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd07      	ble.n	800890a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7e9b      	ldrb	r3, [r3, #26]
 80088fe:	f043 0302 	orr.w	r3, r3, #2
 8008902:	b2da      	uxtb	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008908:	e7ff      	b.n	800890a <tcp_receive+0xfce>
 800890a:	bf00      	nop
 800890c:	3734      	adds	r7, #52	; 0x34
 800890e:	46bd      	mov	sp, r7
 8008910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008912:	bf00      	nop
 8008914:	200000f0 	.word	0x200000f0
 8008918:	200000d0 	.word	0x200000d0
 800891c:	200000fa 	.word	0x200000fa
 8008920:	08010078 	.word	0x08010078
 8008924:	08010344 	.word	0x08010344
 8008928:	080100bc 	.word	0x080100bc

0800892c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008932:	4b18      	ldr	r3, [pc, #96]	; (8008994 <tcp_getoptbyte+0x68>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <tcp_getoptbyte+0x1a>
 800893a:	4b17      	ldr	r3, [pc, #92]	; (8008998 <tcp_getoptbyte+0x6c>)
 800893c:	881a      	ldrh	r2, [r3, #0]
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <tcp_getoptbyte+0x70>)
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d20e      	bcs.n	8008964 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <tcp_getoptbyte+0x74>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3314      	adds	r3, #20
 800894c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <tcp_getoptbyte+0x6c>)
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	b291      	uxth	r1, r2
 8008956:	4a10      	ldr	r2, [pc, #64]	; (8008998 <tcp_getoptbyte+0x6c>)
 8008958:	8011      	strh	r1, [r2, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	4413      	add	r3, r2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	e010      	b.n	8008986 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008964:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <tcp_getoptbyte+0x6c>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	b291      	uxth	r1, r2
 800896c:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <tcp_getoptbyte+0x6c>)
 800896e:	8011      	strh	r1, [r2, #0]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	4b0a      	ldr	r3, [pc, #40]	; (800899c <tcp_getoptbyte+0x70>)
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b2db      	uxtb	r3, r3
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <tcp_getoptbyte+0x68>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	4413      	add	r3, r2
 8008984:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	200000e8 	.word	0x200000e8
 8008998:	200000ec 	.word	0x200000ec
 800899c:	200000e6 	.word	0x200000e6
 80089a0:	200000e0 	.word	0x200000e0

080089a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80089ac:	4b2d      	ldr	r3, [pc, #180]	; (8008a64 <tcp_parseopt+0xc0>)
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d053      	beq.n	8008a5c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80089b4:	4b2c      	ldr	r3, [pc, #176]	; (8008a68 <tcp_parseopt+0xc4>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e043      	b.n	8008a44 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80089bc:	f7ff ffb6 	bl	800892c <tcp_getoptbyte>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d03c      	beq.n	8008a44 <tcp_parseopt+0xa0>
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d002      	beq.n	80089d4 <tcp_parseopt+0x30>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d03f      	beq.n	8008a52 <tcp_parseopt+0xae>
 80089d2:	e026      	b.n	8008a22 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80089d4:	f7ff ffaa 	bl	800892c <tcp_getoptbyte>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d13b      	bne.n	8008a56 <tcp_parseopt+0xb2>
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <tcp_parseopt+0xc4>)
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	3302      	adds	r3, #2
 80089e4:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <tcp_parseopt+0xc0>)
 80089e6:	8812      	ldrh	r2, [r2, #0]
 80089e8:	4293      	cmp	r3, r2
 80089ea:	dc34      	bgt.n	8008a56 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80089ec:	f7ff ff9e 	bl	800892c <tcp_getoptbyte>
 80089f0:	4603      	mov	r3, r0
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80089f8:	f7ff ff98 	bl	800892c <tcp_getoptbyte>
 80089fc:	4603      	mov	r3, r0
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	89bb      	ldrh	r3, [r7, #12]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008a06:	89bb      	ldrh	r3, [r7, #12]
 8008a08:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008a0c:	d804      	bhi.n	8008a18 <tcp_parseopt+0x74>
 8008a0e:	89bb      	ldrh	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <tcp_parseopt+0x74>
 8008a14:	89ba      	ldrh	r2, [r7, #12]
 8008a16:	e001      	b.n	8008a1c <tcp_parseopt+0x78>
 8008a18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008a20:	e010      	b.n	8008a44 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008a22:	f7ff ff83 	bl	800892c <tcp_getoptbyte>
 8008a26:	4603      	mov	r3, r0
 8008a28:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d914      	bls.n	8008a5a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <tcp_parseopt+0xc4>)
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	4413      	add	r3, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	3b02      	subs	r3, #2
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <tcp_parseopt+0xc4>)
 8008a42:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008a44:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <tcp_parseopt+0xc4>)
 8008a46:	881a      	ldrh	r2, [r3, #0]
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <tcp_parseopt+0xc0>)
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d3b5      	bcc.n	80089bc <tcp_parseopt+0x18>
 8008a50:	e004      	b.n	8008a5c <tcp_parseopt+0xb8>
        return;
 8008a52:	bf00      	nop
 8008a54:	e002      	b.n	8008a5c <tcp_parseopt+0xb8>
          return;
 8008a56:	bf00      	nop
 8008a58:	e000      	b.n	8008a5c <tcp_parseopt+0xb8>
          return;
 8008a5a:	bf00      	nop
      }
    }
  }
}
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200000e4 	.word	0x200000e4
 8008a68:	200000ec 	.word	0x200000ec

08008a6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <tcp_trigger_input_pcb_close+0x1c>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f043 0310 	orr.w	r3, r3, #16
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <tcp_trigger_input_pcb_close+0x1c>)
 8008a7c:	701a      	strb	r2, [r3, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	200000fd 	.word	0x200000fd

08008a8c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	607b      	str	r3, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	817b      	strh	r3, [r7, #10]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008a9e:	897a      	ldrh	r2, [r7, #10]
 8008aa0:	893b      	ldrh	r3, [r7, #8]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2200      	movs	r2, #0
 8008aac:	4619      	mov	r1, r3
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f7fb fe1a 	bl	80046e8 <pbuf_alloc>
 8008ab4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d057      	beq.n	8008b6c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	895b      	ldrh	r3, [r3, #10]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	897b      	ldrh	r3, [r7, #10]
 8008ac4:	3314      	adds	r3, #20
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	da05      	bge.n	8008ad6 <tcp_output_alloc_header+0x4a>
 8008aca:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <tcp_output_alloc_header+0xec>)
 8008acc:	2273      	movs	r2, #115	; 0x73
 8008ace:	492b      	ldr	r1, [pc, #172]	; (8008b7c <tcp_output_alloc_header+0xf0>)
 8008ad0:	482b      	ldr	r0, [pc, #172]	; (8008b80 <tcp_output_alloc_header+0xf4>)
 8008ad2:	f005 fd09 	bl	800e4e8 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8adb      	ldrh	r3, [r3, #22]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fb f86a 	bl	8003bba <lwip_htons>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461a      	mov	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8b1b      	ldrh	r3, [r3, #24]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fb f861 	bl	8003bba <lwip_htons>
 8008af8:	4603      	mov	r3, r0
 8008afa:	461a      	mov	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fb f863 	bl	8003bd6 <lwip_htonl>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008b16:	897b      	ldrh	r3, [r7, #10]
 8008b18:	089b      	lsrs	r3, r3, #2
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	3305      	adds	r3, #5
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	031b      	lsls	r3, r3, #12
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	f043 0310 	orr.w	r3, r3, #16
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fb f845 	bl	8003bba <lwip_htons>
 8008b30:	4603      	mov	r3, r0
 8008b32:	461a      	mov	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fb f83c 	bl	8003bba <lwip_htons>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	741a      	strb	r2, [r3, #16]
 8008b50:	2200      	movs	r2, #0
 8008b52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2200      	movs	r2, #0
 8008b58:	749a      	strb	r2, [r3, #18]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8008b6c:	697b      	ldr	r3, [r7, #20]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	08010400 	.word	0x08010400
 8008b7c:	08010434 	.word	0x08010434
 8008b80:	08010464 	.word	0x08010464

08008b84 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d02d      	beq.n	8008bf0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	e002      	b.n	8008ba2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1f8      	bne.n	8008b9c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	899b      	ldrh	r3, [r3, #12]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fb f801 	bl	8003bba <lwip_htons>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d116      	bne.n	8008bf0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	899b      	ldrh	r3, [r3, #12]
 8008bc8:	b29c      	uxth	r4, r3
 8008bca:	2001      	movs	r0, #1
 8008bcc:	f7fa fff5 	bl	8003bba <lwip_htons>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	4322      	orrs	r2, r4
 8008bda:	b292      	uxth	r2, r2
 8008bdc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	7e9b      	ldrb	r3, [r3, #26]
 8008be2:	f043 0320 	orr.w	r3, r3, #32
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	e004      	b.n	8008bfa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f88e 	bl	8008d14 <tcp_enqueue_flags>
 8008bf8:	4603      	mov	r3, r0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd90      	pop	{r4, r7, pc}
	...

08008c04 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	4613      	mov	r3, r2
 8008c12:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008c14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008c22:	2003      	movs	r0, #3
 8008c24:	f7fb fb78 	bl	8004318 <memp_malloc>
 8008c28:	6138      	str	r0, [r7, #16]
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d104      	bne.n	8008c3a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008c30:	68b8      	ldr	r0, [r7, #8]
 8008c32:	f7fc f8cb 	bl	8004dcc <pbuf_free>
    return NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e061      	b.n	8008cfe <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008c40:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	891a      	ldrh	r2, [r3, #8]
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d205      	bcs.n	8008c66 <tcp_create_segment+0x62>
 8008c5a:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <tcp_create_segment+0x104>)
 8008c5c:	22ba      	movs	r2, #186	; 0xba
 8008c5e:	492b      	ldr	r1, [pc, #172]	; (8008d0c <tcp_create_segment+0x108>)
 8008c60:	482b      	ldr	r0, [pc, #172]	; (8008d10 <tcp_create_segment+0x10c>)
 8008c62:	f005 fc41 	bl	800e4e8 <iprintf>
  seg->len = p->tot_len - optlen;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	891a      	ldrh	r2, [r3, #8]
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008c76:	2114      	movs	r1, #20
 8008c78:	68b8      	ldr	r0, [r7, #8]
 8008c7a:	f7fc f883 	bl	8004d84 <pbuf_header>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008c84:	6938      	ldr	r0, [r7, #16]
 8008c86:	f7fd f9f8 	bl	800607a <tcp_seg_free>
    return NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e037      	b.n	8008cfe <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8ada      	ldrh	r2, [r3, #22]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	68dc      	ldr	r4, [r3, #12]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7fa ff8a 	bl	8003bba <lwip_htons>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8b1a      	ldrh	r2, [r3, #24]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	68dc      	ldr	r4, [r3, #12]
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	f7fa ff81 	bl	8003bba <lwip_htons>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	68dc      	ldr	r4, [r3, #12]
 8008cc0:	6838      	ldr	r0, [r7, #0]
 8008cc2:	f7fa ff88 	bl	8003bd6 <lwip_htonl>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	089b      	lsrs	r3, r3, #2
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	3305      	adds	r3, #5
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	031b      	lsls	r3, r3, #12
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	68dc      	ldr	r4, [r3, #12]
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fa ff67 	bl	8003bba <lwip_htons>
 8008cec:	4603      	mov	r3, r0
 8008cee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	749a      	strb	r2, [r3, #18]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	74da      	strb	r2, [r3, #19]
  return seg;
 8008cfc:	693b      	ldr	r3, [r7, #16]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd90      	pop	{r4, r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08010400 	.word	0x08010400
 8008d0c:	0801048c 	.word	0x0801048c
 8008d10:	08010464 	.word	0x08010464

08008d14 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <tcp_enqueue_flags+0x2c>
 8008d32:	4b6f      	ldr	r3, [pc, #444]	; (8008ef0 <tcp_enqueue_flags+0x1dc>)
 8008d34:	f240 321b 	movw	r2, #795	; 0x31b
 8008d38:	496e      	ldr	r1, [pc, #440]	; (8008ef4 <tcp_enqueue_flags+0x1e0>)
 8008d3a:	486f      	ldr	r0, [pc, #444]	; (8008ef8 <tcp_enqueue_flags+0x1e4>)
 8008d3c:	f005 fbd4 	bl	800e4e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d806      	bhi.n	8008d58 <tcp_enqueue_flags+0x44>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d50:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d90e      	bls.n	8008d76 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d109      	bne.n	8008d76 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7e9b      	ldrb	r3, [r3, #26]
 8008d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d74:	e0b7      	b.n	8008ee6 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8008d76:	78fb      	ldrb	r3, [r7, #3]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8008d80:	2301      	movs	r3, #1
 8008d82:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008d84:	7ffb      	ldrb	r3, [r7, #31]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2200      	movs	r2, #0
 8008d96:	4619      	mov	r1, r3
 8008d98:	2000      	movs	r0, #0
 8008d9a:	f7fb fca5 	bl	80046e8 <pbuf_alloc>
 8008d9e:	6138      	str	r0, [r7, #16]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d109      	bne.n	8008dba <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	7e9b      	ldrb	r3, [r3, #26]
 8008daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008db8:	e095      	b.n	8008ee6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	895a      	ldrh	r2, [r3, #10]
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d206      	bcs.n	8008dd4 <tcp_enqueue_flags+0xc0>
 8008dc6:	4b4a      	ldr	r3, [pc, #296]	; (8008ef0 <tcp_enqueue_flags+0x1dc>)
 8008dc8:	f240 3241 	movw	r2, #833	; 0x341
 8008dcc:	494b      	ldr	r1, [pc, #300]	; (8008efc <tcp_enqueue_flags+0x1e8>)
 8008dce:	484a      	ldr	r0, [pc, #296]	; (8008ef8 <tcp_enqueue_flags+0x1e4>)
 8008dd0:	f005 fb8a 	bl	800e4e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	7ffb      	ldrb	r3, [r7, #31]
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	460b      	mov	r3, r1
 8008de0:	6939      	ldr	r1, [r7, #16]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff ff0e 	bl	8008c04 <tcp_create_segment>
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	7e9b      	ldrb	r3, [r3, #26]
 8008df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e02:	e070      	b.n	8008ee6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d006      	beq.n	8008e1e <tcp_enqueue_flags+0x10a>
 8008e10:	4b37      	ldr	r3, [pc, #220]	; (8008ef0 <tcp_enqueue_flags+0x1dc>)
 8008e12:	f240 3249 	movw	r2, #841	; 0x349
 8008e16:	493a      	ldr	r1, [pc, #232]	; (8008f00 <tcp_enqueue_flags+0x1ec>)
 8008e18:	4837      	ldr	r0, [pc, #220]	; (8008ef8 <tcp_enqueue_flags+0x1e4>)
 8008e1a:	f005 fb65 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	891b      	ldrh	r3, [r3, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d006      	beq.n	8008e34 <tcp_enqueue_flags+0x120>
 8008e26:	4b32      	ldr	r3, [pc, #200]	; (8008ef0 <tcp_enqueue_flags+0x1dc>)
 8008e28:	f240 324a 	movw	r2, #842	; 0x34a
 8008e2c:	4935      	ldr	r1, [pc, #212]	; (8008f04 <tcp_enqueue_flags+0x1f0>)
 8008e2e:	4832      	ldr	r0, [pc, #200]	; (8008ef8 <tcp_enqueue_flags+0x1e4>)
 8008e30:	f005 fb5a 	bl	800e4e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d103      	bne.n	8008e44 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	669a      	str	r2, [r3, #104]	; 0x68
 8008e42:	e00d      	b.n	8008e60 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e002      	b.n	8008e52 <tcp_enqueue_flags+0x13e>
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	61bb      	str	r3, [r7, #24]
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1f8      	bne.n	8008e4c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d104      	bne.n	8008e7c <tcp_enqueue_flags+0x168>
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	7e9b      	ldrb	r3, [r3, #26]
 8008e94:	f043 0320 	orr.w	r3, r3, #32
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fc f826 	bl	8004ef4 <pbuf_clen>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb2:	4413      	add	r3, r2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00e      	beq.n	8008ee4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <tcp_enqueue_flags+0x1d0>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <tcp_enqueue_flags+0x1d0>
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <tcp_enqueue_flags+0x1dc>)
 8008ed8:	f240 326d 	movw	r2, #877	; 0x36d
 8008edc:	490a      	ldr	r1, [pc, #40]	; (8008f08 <tcp_enqueue_flags+0x1f4>)
 8008ede:	4806      	ldr	r0, [pc, #24]	; (8008ef8 <tcp_enqueue_flags+0x1e4>)
 8008ee0:	f005 fb02 	bl	800e4e8 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3720      	adds	r7, #32
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	08010400 	.word	0x08010400
 8008ef4:	08010704 	.word	0x08010704
 8008ef8:	08010464 	.word	0x08010464
 8008efc:	0801075c 	.word	0x0801075c
 8008f00:	08010798 	.word	0x08010798
 8008f04:	080107b0 	.word	0x080107b0
 8008f08:	080107dc 	.word	0x080107dc

08008f0c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008f0c:	b590      	push	{r4, r7, lr}
 8008f0e:	b08b      	sub	sp, #44	; 0x2c
 8008f10:	af04      	add	r7, sp, #16
 8008f12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008f18:	7dbb      	ldrb	r3, [r7, #22]
 8008f1a:	b29c      	uxth	r4, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fa fe58 	bl	8003bd6 <lwip_htonl>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff fdad 	bl	8008a8c <tcp_output_alloc_header>
 8008f32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7e9b      	ldrb	r3, [r3, #26]
 8008f3e:	f043 0303 	orr.w	r3, r3, #3
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008f48:	f06f 0301 	mvn.w	r3, #1
 8008f4c:	e036      	b.n	8008fbc <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f004 f900 	bl	800d158 <ip4_route>
 8008f58:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d102      	bne.n	8008f66 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8008f60:	23fc      	movs	r3, #252	; 0xfc
 8008f62:	75fb      	strb	r3, [r7, #23]
 8008f64:	e012      	b.n	8008f8c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	1d18      	adds	r0, r3, #4
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7a9c      	ldrb	r4, [r3, #10]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7a5b      	ldrb	r3, [r3, #9]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	9202      	str	r2, [sp, #8]
 8008f78:	2206      	movs	r2, #6
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4623      	mov	r3, r4
 8008f80:	4602      	mov	r2, r0
 8008f82:	6938      	ldr	r0, [r7, #16]
 8008f84:	f004 faae 	bl	800d4e4 <ip4_output_if>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008f8c:	6938      	ldr	r0, [r7, #16]
 8008f8e:	f7fb ff1d 	bl	8004dcc <pbuf_free>

  if (err != ERR_OK) {
 8008f92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7e9b      	ldrb	r3, [r3, #26]
 8008f9e:	f043 0303 	orr.w	r3, r3, #3
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	769a      	strb	r2, [r3, #26]
 8008fa8:	e006      	b.n	8008fb8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	7e9b      	ldrb	r3, [r3, #26]
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8008fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd90      	pop	{r4, r7, pc}

08008fc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008fc4:	b5b0      	push	{r4, r5, r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	7d1b      	ldrb	r3, [r3, #20]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d106      	bne.n	8008fe2 <tcp_output+0x1e>
 8008fd4:	4b9b      	ldr	r3, [pc, #620]	; (8009244 <tcp_output+0x280>)
 8008fd6:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008fda:	499b      	ldr	r1, [pc, #620]	; (8009248 <tcp_output+0x284>)
 8008fdc:	489b      	ldr	r0, [pc, #620]	; (800924c <tcp_output+0x288>)
 8008fde:	f005 fa83 	bl	800e4e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008fe2:	4b9b      	ldr	r3, [pc, #620]	; (8009250 <tcp_output+0x28c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d101      	bne.n	8008ff0 <tcp_output+0x2c>
    return ERR_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e1cf      	b.n	8009390 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d203      	bcs.n	8009008 <tcp_output+0x44>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009006:	e002      	b.n	800900e <tcp_output+0x4a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800900e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009014:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	7e9b      	ldrb	r3, [r3, #26]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b00      	cmp	r3, #0
 8009020:	d017      	beq.n	8009052 <tcp_output+0x8e>
 8009022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00f      	beq.n	8009048 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4618      	mov	r0, r3
 8009030:	f7fa fdd1 	bl	8003bd6 <lwip_htonl>
 8009034:	4602      	mov	r2, r0
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903e:	8912      	ldrh	r2, [r2, #8]
 8009040:	4413      	add	r3, r2
     (seg == NULL ||
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	429a      	cmp	r2, r3
 8009046:	d204      	bcs.n	8009052 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ff5f 	bl	8008f0c <tcp_send_empty_ack>
 800904e:	4603      	mov	r3, r0
 8009050:	e19e      	b.n	8009390 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009056:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d007      	beq.n	800906e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800905e:	e002      	b.n	8009066 <tcp_output+0xa2>
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	623b      	str	r3, [r7, #32]
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f8      	bne.n	8009060 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f004 f870 	bl	800d158 <ip4_route>
 8009078:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <tcp_output+0xc2>
    return ERR_RTE;
 8009080:	f06f 0303 	mvn.w	r3, #3
 8009084:	e184      	b.n	8009390 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <tcp_output+0xd0>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d111      	bne.n	80090b8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <tcp_output+0xdc>
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	3304      	adds	r3, #4
 800909e:	e000      	b.n	80090a2 <tcp_output+0xde>
 80090a0:	2300      	movs	r3, #0
 80090a2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <tcp_output+0xec>
      return ERR_RTE;
 80090aa:	f06f 0303 	mvn.w	r3, #3
 80090ae:	e16f      	b.n	8009390 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 813e 	beq.w	800933c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fa fd85 	bl	8003bd6 <lwip_htonl>
 80090cc:	4602      	mov	r2, r0
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d6:	8912      	ldrh	r2, [r2, #8]
 80090d8:	4413      	add	r3, r2
  if (seg != NULL &&
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	429a      	cmp	r2, r3
 80090de:	f080 812d 	bcs.w	800933c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 8129 	beq.w	800933c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090f0:	461a      	mov	r2, r3
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	f040 8121 	bne.w	800933c <tcp_output+0x378>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 811c 	bne.w	800933c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 812b 	bne.w	8009366 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009120:	e121      	b.n	8009366 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	899b      	ldrh	r3, [r3, #12]
 8009128:	b29b      	uxth	r3, r3
 800912a:	4618      	mov	r0, r3
 800912c:	f7fa fd45 	bl	8003bba <lwip_htons>
 8009130:	4603      	mov	r3, r0
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d006      	beq.n	8009148 <tcp_output+0x184>
 800913a:	4b42      	ldr	r3, [pc, #264]	; (8009244 <tcp_output+0x280>)
 800913c:	f240 4246 	movw	r2, #1094	; 0x446
 8009140:	4944      	ldr	r1, [pc, #272]	; (8009254 <tcp_output+0x290>)
 8009142:	4842      	ldr	r0, [pc, #264]	; (800924c <tcp_output+0x288>)
 8009144:	f005 f9d0 	bl	800e4e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d01f      	beq.n	8009190 <tcp_output+0x1cc>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	7e9b      	ldrb	r3, [r3, #26]
 8009154:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009158:	2b00      	cmp	r3, #0
 800915a:	d119      	bne.n	8009190 <tcp_output+0x1cc>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <tcp_output+0x1b8>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d110      	bne.n	8009190 <tcp_output+0x1cc>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009172:	891a      	ldrh	r2, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009178:	429a      	cmp	r2, r3
 800917a:	d209      	bcs.n	8009190 <tcp_output+0x1cc>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009182:	2b00      	cmp	r3, #0
 8009184:	d004      	beq.n	8009190 <tcp_output+0x1cc>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800918c:	2b08      	cmp	r3, #8
 800918e:	d901      	bls.n	8009194 <tcp_output+0x1d0>
 8009190:	2301      	movs	r3, #1
 8009192:	e000      	b.n	8009196 <tcp_output+0x1d2>
 8009194:	2300      	movs	r3, #0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7e9b      	ldrb	r3, [r3, #26]
 800919e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 80e1 	beq.w	800936a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	7d1b      	ldrb	r3, [r3, #20]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d00d      	beq.n	80091cc <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	899b      	ldrh	r3, [r3, #12]
 80091b6:	b29c      	uxth	r4, r3
 80091b8:	2010      	movs	r0, #16
 80091ba:	f7fa fcfe 	bl	8003bba <lwip_htons>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	4322      	orrs	r2, r4
 80091c8:	b292      	uxth	r2, r2
 80091ca:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091d2:	f000 f8e1 	bl	8009398 <tcp_output_segment>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80091da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	7e9b      	ldrb	r3, [r3, #26]
 80091e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	769a      	strb	r2, [r3, #26]
      return err;
 80091f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f4:	e0cc      	b.n	8009390 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	7d1b      	ldrb	r3, [r3, #20]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d006      	beq.n	8009214 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7e9b      	ldrb	r3, [r3, #26]
 800920a:	f023 0303 	bic.w	r3, r3, #3
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fa fcdb 	bl	8003bd6 <lwip_htonl>
 8009220:	4604      	mov	r4, r0
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	891b      	ldrh	r3, [r3, #8]
 8009226:	461d      	mov	r5, r3
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	899b      	ldrh	r3, [r3, #12]
 800922e:	b29b      	uxth	r3, r3
 8009230:	4618      	mov	r0, r3
 8009232:	f7fa fcc2 	bl	8003bba <lwip_htons>
 8009236:	4603      	mov	r3, r0
 8009238:	f003 0303 	and.w	r3, r3, #3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <tcp_output+0x294>
 8009240:	2301      	movs	r3, #1
 8009242:	e00a      	b.n	800925a <tcp_output+0x296>
 8009244:	08010400 	.word	0x08010400
 8009248:	08010804 	.word	0x08010804
 800924c:	08010464 	.word	0x08010464
 8009250:	200069ac 	.word	0x200069ac
 8009254:	0801082c 	.word	0x0801082c
 8009258:	2300      	movs	r3, #0
 800925a:	442b      	add	r3, r5
 800925c:	4423      	add	r3, r4
 800925e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	da02      	bge.n	8009272 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	891b      	ldrh	r3, [r3, #8]
 8009276:	461c      	mov	r4, r3
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	899b      	ldrh	r3, [r3, #12]
 800927e:	b29b      	uxth	r3, r3
 8009280:	4618      	mov	r0, r3
 8009282:	f7fa fc9a 	bl	8003bba <lwip_htons>
 8009286:	4603      	mov	r3, r0
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <tcp_output+0x2d0>
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <tcp_output+0x2d2>
 8009294:	2300      	movs	r3, #0
 8009296:	4423      	add	r3, r4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d049      	beq.n	8009330 <tcp_output+0x36c>
      seg->next = NULL;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ae:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	623b      	str	r3, [r7, #32]
 80092b4:	e03f      	b.n	8009336 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fa fc8a 	bl	8003bd6 <lwip_htonl>
 80092c2:	4604      	mov	r4, r0
 80092c4:	6a3b      	ldr	r3, [r7, #32]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fa fc83 	bl	8003bd6 <lwip_htonl>
 80092d0:	4603      	mov	r3, r0
 80092d2:	1ae3      	subs	r3, r4, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da24      	bge.n	8009322 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	336c      	adds	r3, #108	; 0x6c
 80092dc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80092de:	e002      	b.n	80092e6 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d011      	beq.n	8009312 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fa fc6d 	bl	8003bd6 <lwip_htonl>
 80092fc:	4604      	mov	r4, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	4618      	mov	r0, r3
 8009306:	f7fa fc66 	bl	8003bd6 <lwip_htonl>
 800930a:	4603      	mov	r3, r0
 800930c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800930e:	2b00      	cmp	r3, #0
 8009310:	dbe6      	blt.n	80092e0 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	e009      	b.n	8009336 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009326:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	623b      	str	r3, [r7, #32]
 800932e:	e002      	b.n	8009336 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009332:	f7fc fea2 	bl	800607a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d015      	beq.n	800936e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	4618      	mov	r0, r3
 800934a:	f7fa fc44 	bl	8003bd6 <lwip_htonl>
 800934e:	4602      	mov	r2, r0
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009358:	8912      	ldrh	r2, [r2, #8]
 800935a:	4413      	add	r3, r2
  while (seg != NULL &&
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	429a      	cmp	r2, r3
 8009360:	f4bf aedf 	bcs.w	8009122 <tcp_output+0x15e>
  }
output_done:
 8009364:	e003      	b.n	800936e <tcp_output+0x3aa>
    goto output_done;
 8009366:	bf00      	nop
 8009368:	e002      	b.n	8009370 <tcp_output+0x3ac>
      break;
 800936a:	bf00      	nop
 800936c:	e000      	b.n	8009370 <tcp_output+0x3ac>
output_done:
 800936e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009374:	2b00      	cmp	r3, #0
 8009376:	d103      	bne.n	8009380 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	7e9b      	ldrb	r3, [r3, #26]
 8009384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009388:	b2da      	uxtb	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3728      	adds	r7, #40	; 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bdb0      	pop	{r4, r5, r7, pc}

08009398 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009398:	b5b0      	push	{r4, r5, r7, lr}
 800939a:	b08c      	sub	sp, #48	; 0x30
 800939c:	af04      	add	r7, sp, #16
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	89db      	ldrh	r3, [r3, #14]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d001      	beq.n	80093b2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e08b      	b.n	80094ca <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	68dc      	ldr	r4, [r3, #12]
 80093ba:	4610      	mov	r0, r2
 80093bc:	f7fa fc0b 	bl	8003bd6 <lwip_htonl>
 80093c0:	4603      	mov	r3, r0
 80093c2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68dc      	ldr	r4, [r3, #12]
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7fa fbf4 	bl	8003bba <lwip_htons>
 80093d2:	4603      	mov	r3, r0
 80093d4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80093de:	441a      	add	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	3314      	adds	r3, #20
 80093ea:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7a9b      	ldrb	r3, [r3, #10]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d014      	beq.n	8009422 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009402:	f7fd f8a5 	bl	8006550 <tcp_eff_send_mss_impl>
 8009406:	4603      	mov	r3, r0
 8009408:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800940a:	8b7b      	ldrh	r3, [r7, #26]
 800940c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009410:	4618      	mov	r0, r3
 8009412:	f7fa fbe0 	bl	8003bd6 <lwip_htonl>
 8009416:	4602      	mov	r2, r0
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3304      	adds	r3, #4
 8009420:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009428:	2b00      	cmp	r3, #0
 800942a:	da02      	bge.n	8009432 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2200      	movs	r2, #0
 8009430:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10c      	bne.n	8009454 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800943a:	4b26      	ldr	r3, [pc, #152]	; (80094d4 <tcp_output_segment+0x13c>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f7fa fbc4 	bl	8003bd6 <lwip_htonl>
 800944e:	4602      	mov	r2, r0
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	461a      	mov	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	8959      	ldrh	r1, [r3, #10]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	8b3a      	ldrh	r2, [r7, #24]
 8009470:	1a8a      	subs	r2, r1, r2
 8009472:	b292      	uxth	r2, r2
 8009474:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	8919      	ldrh	r1, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	8b3a      	ldrh	r2, [r7, #24]
 8009482:	1a8a      	subs	r2, r1, r2
 8009484:	b292      	uxth	r2, r2
 8009486:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	68d2      	ldr	r2, [r2, #12]
 8009490:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	741a      	strb	r2, [r3, #16]
 800949a:	2200      	movs	r2, #0
 800949c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6858      	ldr	r0, [r3, #4]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	1d1c      	adds	r4, r3, #4
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	7a9d      	ldrb	r5, [r3, #10]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	7a5b      	ldrb	r3, [r3, #9]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	2206      	movs	r2, #6
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	462b      	mov	r3, r5
 80094bc:	4622      	mov	r2, r4
 80094be:	f004 f811 	bl	800d4e4 <ip4_output_if>
 80094c2:	4603      	mov	r3, r0
 80094c4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80094c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3720      	adds	r7, #32
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bdb0      	pop	{r4, r5, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	2000699c 	.word	0x2000699c

080094d8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08c      	sub	sp, #48	; 0x30
 80094dc:	af04      	add	r7, sp, #16
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80094e6:	2200      	movs	r2, #0
 80094e8:	2114      	movs	r1, #20
 80094ea:	2001      	movs	r0, #1
 80094ec:	f7fb f8fc 	bl	80046e8 <pbuf_alloc>
 80094f0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d05b      	beq.n	80095b0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	895b      	ldrh	r3, [r3, #10]
 80094fc:	2b13      	cmp	r3, #19
 80094fe:	d806      	bhi.n	800950e <tcp_rst+0x36>
 8009500:	4b2d      	ldr	r3, [pc, #180]	; (80095b8 <tcp_rst+0xe0>)
 8009502:	f240 524d 	movw	r2, #1357	; 0x54d
 8009506:	492d      	ldr	r1, [pc, #180]	; (80095bc <tcp_rst+0xe4>)
 8009508:	482d      	ldr	r0, [pc, #180]	; (80095c0 <tcp_rst+0xe8>)
 800950a:	f004 ffed 	bl	800e4e8 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009514:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009516:	4618      	mov	r0, r3
 8009518:	f7fa fb4f 	bl	8003bba <lwip_htons>
 800951c:	4603      	mov	r3, r0
 800951e:	461a      	mov	r2, r3
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009524:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009526:	4618      	mov	r0, r3
 8009528:	f7fa fb47 	bl	8003bba <lwip_htons>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f7fa fb4e 	bl	8003bd6 <lwip_htonl>
 800953a:	4602      	mov	r2, r0
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009540:	68b8      	ldr	r0, [r7, #8]
 8009542:	f7fa fb48 	bl	8003bd6 <lwip_htonl>
 8009546:	4602      	mov	r2, r0
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800954c:	f245 0014 	movw	r0, #20500	; 0x5014
 8009550:	f7fa fb33 	bl	8003bba <lwip_htons>
 8009554:	4603      	mov	r3, r0
 8009556:	461a      	mov	r2, r3
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2200      	movs	r2, #0
 8009560:	f042 0208 	orr.w	r2, r2, #8
 8009564:	739a      	strb	r2, [r3, #14]
 8009566:	2200      	movs	r2, #0
 8009568:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800956c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	2200      	movs	r2, #0
 8009572:	741a      	strb	r2, [r3, #16]
 8009574:	2200      	movs	r2, #0
 8009576:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	2200      	movs	r2, #0
 800957c:	749a      	strb	r2, [r3, #18]
 800957e:	2200      	movs	r2, #0
 8009580:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009582:	6838      	ldr	r0, [r7, #0]
 8009584:	f003 fde8 	bl	800d158 <ip4_route>
 8009588:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00b      	beq.n	80095a8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	9302      	str	r3, [sp, #8]
 8009594:	2306      	movs	r3, #6
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	23ff      	movs	r3, #255	; 0xff
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	69f8      	ldr	r0, [r7, #28]
 80095a4:	f003 ff9e 	bl	800d4e4 <ip4_output_if>
  }
  pbuf_free(p);
 80095a8:	69f8      	ldr	r0, [r7, #28]
 80095aa:	f7fb fc0f 	bl	8004dcc <pbuf_free>
 80095ae:	e000      	b.n	80095b2 <tcp_rst+0xda>
    return;
 80095b0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80095b2:	3720      	adds	r7, #32
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	08010400 	.word	0x08010400
 80095bc:	08010434 	.word	0x08010434
 80095c0:	08010464 	.word	0x08010464

080095c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d029      	beq.n	8009628 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e002      	b.n	80095e2 <tcp_rexmit_rto+0x1e>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f8      	bne.n	80095dc <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009606:	2bff      	cmp	r3, #255	; 0xff
 8009608:	d007      	beq.n	800961a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009610:	3301      	adds	r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff fccf 	bl	8008fc4 <tcp_output>
 8009626:	e000      	b.n	800962a <tcp_rexmit_rto+0x66>
    return;
 8009628:	bf00      	nop
}
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d043      	beq.n	80096c8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009644:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3368      	adds	r3, #104	; 0x68
 8009652:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009654:	e002      	b.n	800965c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d011      	beq.n	8009688 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	4618      	mov	r0, r3
 800966e:	f7fa fab2 	bl	8003bd6 <lwip_htonl>
 8009672:	4604      	mov	r4, r0
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4618      	mov	r0, r3
 800967c:	f7fa faab 	bl	8003bd6 <lwip_htonl>
 8009680:	4603      	mov	r3, r0
 8009682:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009684:	2b00      	cmp	r3, #0
 8009686:	dbe6      	blt.n	8009656 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d103      	bne.n	80096a6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096ac:	2bff      	cmp	r3, #255	; 0xff
 80096ae:	d007      	beq.n	80096c0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096b6:	3301      	adds	r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	635a      	str	r2, [r3, #52]	; 0x34
 80096c6:	e000      	b.n	80096ca <tcp_rexmit+0x9a>
    return;
 80096c8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}

080096d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d04c      	beq.n	800977a <tcp_rexmit_fast+0xaa>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	7e9b      	ldrb	r3, [r3, #26]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d146      	bne.n	800977a <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff ff9f 	bl	8009630 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096fe:	429a      	cmp	r2, r3
 8009700:	d208      	bcs.n	8009714 <tcp_rexmit_fast+0x44>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009708:	2b00      	cmp	r3, #0
 800970a:	da00      	bge.n	800970e <tcp_rexmit_fast+0x3e>
 800970c:	3301      	adds	r3, #1
 800970e:	105b      	asrs	r3, r3, #1
 8009710:	b29b      	uxth	r3, r3
 8009712:	e007      	b.n	8009724 <tcp_rexmit_fast+0x54>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800971a:	2b00      	cmp	r3, #0
 800971c:	da00      	bge.n	8009720 <tcp_rexmit_fast+0x50>
 800971e:	3301      	adds	r3, #1
 8009720:	105b      	asrs	r3, r3, #1
 8009722:	b29b      	uxth	r3, r3
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009730:	461a      	mov	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	429a      	cmp	r2, r3
 800973a:	d206      	bcs.n	800974a <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009754:	4619      	mov	r1, r3
 8009756:	0049      	lsls	r1, r1, #1
 8009758:	440b      	add	r3, r1
 800975a:	b29b      	uxth	r3, r3
 800975c:	4413      	add	r3, r2
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7e9b      	ldrb	r3, [r3, #26]
 800976a:	f043 0304 	orr.w	r3, r3, #4
 800976e:	b2da      	uxtb	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b08a      	sub	sp, #40	; 0x28
 8009786:	af04      	add	r7, sp, #16
 8009788:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	3b01      	subs	r3, #1
 8009790:	4618      	mov	r0, r3
 8009792:	f7fa fa20 	bl	8003bd6 <lwip_htonl>
 8009796:	4603      	mov	r3, r0
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff f975 	bl	8008a8c <tcp_output_alloc_header>
 80097a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ae:	e021      	b.n	80097f4 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3304      	adds	r3, #4
 80097b4:	4618      	mov	r0, r3
 80097b6:	f003 fccf 	bl	800d158 <ip4_route>
 80097ba:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80097c2:	23fc      	movs	r3, #252	; 0xfc
 80097c4:	75fb      	strb	r3, [r7, #23]
 80097c6:	e010      	b.n	80097ea <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	1d1a      	adds	r2, r3, #4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7a98      	ldrb	r0, [r3, #10]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	2306      	movs	r3, #6
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	2300      	movs	r3, #0
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	4603      	mov	r3, r0
 80097e0:	6938      	ldr	r0, [r7, #16]
 80097e2:	f003 fe7f 	bl	800d4e4 <ip4_output_if>
 80097e6:	4603      	mov	r3, r0
 80097e8:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80097ea:	6938      	ldr	r0, [r7, #16]
 80097ec:	f7fb faee 	bl	8004dcc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80097f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3718      	adds	r7, #24
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80097fc:	b590      	push	{r4, r7, lr}
 80097fe:	b08f      	sub	sp, #60	; 0x3c
 8009800:	af04      	add	r7, sp, #16
 8009802:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009808:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009814:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e085      	b.n	800992c <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	b29b      	uxth	r3, r3
 8009828:	4618      	mov	r0, r3
 800982a:	f7fa f9c6 	bl	8003bba <lwip_htons>
 800982e:	4603      	mov	r3, r0
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <tcp_zero_window_probe+0x48>
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	891b      	ldrh	r3, [r3, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <tcp_zero_window_probe+0x48>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <tcp_zero_window_probe+0x4a>
 8009844:	2300      	movs	r3, #0
 8009846:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	2b00      	cmp	r3, #0
 800984c:	bf0c      	ite	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	2300      	movne	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	8bba      	ldrh	r2, [r7, #28]
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff f913 	bl	8008a8c <tcp_output_alloc_header>
 8009866:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d102      	bne.n	8009874 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009872:	e05b      	b.n	800992c <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800987a:	7ffb      	ldrb	r3, [r7, #31]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00e      	beq.n	800989e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	899b      	ldrh	r3, [r3, #12]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800988a:	b29c      	uxth	r4, r3
 800988c:	2011      	movs	r0, #17
 800988e:	f7fa f994 	bl	8003bba <lwip_htons>
 8009892:	4603      	mov	r3, r0
 8009894:	4323      	orrs	r3, r4
 8009896:	b29a      	uxth	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	819a      	strh	r2, [r3, #12]
 800989c:	e010      	b.n	80098c0 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	3314      	adds	r3, #20
 80098a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	6858      	ldr	r0, [r3, #4]
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	891a      	ldrh	r2, [r3, #8]
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	891b      	ldrh	r3, [r3, #8]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2201      	movs	r2, #1
 80098ba:	6939      	ldr	r1, [r7, #16]
 80098bc:	f7fb fc86 	bl	80051cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fa f985 	bl	8003bd6 <lwip_htonl>
 80098cc:	4603      	mov	r3, r0
 80098ce:	3301      	adds	r3, #1
 80098d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	da02      	bge.n	80098e4 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4618      	mov	r0, r3
 80098ea:	f003 fc35 	bl	800d158 <ip4_route>
 80098ee:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80098f6:	23fc      	movs	r3, #252	; 0xfc
 80098f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098fc:	e011      	b.n	8009922 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	7a98      	ldrb	r0, [r3, #10]
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	9302      	str	r3, [sp, #8]
 800990c:	2306      	movs	r3, #6
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	2300      	movs	r3, #0
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4603      	mov	r3, r0
 8009916:	69b8      	ldr	r0, [r7, #24]
 8009918:	f003 fde4 	bl	800d4e4 <ip4_output_if>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009922:	69b8      	ldr	r0, [r7, #24]
 8009924:	f7fb fa52 	bl	8004dcc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800992c:	4618      	mov	r0, r3
 800992e:	372c      	adds	r7, #44	; 0x2c
 8009930:	46bd      	mov	sp, r7
 8009932:	bd90      	pop	{r4, r7, pc}

08009934 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800993c:	f7fb fcc8 	bl	80052d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <tcpip_tcp_timer+0x38>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <tcpip_tcp_timer+0x1c>
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <tcpip_tcp_timer+0x3c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009950:	2200      	movs	r2, #0
 8009952:	4908      	ldr	r1, [pc, #32]	; (8009974 <tcpip_tcp_timer+0x40>)
 8009954:	20fa      	movs	r0, #250	; 0xfa
 8009956:	f000 f86f 	bl	8009a38 <sys_timeout>
 800995a:	e002      	b.n	8009962 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <tcpip_tcp_timer+0x44>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
  }
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20006998 	.word	0x20006998
 8009970:	200069a8 	.word	0x200069a8
 8009974:	08009935 	.word	0x08009935
 8009978:	2000010c 	.word	0x2000010c

0800997c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <tcp_timer_needed+0x30>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10f      	bne.n	80099a8 <tcp_timer_needed+0x2c>
 8009988:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <tcp_timer_needed+0x34>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d103      	bne.n	8009998 <tcp_timer_needed+0x1c>
 8009990:	4b08      	ldr	r3, [pc, #32]	; (80099b4 <tcp_timer_needed+0x38>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d007      	beq.n	80099a8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <tcp_timer_needed+0x30>)
 800999a:	2201      	movs	r2, #1
 800999c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800999e:	2200      	movs	r2, #0
 80099a0:	4905      	ldr	r1, [pc, #20]	; (80099b8 <tcp_timer_needed+0x3c>)
 80099a2:	20fa      	movs	r0, #250	; 0xfa
 80099a4:	f000 f848 	bl	8009a38 <sys_timeout>
  }
}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000010c 	.word	0x2000010c
 80099b0:	20006998 	.word	0x20006998
 80099b4:	200069a8 	.word	0x200069a8
 80099b8:	08009935 	.word	0x08009935

080099bc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	4903      	ldr	r1, [pc, #12]	; (80099e4 <cyclic_timer+0x28>)
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 f82e 	bl	8009a38 <sys_timeout>
}
 80099dc:	bf00      	nop
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	080099bd 	.word	0x080099bd

080099e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80099ee:	2301      	movs	r3, #1
 80099f0:	607b      	str	r3, [r7, #4]
 80099f2:	e00e      	b.n	8009a12 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80099f4:	4a0d      	ldr	r2, [pc, #52]	; (8009a2c <sys_timeouts_init+0x44>)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <sys_timeouts_init+0x44>)
 8009a02:	4413      	add	r3, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	490a      	ldr	r1, [pc, #40]	; (8009a30 <sys_timeouts_init+0x48>)
 8009a08:	f000 f816 	bl	8009a38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d9ed      	bls.n	80099f4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8009a18:	f7fa f8c8 	bl	8003bac <sys_now>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <sys_timeouts_init+0x4c>)
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	080115c0 	.word	0x080115c0
 8009a30:	080099bd 	.word	0x080099bd
 8009a34:	20000108 	.word	0x20000108

08009a38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009a44:	2006      	movs	r0, #6
 8009a46:	f7fa fc67 	bl	8004318 <memp_malloc>
 8009a4a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 8084 	bne.w	8009b62 <sys_timeout+0x12a>
 8009a5a:	4b44      	ldr	r3, [pc, #272]	; (8009b6c <sys_timeout+0x134>)
 8009a5c:	22d4      	movs	r2, #212	; 0xd4
 8009a5e:	4944      	ldr	r1, [pc, #272]	; (8009b70 <sys_timeout+0x138>)
 8009a60:	4844      	ldr	r0, [pc, #272]	; (8009b74 <sys_timeout+0x13c>)
 8009a62:	f004 fd41 	bl	800e4e8 <iprintf>
    return;
 8009a66:	e07c      	b.n	8009b62 <sys_timeout+0x12a>
  }

  now = sys_now();
 8009a68:	f7fa f8a0 	bl	8003bac <sys_now>
 8009a6c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8009a6e:	4b42      	ldr	r3, [pc, #264]	; (8009b78 <sys_timeout+0x140>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d105      	bne.n	8009a82 <sys_timeout+0x4a>
    diff = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8009a7a:	4a40      	ldr	r2, [pc, #256]	; (8009b7c <sys_timeout+0x144>)
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	e004      	b.n	8009a8c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8009a82:	4b3e      	ldr	r3, [pc, #248]	; (8009b7c <sys_timeout+0x144>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009aa8:	4b33      	ldr	r3, [pc, #204]	; (8009b78 <sys_timeout+0x140>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d103      	bne.n	8009ab8 <sys_timeout+0x80>
    next_timeout = timeout;
 8009ab0:	4a31      	ldr	r2, [pc, #196]	; (8009b78 <sys_timeout+0x140>)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	6013      	str	r3, [r2, #0]
    return;
 8009ab6:	e055      	b.n	8009b64 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8009ab8:	4b2f      	ldr	r3, [pc, #188]	; (8009b78 <sys_timeout+0x140>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d20f      	bcs.n	8009ae4 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8009ac4:	4b2c      	ldr	r3, [pc, #176]	; (8009b78 <sys_timeout+0x140>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6859      	ldr	r1, [r3, #4]
 8009aca:	4b2b      	ldr	r3, [pc, #172]	; (8009b78 <sys_timeout+0x140>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	1a8a      	subs	r2, r1, r2
 8009ad2:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8009ad4:	4b28      	ldr	r3, [pc, #160]	; (8009b78 <sys_timeout+0x140>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009adc:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <sys_timeout+0x140>)
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	e03f      	b.n	8009b64 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <sys_timeout+0x140>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	61fb      	str	r3, [r7, #28]
 8009aea:	e036      	b.n	8009b5a <sys_timeout+0x122>
      timeout->time -= t->time;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	685a      	ldr	r2, [r3, #4]
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <sys_timeout+0xd8>
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d921      	bls.n	8009b54 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	1a8a      	subs	r2, r1, r2
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	e00b      	b.n	8009b44 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d206      	bcs.n	8009b44 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <sys_timeout+0x140>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	441a      	add	r2, r3
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	601a      	str	r2, [r3, #0]
        break;
 8009b52:	e007      	b.n	8009b64 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	61fb      	str	r3, [r7, #28]
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1c5      	bne.n	8009aec <sys_timeout+0xb4>
 8009b60:	e000      	b.n	8009b64 <sys_timeout+0x12c>
    return;
 8009b62:	bf00      	nop
      }
    }
  }
}
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08010844 	.word	0x08010844
 8009b70:	08010878 	.word	0x08010878
 8009b74:	080108b8 	.word	0x080108b8
 8009b78:	20000104 	.word	0x20000104
 8009b7c:	20000108 	.word	0x20000108

08009b80 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009b84:	bf00      	nop
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
	...

08009b90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009b9a:	4b17      	ldr	r3, [pc, #92]	; (8009bf8 <udp_new_port+0x68>)
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	b291      	uxth	r1, r2
 8009ba2:	4a15      	ldr	r2, [pc, #84]	; (8009bf8 <udp_new_port+0x68>)
 8009ba4:	8011      	strh	r1, [r2, #0]
 8009ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d103      	bne.n	8009bb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009bae:	4b12      	ldr	r3, [pc, #72]	; (8009bf8 <udp_new_port+0x68>)
 8009bb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009bb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <udp_new_port+0x6c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	e011      	b.n	8009be2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	8a5a      	ldrh	r2, [r3, #18]
 8009bc2:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <udp_new_port+0x68>)
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d108      	bne.n	8009bdc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009bca:	88fb      	ldrh	r3, [r7, #6]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	80fb      	strh	r3, [r7, #6]
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bd6:	d3e0      	bcc.n	8009b9a <udp_new_port+0xa>
        return 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e007      	b.n	8009bec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1ea      	bne.n	8009bbe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8009be8:	4b03      	ldr	r3, [pc, #12]	; (8009bf8 <udp_new_port+0x68>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20000010 	.word	0x20000010
 8009bfc:	200069b0 	.word	0x200069b0

08009c00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d018      	beq.n	8009c46 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d013      	beq.n	8009c42 <udp_input_local_match+0x42>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00f      	beq.n	8009c42 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009c22:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <udp_input_local_match+0x74>)
 8009c24:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c2a:	d00a      	beq.n	8009c42 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <udp_input_local_match+0x74>)
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	405a      	eors	r2, r3
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d110      	bne.n	8009c64 <udp_input_local_match+0x64>
          return 1;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e00f      	b.n	8009c66 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <udp_input_local_match+0x60>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <udp_input_local_match+0x60>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <udp_input_local_match+0x74>)
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d101      	bne.n	8009c64 <udp_input_local_match+0x64>
      return 1;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20003448 	.word	0x20003448

08009c78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009c78:	b590      	push	{r4, r7, lr}
 8009c7a:	b08d      	sub	sp, #52	; 0x34
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	895b      	ldrh	r3, [r3, #10]
 8009c8a:	2b07      	cmp	r3, #7
 8009c8c:	d803      	bhi.n	8009c96 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fb f89c 	bl	8004dcc <pbuf_free>
    goto end;
 8009c94:	e0c6      	b.n	8009e24 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009c9c:	4b63      	ldr	r3, [pc, #396]	; (8009e2c <udp_input+0x1b4>)
 8009c9e:	695a      	ldr	r2, [r3, #20]
 8009ca0:	4b62      	ldr	r3, [pc, #392]	; (8009e2c <udp_input+0x1b4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f003 fcee 	bl	800d688 <ip4_addr_isbroadcast_u32>
 8009cac:	4603      	mov	r3, r0
 8009cae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7f9 ff7f 	bl	8003bba <lwip_htons>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	885b      	ldrh	r3, [r3, #2]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f9 ff77 	bl	8003bba <lwip_htons>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cdc:	4b54      	ldr	r3, [pc, #336]	; (8009e30 <udp_input+0x1b8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce2:	e03b      	b.n	8009d5c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	8a5b      	ldrh	r3, [r3, #18]
 8009ce8:	89fa      	ldrh	r2, [r7, #14]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d131      	bne.n	8009d52 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8009cee:	7cfb      	ldrb	r3, [r7, #19]
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cf6:	f7ff ff83 	bl	8009c00 <udp_input_local_match>
 8009cfa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d028      	beq.n	8009d52 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	7c1b      	ldrb	r3, [r3, #16]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <udp_input+0x9e>
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	8a9b      	ldrh	r3, [r3, #20]
 8009d1a:	8a3a      	ldrh	r2, [r7, #16]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d118      	bne.n	8009d52 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d005      	beq.n	8009d34 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	4b3f      	ldr	r3, [pc, #252]	; (8009e2c <udp_input+0x1b4>)
 8009d2e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d10e      	bne.n	8009d52 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d014      	beq.n	8009d64 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	68da      	ldr	r2, [r3, #12]
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8009d42:	4b3b      	ldr	r3, [pc, #236]	; (8009e30 <udp_input+0x1b8>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8009d4a:	4a39      	ldr	r2, [pc, #228]	; (8009e30 <udp_input+0x1b8>)
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8009d50:	e008      	b.n	8009d64 <udp_input+0xec>
      }
    }

    prev = pcb;
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1c0      	bne.n	8009ce4 <udp_input+0x6c>
 8009d62:	e000      	b.n	8009d66 <udp_input+0xee>
        break;
 8009d64:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <udp_input+0xf8>
    pcb = uncon_pcb;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <udp_input+0x104>
    for_us = 1;
 8009d76:	2301      	movs	r3, #1
 8009d78:	76fb      	strb	r3, [r7, #27]
 8009d7a:	e00a      	b.n	8009d92 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b2a      	ldr	r3, [pc, #168]	; (8009e2c <udp_input+0x1b4>)
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	bf0c      	ite	eq
 8009d8a:	2301      	moveq	r3, #1
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8009d92:	7efb      	ldrb	r3, [r7, #27]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d042      	beq.n	8009e1e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8009d98:	f06f 0107 	mvn.w	r1, #7
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fa fff1 	bl	8004d84 <pbuf_header>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009da8:	4b22      	ldr	r3, [pc, #136]	; (8009e34 <udp_input+0x1bc>)
 8009daa:	f240 1255 	movw	r2, #341	; 0x155
 8009dae:	4922      	ldr	r1, [pc, #136]	; (8009e38 <udp_input+0x1c0>)
 8009db0:	4822      	ldr	r0, [pc, #136]	; (8009e3c <udp_input+0x1c4>)
 8009db2:	f004 fb99 	bl	800e4e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fb f808 	bl	8004dcc <pbuf_free>
      goto end;
 8009dbc:	e032      	b.n	8009e24 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d012      	beq.n	8009dea <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	699c      	ldr	r4, [r3, #24]
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	69d8      	ldr	r0, [r3, #28]
 8009dd4:	8a3b      	ldrh	r3, [r7, #16]
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	4b19      	ldr	r3, [pc, #100]	; (8009e40 <udp_input+0x1c8>)
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dde:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009de0:	e021      	b.n	8009e26 <udp_input+0x1ae>
        pbuf_free(p);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7fa fff2 	bl	8004dcc <pbuf_free>
        goto end;
 8009de8:	e01c      	b.n	8009e24 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009dea:	7cfb      	ldrb	r3, [r7, #19]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d112      	bne.n	8009e16 <udp_input+0x19e>
 8009df0:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <udp_input+0x1b4>)
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009df8:	2be0      	cmp	r3, #224	; 0xe0
 8009dfa:	d00c      	beq.n	8009e16 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <udp_input+0x1b4>)
 8009dfe:	899b      	ldrh	r3, [r3, #12]
 8009e00:	3308      	adds	r3, #8
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	b21b      	sxth	r3, r3
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7fa ffcd 	bl	8004da8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009e0e:	2103      	movs	r1, #3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f003 f919 	bl	800d048 <icmp_dest_unreach>
      pbuf_free(p);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7fa ffd8 	bl	8004dcc <pbuf_free>
  return;
 8009e1c:	e003      	b.n	8009e26 <udp_input+0x1ae>
    pbuf_free(p);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7fa ffd4 	bl	8004dcc <pbuf_free>
  return;
 8009e24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009e26:	372c      	adds	r7, #44	; 0x2c
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd90      	pop	{r4, r7, pc}
 8009e2c:	20003448 	.word	0x20003448
 8009e30:	200069b0 	.word	0x200069b0
 8009e34:	080108e0 	.word	0x080108e0
 8009e38:	08010910 	.word	0x08010910
 8009e3c:	08010924 	.word	0x08010924
 8009e40:	20003458 	.word	0x20003458

08009e44 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <udp_sendto_if+0x1a>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d102      	bne.n	8009e64 <udp_sendto_if+0x20>
    return ERR_VAL;
 8009e5e:	f06f 0305 	mvn.w	r3, #5
 8009e62:	e028      	b.n	8009eb6 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <udp_sendto_if+0x3a>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009e7a:	2be0      	cmp	r3, #224	; 0xe0
 8009e7c:	d103      	bne.n	8009e86 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	3304      	adds	r3, #4
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e00b      	b.n	8009e9e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d002      	beq.n	8009e9a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8009e94:	f06f 0303 	mvn.w	r3, #3
 8009e98:	e00d      	b.n	8009eb6 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8009e9e:	887a      	ldrh	r2, [r7, #2]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	68b9      	ldr	r1, [r7, #8]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 f806 	bl	8009ec0 <udp_sendto_if_src>
 8009eb4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3718      	adds	r7, #24
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08c      	sub	sp, #48	; 0x30
 8009ec4:	af04      	add	r7, sp, #16
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <udp_sendto_if_src+0x1a>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8009eda:	f06f 0305 	mvn.w	r3, #5
 8009ede:	e07e      	b.n	8009fde <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	8a5b      	ldrh	r3, [r3, #18]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10f      	bne.n	8009f08 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009ee8:	68f9      	ldr	r1, [r7, #12]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8a5b      	ldrh	r3, [r3, #18]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f87f 	bl	8009ff4 <udp_bind>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009efa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8009f02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009f06:	e06a      	b.n	8009fde <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8009f08:	2108      	movs	r1, #8
 8009f0a:	68b8      	ldr	r0, [r7, #8]
 8009f0c:	f7fa ff3a 	bl	8004d84 <pbuf_header>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d014      	beq.n	8009f40 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009f16:	2200      	movs	r2, #0
 8009f18:	2108      	movs	r1, #8
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	f7fa fbe4 	bl	80046e8 <pbuf_alloc>
 8009f20:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d102      	bne.n	8009f2e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f2c:	e057      	b.n	8009fde <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	891b      	ldrh	r3, [r3, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d006      	beq.n	8009f44 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8009f36:	68b9      	ldr	r1, [r7, #8]
 8009f38:	69f8      	ldr	r0, [r7, #28]
 8009f3a:	f7fb f86b 	bl	8005014 <pbuf_chain>
 8009f3e:	e001      	b.n	8009f44 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	895b      	ldrh	r3, [r3, #10]
 8009f48:	2b07      	cmp	r3, #7
 8009f4a:	d806      	bhi.n	8009f5a <udp_sendto_if_src+0x9a>
 8009f4c:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <udp_sendto_if_src+0x128>)
 8009f4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009f52:	4926      	ldr	r1, [pc, #152]	; (8009fec <udp_sendto_if_src+0x12c>)
 8009f54:	4826      	ldr	r0, [pc, #152]	; (8009ff0 <udp_sendto_if_src+0x130>)
 8009f56:	f004 fac7 	bl	800e4e8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8a5b      	ldrh	r3, [r3, #18]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7f9 fe28 	bl	8003bba <lwip_htons>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8009f72:	887b      	ldrh	r3, [r7, #2]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f9 fe20 	bl	8003bba <lwip_htons>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2200      	movs	r2, #0
 8009f86:	719a      	strb	r2, [r3, #6]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	891b      	ldrh	r3, [r3, #8]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f9 fe12 	bl	8003bba <lwip_htons>
 8009f96:	4603      	mov	r3, r0
 8009f98:	461a      	mov	r2, r3
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8009f9e:	2311      	movs	r3, #17
 8009fa0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	7a9b      	ldrb	r3, [r3, #10]
 8009fa6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	7a5b      	ldrb	r3, [r3, #9]
 8009fac:	7cb9      	ldrb	r1, [r7, #18]
 8009fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb0:	9202      	str	r2, [sp, #8]
 8009fb2:	7cfa      	ldrb	r2, [r7, #19]
 8009fb4:	9201      	str	r2, [sp, #4]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fbe:	69f8      	ldr	r0, [r7, #28]
 8009fc0:	f003 faba 	bl	800d538 <ip4_output_if_src>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d004      	beq.n	8009fda <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8009fd0:	69f8      	ldr	r0, [r7, #28]
 8009fd2:	f7fa fefb 	bl	8004dcc <pbuf_free>
    q = NULL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8009fda:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	080108e0 	.word	0x080108e0
 8009fec:	0801094c 	.word	0x0801094c
 8009ff0:	08010924 	.word	0x08010924

08009ff4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	4613      	mov	r3, r2
 800a000:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800a008:	4b30      	ldr	r3, [pc, #192]	; (800a0cc <udp_bind+0xd8>)
 800a00a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <udp_bind+0x24>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <udp_bind+0x2a>
    return ERR_VAL;
 800a018:	f06f 0305 	mvn.w	r3, #5
 800a01c:	e052      	b.n	800a0c4 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a022:	4b2b      	ldr	r3, [pc, #172]	; (800a0d0 <udp_bind+0xdc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	617b      	str	r3, [r7, #20]
 800a028:	e009      	b.n	800a03e <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d102      	bne.n	800a038 <udp_bind+0x44>
      rebind = 1;
 800a032:	2301      	movs	r3, #1
 800a034:	74fb      	strb	r3, [r7, #19]
      break;
 800a036:	e005      	b.n	800a044 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1f2      	bne.n	800a02a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <udp_bind+0x6a>
    port = udp_new_port();
 800a04a:	f7ff fda1 	bl	8009b90 <udp_new_port>
 800a04e:	4603      	mov	r3, r0
 800a050:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11e      	bne.n	800a096 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a058:	f06f 0307 	mvn.w	r3, #7
 800a05c:	e032      	b.n	800a0c4 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a05e:	4b1c      	ldr	r3, [pc, #112]	; (800a0d0 <udp_bind+0xdc>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e014      	b.n	800a090 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d00d      	beq.n	800a08a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	8a5b      	ldrh	r3, [r3, #18]
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	429a      	cmp	r2, r3
 800a076:	d108      	bne.n	800a08a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a080:	429a      	cmp	r2, r3
 800a082:	d102      	bne.n	800a08a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a084:	f06f 0307 	mvn.w	r3, #7
 800a088:	e01c      	b.n	800a0c4 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e7      	bne.n	800a066 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <udp_bind+0xae>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	e000      	b.n	800a0a4 <udp_bind+0xb0>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	88fa      	ldrh	r2, [r7, #6]
 800a0ac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a0ae:	7cfb      	ldrb	r3, [r7, #19]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a0b4:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <udp_bind+0xdc>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a0bc:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <udp_bind+0xdc>)
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	080115e8 	.word	0x080115e8
 800a0d0:	200069b0 	.word	0x200069b0

0800a0d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <udp_connect+0x1a>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d102      	bne.n	800a0f4 <udp_connect+0x20>
    return ERR_VAL;
 800a0ee:	f06f 0305 	mvn.w	r3, #5
 800a0f2:	e03e      	b.n	800a172 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8a5b      	ldrh	r3, [r3, #18]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10f      	bne.n	800a11c <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8a5b      	ldrh	r3, [r3, #18]
 800a102:	461a      	mov	r2, r3
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f7ff ff75 	bl	8009ff4 <udp_bind>
 800a10a:	4603      	mov	r3, r0
 800a10c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a10e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <udp_connect+0x48>
      return err;
 800a116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a11a:	e02a      	b.n	800a172 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <udp_connect+0x54>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	e000      	b.n	800a12a <udp_connect+0x56>
 800a128:	2300      	movs	r3, #0
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	7c1b      	ldrb	r3, [r3, #16]
 800a138:	f043 0304 	orr.w	r3, r3, #4
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a142:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <udp_connect+0xa8>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e008      	b.n	800a15c <udp_connect+0x88>
    if (pcb == ipcb) {
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d101      	bne.n	800a156 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	e00d      	b.n	800a172 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1f3      	bne.n	800a14a <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <udp_connect+0xa8>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800a16a:	4a04      	ldr	r2, [pc, #16]	; (800a17c <udp_connect+0xa8>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3718      	adds	r7, #24
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	200069b0 	.word	0x200069b0

0800a180 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	61da      	str	r2, [r3, #28]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a1ac:	4b15      	ldr	r3, [pc, #84]	; (800a204 <udp_remove+0x60>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d105      	bne.n	800a1c2 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <udp_remove+0x60>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	4a11      	ldr	r2, [pc, #68]	; (800a204 <udp_remove+0x60>)
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	e017      	b.n	800a1f2 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a1c2:	4b10      	ldr	r3, [pc, #64]	; (800a204 <udp_remove+0x60>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	60fb      	str	r3, [r7, #12]
 800a1c8:	e010      	b.n	800a1ec <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <udp_remove+0x42>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d104      	bne.n	800a1e6 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	60da      	str	r2, [r3, #12]
        break;
 800a1e4:	e005      	b.n	800a1f2 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1eb      	bne.n	800a1ca <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	f7fa f8db 	bl	80043b0 <memp_free>
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	200069b0 	.word	0x200069b0

0800a208 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a20e:	2000      	movs	r0, #0
 800a210:	f7fa f882 	bl	8004318 <memp_malloc>
 800a214:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a21c:	2220      	movs	r2, #32
 800a21e:	2100      	movs	r1, #0
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f004 f959 	bl	800e4d8 <memset>
    pcb->ttl = UDP_TTL;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	22ff      	movs	r2, #255	; 0xff
 800a22a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800a22c:	687b      	ldr	r3, [r7, #4]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d01e      	beq.n	800a286 <udp_netif_ip_addr_changed+0x4e>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01a      	beq.n	800a286 <udp_netif_ip_addr_changed+0x4e>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d017      	beq.n	800a286 <udp_netif_ip_addr_changed+0x4e>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d013      	beq.n	800a286 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a25e:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <udp_netif_ip_addr_changed+0x5c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	e00c      	b.n	800a280 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d103      	bne.n	800a27a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1ef      	bne.n	800a266 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	200069b0 	.word	0x200069b0

0800a298 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800a29c:	4b20      	ldr	r3, [pc, #128]	; (800a320 <dhcp_inc_pcb_refcount+0x88>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d133      	bne.n	800a30c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800a2a4:	4b1f      	ldr	r3, [pc, #124]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <dhcp_inc_pcb_refcount+0x20>
 800a2ac:	4b1e      	ldr	r3, [pc, #120]	; (800a328 <dhcp_inc_pcb_refcount+0x90>)
 800a2ae:	22d9      	movs	r2, #217	; 0xd9
 800a2b0:	491e      	ldr	r1, [pc, #120]	; (800a32c <dhcp_inc_pcb_refcount+0x94>)
 800a2b2:	481f      	ldr	r0, [pc, #124]	; (800a330 <dhcp_inc_pcb_refcount+0x98>)
 800a2b4:	f004 f918 	bl	800e4e8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800a2b8:	f7ff ffa6 	bl	800a208 <udp_new>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4b19      	ldr	r3, [pc, #100]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2c0:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800a2c2:	4b18      	ldr	r3, [pc, #96]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2ce:	e024      	b.n	800a31a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800a2d0:	4b14      	ldr	r3, [pc, #80]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	7a1a      	ldrb	r2, [r3, #8]
 800a2d6:	4b13      	ldr	r3, [pc, #76]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0220 	orr.w	r2, r2, #32
 800a2de:	b2d2      	uxtb	r2, r2
 800a2e0:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2244      	movs	r2, #68	; 0x44
 800a2e8:	4912      	ldr	r1, [pc, #72]	; (800a334 <dhcp_inc_pcb_refcount+0x9c>)
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff fe82 	bl	8009ff4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800a2f0:	4b0c      	ldr	r3, [pc, #48]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2243      	movs	r2, #67	; 0x43
 800a2f6:	490f      	ldr	r1, [pc, #60]	; (800a334 <dhcp_inc_pcb_refcount+0x9c>)
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7ff feeb 	bl	800a0d4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800a2fe:	4b09      	ldr	r3, [pc, #36]	; (800a324 <dhcp_inc_pcb_refcount+0x8c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2200      	movs	r2, #0
 800a304:	490c      	ldr	r1, [pc, #48]	; (800a338 <dhcp_inc_pcb_refcount+0xa0>)
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff ff3a 	bl	800a180 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <dhcp_inc_pcb_refcount+0x88>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	b2da      	uxtb	r2, r3
 800a314:	4b02      	ldr	r3, [pc, #8]	; (800a320 <dhcp_inc_pcb_refcount+0x88>)
 800a316:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000114 	.word	0x20000114
 800a324:	20000110 	.word	0x20000110
 800a328:	0801097c 	.word	0x0801097c
 800a32c:	080109b4 	.word	0x080109b4
 800a330:	080109dc 	.word	0x080109dc
 800a334:	080115e8 	.word	0x080115e8
 800a338:	0800b9f9 	.word	0x0800b9f9

0800a33c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <dhcp_dec_pcb_refcount+0x40>)
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d105      	bne.n	800a354 <dhcp_dec_pcb_refcount+0x18>
 800a348:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <dhcp_dec_pcb_refcount+0x44>)
 800a34a:	22f3      	movs	r2, #243	; 0xf3
 800a34c:	490d      	ldr	r1, [pc, #52]	; (800a384 <dhcp_dec_pcb_refcount+0x48>)
 800a34e:	480e      	ldr	r0, [pc, #56]	; (800a388 <dhcp_dec_pcb_refcount+0x4c>)
 800a350:	f004 f8ca 	bl	800e4e8 <iprintf>
  dhcp_pcb_refcount--;
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <dhcp_dec_pcb_refcount+0x40>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	3b01      	subs	r3, #1
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	4b07      	ldr	r3, [pc, #28]	; (800a37c <dhcp_dec_pcb_refcount+0x40>)
 800a35e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800a360:	4b06      	ldr	r3, [pc, #24]	; (800a37c <dhcp_dec_pcb_refcount+0x40>)
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800a368:	4b08      	ldr	r3, [pc, #32]	; (800a38c <dhcp_dec_pcb_refcount+0x50>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7ff ff19 	bl	800a1a4 <udp_remove>
    dhcp_pcb = NULL;
 800a372:	4b06      	ldr	r3, [pc, #24]	; (800a38c <dhcp_dec_pcb_refcount+0x50>)
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]
  }
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	20000114 	.word	0x20000114
 800a380:	0801097c 	.word	0x0801097c
 800a384:	08010a04 	.word	0x08010a04
 800a388:	080109dc 	.word	0x080109dc
 800a38c:	20000110 	.word	0x20000110

0800a390 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a39e:	210c      	movs	r1, #12
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 ff87 	bl	800b2b4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a3a6:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <dhcp_handle_nak+0x30>)
 800a3a8:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <dhcp_handle_nak+0x30>)
 800a3aa:	4905      	ldr	r1, [pc, #20]	; (800a3c0 <dhcp_handle_nak+0x30>)
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7fa f88d 	bl	80044cc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fbb8 	bl	800ab28 <dhcp_discover>
}
 800a3b8:	bf00      	nop
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	080115e8 	.word	0x080115e8

0800a3c4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800a3d2:	2108      	movs	r1, #8
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 ff6d 	bl	800b2b4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3328      	adds	r3, #40	; 0x28
 800a3de:	2200      	movs	r2, #0
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f002 fb20 	bl	800ca28 <etharp_query>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	7a9b      	ldrb	r3, [r3, #10]
 800a3f0:	2bff      	cmp	r3, #255	; 0xff
 800a3f2:	d005      	beq.n	800a400 <dhcp_check+0x3c>
    dhcp->tries++;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	7a9b      	ldrb	r3, [r3, #10]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800a400:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a404:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a406:	893b      	ldrh	r3, [r7, #8]
 800a408:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a40c:	4a06      	ldr	r2, [pc, #24]	; (800a428 <dhcp_check+0x64>)
 800a40e:	fb82 1203 	smull	r1, r2, r2, r3
 800a412:	1152      	asrs	r2, r2, #5
 800a414:	17db      	asrs	r3, r3, #31
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800a41e:	bf00      	nop
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	10624dd3 	.word	0x10624dd3

0800a42c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a1b      	ldr	r3, [r3, #32]
 800a438:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800a43a:	4b0c      	ldr	r3, [pc, #48]	; (800a46c <dhcp_handle_offer+0x40>)
 800a43c:	789b      	ldrb	r3, [r3, #2]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <dhcp_handle_offer+0x44>)
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	4618      	mov	r0, r3
 800a448:	f7f9 fbc5 	bl	8003bd6 <lwip_htonl>
 800a44c:	4602      	mov	r2, r0
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f809 	bl	800a474 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800a462:	bf00      	nop
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	200069b4 	.word	0x200069b4
 800a470:	200069bc 	.word	0x200069bc

0800a474 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af02      	add	r7, sp, #8
 800a47a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800a482:	2101      	movs	r1, #1
 800a484:	6938      	ldr	r0, [r7, #16]
 800a486:	f000 ff15 	bl	800b2b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a48a:	2203      	movs	r2, #3
 800a48c:	6939      	ldr	r1, [r7, #16]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 fb96 	bl	800bbc0 <dhcp_create_msg>
 800a494:	4603      	mov	r3, r0
 800a496:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d159      	bne.n	800a554 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	2139      	movs	r1, #57	; 0x39
 800a4a4:	6938      	ldr	r0, [r7, #16]
 800a4a6:	f000 ff1f 	bl	800b2e8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6938      	ldr	r0, [r7, #16]
 800a4b2:	f000 ff7b 	bl	800b3ac <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a4b6:	2204      	movs	r2, #4
 800a4b8:	2132      	movs	r1, #50	; 0x32
 800a4ba:	6938      	ldr	r0, [r7, #16]
 800a4bc:	f000 ff14 	bl	800b2e8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7f9 fb86 	bl	8003bd6 <lwip_htonl>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6938      	ldr	r0, [r7, #16]
 800a4d0:	f000 ffa6 	bl	800b420 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	2136      	movs	r1, #54	; 0x36
 800a4d8:	6938      	ldr	r0, [r7, #16]
 800a4da:	f000 ff05 	bl	800b2e8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7f9 fb77 	bl	8003bd6 <lwip_htonl>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6938      	ldr	r0, [r7, #16]
 800a4ee:	f000 ff97 	bl	800b420 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	2137      	movs	r1, #55	; 0x37
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 fef6 	bl	800b2e8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	75fb      	strb	r3, [r7, #23]
 800a500:	e009      	b.n	800a516 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	4a29      	ldr	r2, [pc, #164]	; (800a5ac <dhcp_select+0x138>)
 800a506:	5cd3      	ldrb	r3, [r2, r3]
 800a508:	4619      	mov	r1, r3
 800a50a:	6938      	ldr	r0, [r7, #16]
 800a50c:	f000 ff26 	bl	800b35c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a510:	7dfb      	ldrb	r3, [r7, #23]
 800a512:	3301      	adds	r3, #1
 800a514:	75fb      	strb	r3, [r7, #23]
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d9f2      	bls.n	800a502 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a51c:	6938      	ldr	r0, [r7, #16]
 800a51e:	f001 fcf3 	bl	800bf08 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	8a9b      	ldrh	r3, [r3, #20]
 800a52a:	33f0      	adds	r3, #240	; 0xf0
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f7fa fad7 	bl	8004ae4 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a536:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <dhcp_select+0x13c>)
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68d9      	ldr	r1, [r3, #12]
 800a53e:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <dhcp_select+0x140>)
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	2343      	movs	r3, #67	; 0x43
 800a548:	4a1b      	ldr	r2, [pc, #108]	; (800a5b8 <dhcp_select+0x144>)
 800a54a:	f7ff fcb9 	bl	8009ec0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a54e:	6938      	ldr	r0, [r7, #16]
 800a550:	f001 fc98 	bl	800be84 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	7a9b      	ldrb	r3, [r3, #10]
 800a558:	2bff      	cmp	r3, #255	; 0xff
 800a55a:	d005      	beq.n	800a568 <dhcp_select+0xf4>
    dhcp->tries++;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	7a9b      	ldrb	r3, [r3, #10]
 800a560:	3301      	adds	r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	7a9b      	ldrb	r3, [r3, #10]
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d807      	bhi.n	800a580 <dhcp_select+0x10c>
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	7a9b      	ldrb	r3, [r3, #10]
 800a574:	461a      	mov	r2, r3
 800a576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a57a:	4093      	lsls	r3, r2
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	e001      	b.n	800a584 <dhcp_select+0x110>
 800a580:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a584:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a586:	89bb      	ldrh	r3, [r7, #12]
 800a588:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a58c:	4a0b      	ldr	r2, [pc, #44]	; (800a5bc <dhcp_select+0x148>)
 800a58e:	fb82 1203 	smull	r1, r2, r2, r3
 800a592:	1152      	asrs	r2, r2, #5
 800a594:	17db      	asrs	r3, r3, #31
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b29a      	uxth	r2, r3
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000014 	.word	0x20000014
 800a5b0:	20000110 	.word	0x20000110
 800a5b4:	080115e8 	.word	0x080115e8
 800a5b8:	080115ec 	.word	0x080115ec
 800a5bc:	10624dd3 	.word	0x10624dd3

0800a5c0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800a5c6:	4b27      	ldr	r3, [pc, #156]	; (800a664 <dhcp_coarse_tmr+0xa4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800a5cc:	e042      	b.n	800a654 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d039      	beq.n	800a64e <dhcp_coarse_tmr+0x8e>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	7a5b      	ldrb	r3, [r3, #9]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d035      	beq.n	800a64e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d012      	beq.n	800a610 <dhcp_coarse_tmr+0x50>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	8c1b      	ldrh	r3, [r3, #32]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b29a      	uxth	r2, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	841a      	strh	r2, [r3, #32]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	8c1a      	ldrh	r2, [r3, #32]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d106      	bne.n	800a610 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fd96 	bl	800b134 <dhcp_release>
        dhcp_discover(netif);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fa8d 	bl	800ab28 <dhcp_discover>
 800a60e:	e01e      	b.n	800a64e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	8bdb      	ldrh	r3, [r3, #30]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <dhcp_coarse_tmr+0x70>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	8bdb      	ldrh	r3, [r3, #30]
 800a61c:	1e5a      	subs	r2, r3, #1
 800a61e:	b291      	uxth	r1, r2
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	83d1      	strh	r1, [r2, #30]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d103      	bne.n	800a630 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f8c7 	bl	800a7bc <dhcp_t2_timeout>
 800a62e:	e00e      	b.n	800a64e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	8b9b      	ldrh	r3, [r3, #28]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00a      	beq.n	800a64e <dhcp_coarse_tmr+0x8e>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	8b9b      	ldrh	r3, [r3, #28]
 800a63c:	1e5a      	subs	r2, r3, #1
 800a63e:	b291      	uxth	r1, r2
 800a640:	683a      	ldr	r2, [r7, #0]
 800a642:	8391      	strh	r1, [r2, #28]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d102      	bne.n	800a64e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f888 	bl	800a75e <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1b9      	bne.n	800a5ce <dhcp_coarse_tmr+0xe>
  }
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20006988 	.word	0x20006988

0800a668 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800a66e:	4b16      	ldr	r3, [pc, #88]	; (800a6c8 <dhcp_fine_tmr+0x60>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800a674:	e020      	b.n	800a6b8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d017      	beq.n	800a6b2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	8adb      	ldrh	r3, [r3, #22]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d906      	bls.n	800a698 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	8adb      	ldrh	r3, [r3, #22]
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	82da      	strh	r2, [r3, #22]
 800a696:	e00c      	b.n	800a6b2 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	8adb      	ldrh	r3, [r3, #22]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d108      	bne.n	800a6b2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	8adb      	ldrh	r3, [r3, #22]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f80d 	bl	800a6cc <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1db      	bne.n	800a676 <dhcp_fine_tmr+0xe>
  }
}
 800a6be:	bf00      	nop
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20006988 	.word	0x20006988

0800a6cc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	7a5b      	ldrb	r3, [r3, #9]
 800a6de:	2b0c      	cmp	r3, #12
 800a6e0:	d003      	beq.n	800a6ea <dhcp_timeout+0x1e>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	7a5b      	ldrb	r3, [r3, #9]
 800a6e6:	2b06      	cmp	r3, #6
 800a6e8:	d103      	bne.n	800a6f2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fa1c 	bl	800ab28 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800a6f0:	e031      	b.n	800a756 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	7a5b      	ldrb	r3, [r3, #9]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d10e      	bne.n	800a718 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	7a9b      	ldrb	r3, [r3, #10]
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	d803      	bhi.n	800a70a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff feb6 	bl	800a474 <dhcp_select>
}
 800a708:	e025      	b.n	800a756 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fd12 	bl	800b134 <dhcp_release>
      dhcp_discover(netif);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 fa09 	bl	800ab28 <dhcp_discover>
}
 800a716:	e01e      	b.n	800a756 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	7a5b      	ldrb	r3, [r3, #9]
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d10b      	bne.n	800a738 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	7a9b      	ldrb	r3, [r3, #10]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d803      	bhi.n	800a730 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff fe4b 	bl	800a3c4 <dhcp_check>
}
 800a72e:	e012      	b.n	800a756 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fa85 	bl	800ac40 <dhcp_bind>
}
 800a736:	e00e      	b.n	800a756 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	7a5b      	ldrb	r3, [r3, #9]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d10a      	bne.n	800a756 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	7a9b      	ldrb	r3, [r3, #10]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d803      	bhi.n	800a750 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fc5f 	bl	800b00c <dhcp_reboot>
}
 800a74e:	e002      	b.n	800a756 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f9e9 	bl	800ab28 <dhcp_discover>
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a1b      	ldr	r3, [r3, #32]
 800a76a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	7a5b      	ldrb	r3, [r3, #9]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d007      	beq.n	800a784 <dhcp_t1_timeout+0x26>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	7a5b      	ldrb	r3, [r3, #9]
 800a778:	2b0a      	cmp	r3, #10
 800a77a:	d003      	beq.n	800a784 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a780:	2b05      	cmp	r3, #5
 800a782:	d117      	bne.n	800a7b4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fb35 	bl	800adf4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	8b5b      	ldrh	r3, [r3, #26]
 800a78e:	461a      	mov	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8c1b      	ldrh	r3, [r3, #32]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	2b01      	cmp	r3, #1
 800a798:	dd0c      	ble.n	800a7b4 <dhcp_t1_timeout+0x56>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8b5b      	ldrh	r3, [r3, #26]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8c1b      	ldrh	r3, [r3, #32]
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da00      	bge.n	800a7ac <dhcp_t1_timeout+0x4e>
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	105b      	asrs	r3, r3, #1
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800a7b4:	bf00      	nop
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	7a5b      	ldrb	r3, [r3, #9]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d00b      	beq.n	800a7ea <dhcp_t2_timeout+0x2e>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	7a5b      	ldrb	r3, [r3, #9]
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d007      	beq.n	800a7ea <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a7de:	2b05      	cmp	r3, #5
 800a7e0:	d003      	beq.n	800a7ea <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	7a5b      	ldrb	r3, [r3, #9]
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d117      	bne.n	800a81a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fb88 	bl	800af00 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	8c1b      	ldrh	r3, [r3, #32]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	dd0c      	ble.n	800a81a <dhcp_t2_timeout+0x5e>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a804:	461a      	mov	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8c1b      	ldrh	r3, [r3, #32]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da00      	bge.n	800a812 <dhcp_t2_timeout+0x56>
 800a810:	3301      	adds	r3, #1
 800a812:	105b      	asrs	r3, r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800a81a:	bf00      	nop
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800a83e:	4b27      	ldr	r3, [pc, #156]	; (800a8dc <dhcp_handle_ack+0xb8>)
 800a840:	78db      	ldrb	r3, [r3, #3]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800a846:	4b26      	ldr	r3, [pc, #152]	; (800a8e0 <dhcp_handle_ack+0xbc>)
 800a848:	68da      	ldr	r2, [r3, #12]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800a84e:	4b23      	ldr	r3, [pc, #140]	; (800a8dc <dhcp_handle_ack+0xb8>)
 800a850:	791b      	ldrb	r3, [r3, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d004      	beq.n	800a860 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800a856:	4b22      	ldr	r3, [pc, #136]	; (800a8e0 <dhcp_handle_ack+0xbc>)
 800a858:	691a      	ldr	r2, [r3, #16]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
 800a85e:	e004      	b.n	800a86a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a864:	085a      	lsrs	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800a86a:	4b1c      	ldr	r3, [pc, #112]	; (800a8dc <dhcp_handle_ack+0xb8>)
 800a86c:	795b      	ldrb	r3, [r3, #5]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d004      	beq.n	800a87c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800a872:	4b1b      	ldr	r3, [pc, #108]	; (800a8e0 <dhcp_handle_ack+0xbc>)
 800a874:	695a      	ldr	r2, [r3, #20]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	63da      	str	r2, [r3, #60]	; 0x3c
 800a87a:	e007      	b.n	800a88c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a880:	4613      	mov	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	08da      	lsrs	r2, r3, #3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <dhcp_handle_ack+0xb8>)
 800a898:	799b      	ldrb	r3, [r3, #6]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a89e:	4b10      	ldr	r3, [pc, #64]	; (800a8e0 <dhcp_handle_ack+0xbc>)
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f9 f997 	bl	8003bd6 <lwip_htonl>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	72da      	strb	r2, [r3, #11]
 800a8b4:	e002      	b.n	800a8bc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a8bc:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <dhcp_handle_ack+0xb8>)
 800a8be:	79db      	ldrb	r3, [r3, #7]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d007      	beq.n	800a8d4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <dhcp_handle_ack+0xbc>)
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7f9 f984 	bl	8003bd6 <lwip_htonl>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	200069b4 	.word	0x200069b4
 800a8e0:	200069bc 	.word	0x200069bc

0800a8e4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <dhcp_start+0x22>
 800a8f2:	4b3c      	ldr	r3, [pc, #240]	; (800a9e4 <dhcp_start+0x100>)
 800a8f4:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a8f8:	493b      	ldr	r1, [pc, #236]	; (800a9e8 <dhcp_start+0x104>)
 800a8fa:	483c      	ldr	r0, [pc, #240]	; (800a9ec <dhcp_start+0x108>)
 800a8fc:	f003 fdf4 	bl	800e4e8 <iprintf>
 800a900:	f06f 030f 	mvn.w	r3, #15
 800a904:	e069      	b.n	800a9da <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <dhcp_start+0x44>
 800a914:	4b33      	ldr	r3, [pc, #204]	; (800a9e4 <dhcp_start+0x100>)
 800a916:	f240 22d7 	movw	r2, #727	; 0x2d7
 800a91a:	4935      	ldr	r1, [pc, #212]	; (800a9f0 <dhcp_start+0x10c>)
 800a91c:	4833      	ldr	r0, [pc, #204]	; (800a9ec <dhcp_start+0x108>)
 800a91e:	f003 fde3 	bl	800e4e8 <iprintf>
 800a922:	f06f 030f 	mvn.w	r3, #15
 800a926:	e058      	b.n	800a9da <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a932:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a936:	d202      	bcs.n	800a93e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800a938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a93c:	e04d      	b.n	800a9da <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10d      	bne.n	800a960 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a944:	2040      	movs	r0, #64	; 0x40
 800a946:	f7f9 fb89 	bl	800405c <mem_malloc>
 800a94a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d102      	bne.n	800a958 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800a952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a956:	e040      	b.n	800a9da <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	621a      	str	r2, [r3, #32]
 800a95e:	e01b      	b.n	800a998 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <dhcp_start+0x92>
 800a968:	4b1e      	ldr	r3, [pc, #120]	; (800a9e4 <dhcp_start+0x100>)
 800a96a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800a96e:	4921      	ldr	r1, [pc, #132]	; (800a9f4 <dhcp_start+0x110>)
 800a970:	481e      	ldr	r0, [pc, #120]	; (800a9ec <dhcp_start+0x108>)
 800a972:	f003 fdb9 	bl	800e4e8 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <dhcp_start+0xa8>
 800a97e:	4b19      	ldr	r3, [pc, #100]	; (800a9e4 <dhcp_start+0x100>)
 800a980:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a984:	491c      	ldr	r1, [pc, #112]	; (800a9f8 <dhcp_start+0x114>)
 800a986:	4819      	ldr	r0, [pc, #100]	; (800a9ec <dhcp_start+0x108>)
 800a988:	f003 fdae 	bl	800e4e8 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	7a1b      	ldrb	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a994:	f7ff fcd2 	bl	800a33c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a998:	2240      	movs	r2, #64	; 0x40
 800a99a:	2100      	movs	r1, #0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f003 fd9b 	bl	800e4d8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a9a2:	f7ff fc79 	bl	800a298 <dhcp_inc_pcb_refcount>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <dhcp_start+0xce>
    return ERR_MEM;
 800a9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9b0:	e013      	b.n	800a9da <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f8b5 	bl	800ab28 <dhcp_discover>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800a9c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d005      	beq.n	800a9d6 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fc3a 	bl	800b244 <dhcp_stop>
    return ERR_MEM;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d4:	e001      	b.n	800a9da <dhcp_start+0xf6>
  }
  return result;
 800a9d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	0801097c 	.word	0x0801097c
 800a9e8:	08010a28 	.word	0x08010a28
 800a9ec:	080109dc 	.word	0x080109dc
 800a9f0:	08010a6c 	.word	0x08010a6c
 800a9f4:	08010a90 	.word	0x08010a90
 800a9f8:	08010aa8 	.word	0x08010aa8

0800a9fc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d107      	bne.n	800aa1c <dhcp_arp_reply+0x20>
 800aa0c:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <dhcp_arp_reply+0x4c>)
 800aa0e:	f240 327b 	movw	r2, #891	; 0x37b
 800aa12:	490e      	ldr	r1, [pc, #56]	; (800aa4c <dhcp_arp_reply+0x50>)
 800aa14:	480e      	ldr	r0, [pc, #56]	; (800aa50 <dhcp_arp_reply+0x54>)
 800aa16:	f003 fd67 	bl	800e4e8 <iprintf>
 800aa1a:	e012      	b.n	800aa42 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00c      	beq.n	800aa42 <dhcp_arp_reply+0x46>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	7a5b      	ldrb	r3, [r3, #9]
 800aa2c:	2b08      	cmp	r3, #8
 800aa2e:	d108      	bne.n	800aa42 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d102      	bne.n	800aa42 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f809 	bl	800aa54 <dhcp_decline>
    }
  }
}
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	0801097c 	.word	0x0801097c
 800aa4c:	08010a28 	.word	0x08010a28
 800aa50:	080109dc 	.word	0x080109dc

0800aa54 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800aa66:	210c      	movs	r1, #12
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fc23 	bl	800b2b4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800aa6e:	2204      	movs	r2, #4
 800aa70:	68f9      	ldr	r1, [r7, #12]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 f8a4 	bl	800bbc0 <dhcp_create_msg>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800aa7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d12a      	bne.n	800aada <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800aa84:	2204      	movs	r2, #4
 800aa86:	2132      	movs	r1, #50	; 0x32
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fc2d 	bl	800b2e8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f9 f89f 	bl	8003bd6 <lwip_htonl>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f000 fcbf 	bl	800b420 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f001 fa30 	bl	800bf08 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	8a9b      	ldrh	r3, [r3, #20]
 800aab0:	33f0      	adds	r3, #240	; 0xf0
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7fa f814 	bl	8004ae4 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800aabc:	4b16      	ldr	r3, [pc, #88]	; (800ab18 <dhcp_decline+0xc4>)
 800aabe:	6818      	ldr	r0, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68d9      	ldr	r1, [r3, #12]
 800aac4:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <dhcp_decline+0xc8>)
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2343      	movs	r3, #67	; 0x43
 800aace:	4a14      	ldr	r2, [pc, #80]	; (800ab20 <dhcp_decline+0xcc>)
 800aad0:	f7ff f9f6 	bl	8009ec0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f001 f9d5 	bl	800be84 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	7a9b      	ldrb	r3, [r3, #10]
 800aade:	2bff      	cmp	r3, #255	; 0xff
 800aae0:	d005      	beq.n	800aaee <dhcp_decline+0x9a>
    dhcp->tries++;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	7a9b      	ldrb	r3, [r3, #10]
 800aae6:	3301      	adds	r3, #1
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800aaee:	f242 7310 	movw	r3, #10000	; 0x2710
 800aaf2:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800aaf4:	893b      	ldrh	r3, [r7, #8]
 800aaf6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800aafa:	4a0a      	ldr	r2, [pc, #40]	; (800ab24 <dhcp_decline+0xd0>)
 800aafc:	fb82 1203 	smull	r1, r2, r2, r3
 800ab00:	1152      	asrs	r2, r2, #5
 800ab02:	17db      	asrs	r3, r3, #31
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ab0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000110 	.word	0x20000110
 800ab1c:	080115e8 	.word	0x080115e8
 800ab20:	080115ec 	.word	0x080115ec
 800ab24:	10624dd3 	.word	0x10624dd3

0800ab28 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ab40:	2106      	movs	r1, #6
 800ab42:	6938      	ldr	r0, [r7, #16]
 800ab44:	f000 fbb6 	bl	800b2b4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800ab48:	2201      	movs	r2, #1
 800ab4a:	6939      	ldr	r1, [r7, #16]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f001 f837 	bl	800bbc0 <dhcp_create_msg>
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800ab56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d13b      	bne.n	800abd6 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ab5e:	2202      	movs	r2, #2
 800ab60:	2139      	movs	r1, #57	; 0x39
 800ab62:	6938      	ldr	r0, [r7, #16]
 800ab64:	f000 fbc0 	bl	800b2e8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6938      	ldr	r0, [r7, #16]
 800ab70:	f000 fc1c 	bl	800b3ac <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ab74:	2203      	movs	r2, #3
 800ab76:	2137      	movs	r1, #55	; 0x37
 800ab78:	6938      	ldr	r0, [r7, #16]
 800ab7a:	f000 fbb5 	bl	800b2e8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
 800ab82:	e009      	b.n	800ab98 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	4a29      	ldr	r2, [pc, #164]	; (800ac2c <dhcp_discover+0x104>)
 800ab88:	5cd3      	ldrb	r3, [r2, r3]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6938      	ldr	r0, [r7, #16]
 800ab8e:	f000 fbe5 	bl	800b35c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	3301      	adds	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d9f2      	bls.n	800ab84 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f001 f9b2 	bl	800bf08 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	68da      	ldr	r2, [r3, #12]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	8a9b      	ldrh	r3, [r3, #20]
 800abac:	33f0      	adds	r3, #240	; 0xf0
 800abae:	b29b      	uxth	r3, r3
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	f7f9 ff96 	bl	8004ae4 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800abb8:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <dhcp_discover+0x108>)
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	68d9      	ldr	r1, [r3, #12]
 800abc0:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <dhcp_discover+0x10c>)
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	2343      	movs	r3, #67	; 0x43
 800abca:	4a1b      	ldr	r2, [pc, #108]	; (800ac38 <dhcp_discover+0x110>)
 800abcc:	f7ff f978 	bl	8009ec0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800abd0:	6938      	ldr	r0, [r7, #16]
 800abd2:	f001 f957 	bl	800be84 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	7a9b      	ldrb	r3, [r3, #10]
 800abda:	2bff      	cmp	r3, #255	; 0xff
 800abdc:	d005      	beq.n	800abea <dhcp_discover+0xc2>
    dhcp->tries++;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	7a9b      	ldrb	r3, [r3, #10]
 800abe2:	3301      	adds	r3, #1
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	7a9b      	ldrb	r3, [r3, #10]
 800abee:	2b05      	cmp	r3, #5
 800abf0:	d807      	bhi.n	800ac02 <dhcp_discover+0xda>
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	7a9b      	ldrb	r3, [r3, #10]
 800abf6:	461a      	mov	r2, r3
 800abf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abfc:	4093      	lsls	r3, r2
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	e001      	b.n	800ac06 <dhcp_discover+0xde>
 800ac02:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ac06:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ac08:	89bb      	ldrh	r3, [r7, #12]
 800ac0a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ac0e:	4a0b      	ldr	r2, [pc, #44]	; (800ac3c <dhcp_discover+0x114>)
 800ac10:	fb82 1203 	smull	r1, r2, r2, r3
 800ac14:	1152      	asrs	r2, r2, #5
 800ac16:	17db      	asrs	r3, r3, #31
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ac20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20000014 	.word	0x20000014
 800ac30:	20000110 	.word	0x20000110
 800ac34:	080115e8 	.word	0x080115e8
 800ac38:	080115ec 	.word	0x080115ec
 800ac3c:	10624dd3 	.word	0x10624dd3

0800ac40 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d107      	bne.n	800ac5e <dhcp_bind+0x1e>
 800ac4e:	4b64      	ldr	r3, [pc, #400]	; (800ade0 <dhcp_bind+0x1a0>)
 800ac50:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800ac54:	4963      	ldr	r1, [pc, #396]	; (800ade4 <dhcp_bind+0x1a4>)
 800ac56:	4864      	ldr	r0, [pc, #400]	; (800ade8 <dhcp_bind+0x1a8>)
 800ac58:	f003 fc46 	bl	800e4e8 <iprintf>
 800ac5c:	e0bc      	b.n	800add8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a1b      	ldr	r3, [r3, #32]
 800ac62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d107      	bne.n	800ac7a <dhcp_bind+0x3a>
 800ac6a:	4b5d      	ldr	r3, [pc, #372]	; (800ade0 <dhcp_bind+0x1a0>)
 800ac6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac70:	495e      	ldr	r1, [pc, #376]	; (800adec <dhcp_bind+0x1ac>)
 800ac72:	485d      	ldr	r0, [pc, #372]	; (800ade8 <dhcp_bind+0x1a8>)
 800ac74:	f003 fc38 	bl	800e4e8 <iprintf>
 800ac78:	e0ae      	b.n	800add8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac88:	d019      	beq.n	800acbe <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	331e      	adds	r3, #30
 800ac90:	4a57      	ldr	r2, [pc, #348]	; (800adf0 <dhcp_bind+0x1b0>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	095b      	lsrs	r3, r3, #5
 800ac98:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca0:	d302      	bcc.n	800aca8 <dhcp_bind+0x68>
       timeout = 0xffff;
 800aca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aca6:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	b29a      	uxth	r2, r3
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2201      	movs	r2, #1
 800acbc:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acc6:	d01d      	beq.n	800ad04 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	331e      	adds	r3, #30
 800acce:	4a48      	ldr	r2, [pc, #288]	; (800adf0 <dhcp_bind+0x1b0>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acde:	d302      	bcc.n	800ace6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ace0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ace4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	b29a      	uxth	r2, r3
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	8b1b      	ldrh	r3, [r3, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2201      	movs	r2, #1
 800acfa:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	8b1a      	ldrh	r2, [r3, #24]
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0c:	d01d      	beq.n	800ad4a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad12:	331e      	adds	r3, #30
 800ad14:	4a36      	ldr	r2, [pc, #216]	; (800adf0 <dhcp_bind+0x1b0>)
 800ad16:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1a:	095b      	lsrs	r3, r3, #5
 800ad1c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad24:	d302      	bcc.n	800ad2c <dhcp_bind+0xec>
      timeout = 0xffff;
 800ad26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad2a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	8b5b      	ldrh	r3, [r3, #26]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	8b5a      	ldrh	r2, [r3, #26]
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	8b1a      	ldrh	r2, [r3, #24]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	8b5b      	ldrh	r3, [r3, #26]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d306      	bcc.n	800ad64 <dhcp_bind+0x124>
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	8b5b      	ldrh	r3, [r3, #26]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2200      	movs	r2, #0
 800ad62:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	7adb      	ldrb	r3, [r3, #11]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	613b      	str	r3, [r7, #16]
 800ad72:	e014      	b.n	800ad9e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	3328      	adds	r3, #40	; 0x28
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ad7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	db02      	blt.n	800ad8a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ad84:	23ff      	movs	r3, #255	; 0xff
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	e009      	b.n	800ad9e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	2bbf      	cmp	r3, #191	; 0xbf
 800ad8e:	d903      	bls.n	800ad98 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800ad90:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ad94:	613b      	str	r3, [r7, #16]
 800ad96:	e002      	b.n	800ad9e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ad98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad9c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d108      	bne.n	800adbc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	4013      	ands	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800adbc:	210a      	movs	r1, #10
 800adbe:	69b8      	ldr	r0, [r7, #24]
 800adc0:	f000 fa78 	bl	800b2b4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800adca:	f107 030c 	add.w	r3, r7, #12
 800adce:	f107 0210 	add.w	r2, r7, #16
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7f9 fb7a 	bl	80044cc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	0801097c 	.word	0x0801097c
 800ade4:	08010abc 	.word	0x08010abc
 800ade8:	080109dc 	.word	0x080109dc
 800adec:	08010ad8 	.word	0x08010ad8
 800adf0:	88888889 	.word	0x88888889

0800adf4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ae02:	2105      	movs	r1, #5
 800ae04:	6938      	ldr	r0, [r7, #16]
 800ae06:	f000 fa55 	bl	800b2b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	6939      	ldr	r1, [r7, #16]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fed6 	bl	800bbc0 <dhcp_create_msg>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800ae18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d13b      	bne.n	800ae98 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ae20:	2202      	movs	r2, #2
 800ae22:	2139      	movs	r1, #57	; 0x39
 800ae24:	6938      	ldr	r0, [r7, #16]
 800ae26:	f000 fa5f 	bl	800b2e8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6938      	ldr	r0, [r7, #16]
 800ae32:	f000 fabb 	bl	800b3ac <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ae36:	2203      	movs	r2, #3
 800ae38:	2137      	movs	r1, #55	; 0x37
 800ae3a:	6938      	ldr	r0, [r7, #16]
 800ae3c:	f000 fa54 	bl	800b2e8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ae40:	2300      	movs	r3, #0
 800ae42:	75fb      	strb	r3, [r7, #23]
 800ae44:	e009      	b.n	800ae5a <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ae46:	7dfb      	ldrb	r3, [r7, #23]
 800ae48:	4a2a      	ldr	r2, [pc, #168]	; (800aef4 <dhcp_renew+0x100>)
 800ae4a:	5cd3      	ldrb	r3, [r2, r3]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6938      	ldr	r0, [r7, #16]
 800ae50:	f000 fa84 	bl	800b35c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	3301      	adds	r3, #1
 800ae58:	75fb      	strb	r3, [r7, #23]
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d9f2      	bls.n	800ae46 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800ae60:	6938      	ldr	r0, [r7, #16]
 800ae62:	f001 f851 	bl	800bf08 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	8a9b      	ldrh	r3, [r3, #20]
 800ae6e:	33f0      	adds	r3, #240	; 0xf0
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	4619      	mov	r1, r3
 800ae74:	4610      	mov	r0, r2
 800ae76:	f7f9 fe35 	bl	8004ae4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800ae7a:	4b1f      	ldr	r3, [pc, #124]	; (800aef8 <dhcp_renew+0x104>)
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	68d9      	ldr	r1, [r3, #12]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	2343      	movs	r3, #67	; 0x43
 800ae8e:	f7fe ffd9 	bl	8009e44 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800ae92:	6938      	ldr	r0, [r7, #16]
 800ae94:	f000 fff6 	bl	800be84 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	7a9b      	ldrb	r3, [r3, #10]
 800ae9c:	2bff      	cmp	r3, #255	; 0xff
 800ae9e:	d005      	beq.n	800aeac <dhcp_renew+0xb8>
    dhcp->tries++;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	7a9b      	ldrb	r3, [r3, #10]
 800aea4:	3301      	adds	r3, #1
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	7a9b      	ldrb	r3, [r3, #10]
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d80a      	bhi.n	800aeca <dhcp_renew+0xd6>
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	7a9b      	ldrb	r3, [r3, #10]
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	0152      	lsls	r2, r2, #5
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	0092      	lsls	r2, r2, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	e001      	b.n	800aece <dhcp_renew+0xda>
 800aeca:	f644 6320 	movw	r3, #20000	; 0x4e20
 800aece:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800aed0:	89bb      	ldrh	r3, [r7, #12]
 800aed2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800aed6:	4a09      	ldr	r2, [pc, #36]	; (800aefc <dhcp_renew+0x108>)
 800aed8:	fb82 1203 	smull	r1, r2, r2, r3
 800aedc:	1152      	asrs	r2, r2, #5
 800aede:	17db      	asrs	r3, r3, #31
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800aee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3718      	adds	r7, #24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20000014 	.word	0x20000014
 800aef8:	20000110 	.word	0x20000110
 800aefc:	10624dd3 	.word	0x10624dd3

0800af00 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af02      	add	r7, sp, #8
 800af06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800af0e:	2104      	movs	r1, #4
 800af10:	6938      	ldr	r0, [r7, #16]
 800af12:	f000 f9cf 	bl	800b2b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800af16:	2203      	movs	r2, #3
 800af18:	6939      	ldr	r1, [r7, #16]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fe50 	bl	800bbc0 <dhcp_create_msg>
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800af24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d139      	bne.n	800afa0 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800af2c:	2202      	movs	r2, #2
 800af2e:	2139      	movs	r1, #57	; 0x39
 800af30:	6938      	ldr	r0, [r7, #16]
 800af32:	f000 f9d9 	bl	800b2e8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af3a:	4619      	mov	r1, r3
 800af3c:	6938      	ldr	r0, [r7, #16]
 800af3e:	f000 fa35 	bl	800b3ac <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800af42:	2203      	movs	r2, #3
 800af44:	2137      	movs	r1, #55	; 0x37
 800af46:	6938      	ldr	r0, [r7, #16]
 800af48:	f000 f9ce 	bl	800b2e8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af4c:	2300      	movs	r3, #0
 800af4e:	75fb      	strb	r3, [r7, #23]
 800af50:	e009      	b.n	800af66 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800af52:	7dfb      	ldrb	r3, [r7, #23]
 800af54:	4a29      	ldr	r2, [pc, #164]	; (800affc <dhcp_rebind+0xfc>)
 800af56:	5cd3      	ldrb	r3, [r2, r3]
 800af58:	4619      	mov	r1, r3
 800af5a:	6938      	ldr	r0, [r7, #16]
 800af5c:	f000 f9fe 	bl	800b35c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	3301      	adds	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d9f2      	bls.n	800af52 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800af6c:	6938      	ldr	r0, [r7, #16]
 800af6e:	f000 ffcb 	bl	800bf08 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	68da      	ldr	r2, [r3, #12]
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	8a9b      	ldrh	r3, [r3, #20]
 800af7a:	33f0      	adds	r3, #240	; 0xf0
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	4619      	mov	r1, r3
 800af80:	4610      	mov	r0, r2
 800af82:	f7f9 fdaf 	bl	8004ae4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800af86:	4b1e      	ldr	r3, [pc, #120]	; (800b000 <dhcp_rebind+0x100>)
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	68d9      	ldr	r1, [r3, #12]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	2343      	movs	r3, #67	; 0x43
 800af94:	4a1b      	ldr	r2, [pc, #108]	; (800b004 <dhcp_rebind+0x104>)
 800af96:	f7fe ff55 	bl	8009e44 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800af9a:	6938      	ldr	r0, [r7, #16]
 800af9c:	f000 ff72 	bl	800be84 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	7a9b      	ldrb	r3, [r3, #10]
 800afa4:	2bff      	cmp	r3, #255	; 0xff
 800afa6:	d005      	beq.n	800afb4 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	7a9b      	ldrb	r3, [r3, #10]
 800afac:	3301      	adds	r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	7a9b      	ldrb	r3, [r3, #10]
 800afb8:	2b09      	cmp	r3, #9
 800afba:	d80a      	bhi.n	800afd2 <dhcp_rebind+0xd2>
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	7a9b      	ldrb	r3, [r3, #10]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	0152      	lsls	r2, r2, #5
 800afc6:	1ad2      	subs	r2, r2, r3
 800afc8:	0092      	lsls	r2, r2, #2
 800afca:	4413      	add	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	b29b      	uxth	r3, r3
 800afd0:	e001      	b.n	800afd6 <dhcp_rebind+0xd6>
 800afd2:	f242 7310 	movw	r3, #10000	; 0x2710
 800afd6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800afd8:	89bb      	ldrh	r3, [r7, #12]
 800afda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800afde:	4a0a      	ldr	r2, [pc, #40]	; (800b008 <dhcp_rebind+0x108>)
 800afe0:	fb82 1203 	smull	r1, r2, r2, r3
 800afe4:	1152      	asrs	r2, r2, #5
 800afe6:	17db      	asrs	r3, r3, #31
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	b29a      	uxth	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800aff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000014 	.word	0x20000014
 800b000:	20000110 	.word	0x20000110
 800b004:	080115ec 	.word	0x080115ec
 800b008:	10624dd3 	.word	0x10624dd3

0800b00c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af02      	add	r7, sp, #8
 800b012:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800b01a:	2103      	movs	r1, #3
 800b01c:	6938      	ldr	r0, [r7, #16]
 800b01e:	f000 f949 	bl	800b2b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b022:	2203      	movs	r2, #3
 800b024:	6939      	ldr	r1, [r7, #16]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fdca 	bl	800bbc0 <dhcp_create_msg>
 800b02c:	4603      	mov	r3, r0
 800b02e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800b030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d147      	bne.n	800b0c8 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b038:	2202      	movs	r2, #2
 800b03a:	2139      	movs	r1, #57	; 0x39
 800b03c:	6938      	ldr	r0, [r7, #16]
 800b03e:	f000 f953 	bl	800b2e8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800b042:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b046:	6938      	ldr	r0, [r7, #16]
 800b048:	f000 f9b0 	bl	800b3ac <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b04c:	2204      	movs	r2, #4
 800b04e:	2132      	movs	r1, #50	; 0x32
 800b050:	6938      	ldr	r0, [r7, #16]
 800b052:	f000 f949 	bl	800b2e8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f8 fdbb 	bl	8003bd6 <lwip_htonl>
 800b060:	4603      	mov	r3, r0
 800b062:	4619      	mov	r1, r3
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f000 f9db 	bl	800b420 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b06a:	2203      	movs	r2, #3
 800b06c:	2137      	movs	r1, #55	; 0x37
 800b06e:	6938      	ldr	r0, [r7, #16]
 800b070:	f000 f93a 	bl	800b2e8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b074:	2300      	movs	r3, #0
 800b076:	75fb      	strb	r3, [r7, #23]
 800b078:	e009      	b.n	800b08e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	4a29      	ldr	r2, [pc, #164]	; (800b124 <dhcp_reboot+0x118>)
 800b07e:	5cd3      	ldrb	r3, [r2, r3]
 800b080:	4619      	mov	r1, r3
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f000 f96a 	bl	800b35c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b088:	7dfb      	ldrb	r3, [r7, #23]
 800b08a:	3301      	adds	r3, #1
 800b08c:	75fb      	strb	r3, [r7, #23]
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d9f2      	bls.n	800b07a <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800b094:	6938      	ldr	r0, [r7, #16]
 800b096:	f000 ff37 	bl	800bf08 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	8a9b      	ldrh	r3, [r3, #20]
 800b0a2:	33f0      	adds	r3, #240	; 0xf0
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7f9 fd1b 	bl	8004ae4 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800b0ae:	4b1e      	ldr	r3, [pc, #120]	; (800b128 <dhcp_reboot+0x11c>)
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	68d9      	ldr	r1, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	2343      	movs	r3, #67	; 0x43
 800b0bc:	4a1b      	ldr	r2, [pc, #108]	; (800b12c <dhcp_reboot+0x120>)
 800b0be:	f7fe fec1 	bl	8009e44 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b0c2:	6938      	ldr	r0, [r7, #16]
 800b0c4:	f000 fede 	bl	800be84 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	7a9b      	ldrb	r3, [r3, #10]
 800b0cc:	2bff      	cmp	r3, #255	; 0xff
 800b0ce:	d005      	beq.n	800b0dc <dhcp_reboot+0xd0>
    dhcp->tries++;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	7a9b      	ldrb	r3, [r3, #10]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	7a9b      	ldrb	r3, [r3, #10]
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d80a      	bhi.n	800b0fa <dhcp_reboot+0xee>
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	7a9b      	ldrb	r3, [r3, #10]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	0152      	lsls	r2, r2, #5
 800b0ee:	1ad2      	subs	r2, r2, r3
 800b0f0:	0092      	lsls	r2, r2, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	00db      	lsls	r3, r3, #3
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	e001      	b.n	800b0fe <dhcp_reboot+0xf2>
 800b0fa:	f242 7310 	movw	r3, #10000	; 0x2710
 800b0fe:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b100:	89bb      	ldrh	r3, [r7, #12]
 800b102:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b106:	4a0a      	ldr	r2, [pc, #40]	; (800b130 <dhcp_reboot+0x124>)
 800b108:	fb82 1203 	smull	r1, r2, r2, r3
 800b10c:	1152      	asrs	r2, r2, #5
 800b10e:	17db      	asrs	r3, r3, #31
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	b29a      	uxth	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b118:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20000014 	.word	0x20000014
 800b128:	20000110 	.word	0x20000110
 800b12c:	080115ec 	.word	0x080115ec
 800b130:	10624dd3 	.word	0x10624dd3

0800b134 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af02      	add	r7, sp, #8
 800b13a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a1b      	ldr	r3, [r3, #32]
 800b140:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <dhcp_release+0x1a>
    return ERR_ARG;
 800b148:	f06f 030f 	mvn.w	r3, #15
 800b14c:	e072      	b.n	800b234 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 ff31 	bl	800bfbc <dhcp_supplied_address>
 800b15a:	4603      	mov	r3, r0
 800b15c:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800b15e:	2100      	movs	r1, #0
 800b160:	6978      	ldr	r0, [r7, #20]
 800b162:	f000 f8a7 	bl	800b2b4 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2200      	movs	r2, #0
 800b16a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	2200      	movs	r2, #0
 800b170:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2200      	movs	r2, #0
 800b176:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2200      	movs	r2, #0
 800b17c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2200      	movs	r2, #0
 800b182:	63da      	str	r2, [r3, #60]	; 0x3c
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	639a      	str	r2, [r3, #56]	; 0x38
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2200      	movs	r2, #0
 800b198:	845a      	strh	r2, [r3, #34]	; 0x22
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	841a      	strh	r2, [r3, #32]
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	8c1a      	ldrh	r2, [r3, #32]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	83da      	strh	r2, [r3, #30]
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	8bda      	ldrh	r2, [r3, #30]
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800b1b2:	7cfb      	ldrb	r3, [r7, #19]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	e03b      	b.n	800b234 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800b1bc:	2207      	movs	r2, #7
 800b1be:	6979      	ldr	r1, [r7, #20]
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fcfd 	bl	800bbc0 <dhcp_create_msg>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800b1ca:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d128      	bne.n	800b224 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800b1d2:	2204      	movs	r2, #4
 800b1d4:	2136      	movs	r1, #54	; 0x36
 800b1d6:	6978      	ldr	r0, [r7, #20]
 800b1d8:	f000 f886 	bl	800b2e8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f8 fcf9 	bl	8003bd6 <lwip_htonl>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6978      	ldr	r0, [r7, #20]
 800b1ea:	f000 f919 	bl	800b420 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800b1ee:	6978      	ldr	r0, [r7, #20]
 800b1f0:	f000 fe8a 	bl	800bf08 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	8a9b      	ldrh	r3, [r3, #20]
 800b1fc:	33f0      	adds	r3, #240	; 0xf0
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7f9 fc6e 	bl	8004ae4 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800b208:	4b0c      	ldr	r3, [pc, #48]	; (800b23c <dhcp_release+0x108>)
 800b20a:	6818      	ldr	r0, [r3, #0]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	68d9      	ldr	r1, [r3, #12]
 800b210:	f107 020c 	add.w	r2, r7, #12
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	2343      	movs	r3, #67	; 0x43
 800b21a:	f7fe fe13 	bl	8009e44 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b21e:	6978      	ldr	r0, [r7, #20]
 800b220:	f000 fe30 	bl	800be84 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b224:	4b06      	ldr	r3, [pc, #24]	; (800b240 <dhcp_release+0x10c>)
 800b226:	4a06      	ldr	r2, [pc, #24]	; (800b240 <dhcp_release+0x10c>)
 800b228:	4905      	ldr	r1, [pc, #20]	; (800b240 <dhcp_release+0x10c>)
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7f9 f94e 	bl	80044cc <netif_set_addr>

  return result;
 800b230:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	20000110 	.word	0x20000110
 800b240:	080115e8 	.word	0x080115e8

0800b244 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d107      	bne.n	800b262 <dhcp_stop+0x1e>
 800b252:	4b14      	ldr	r3, [pc, #80]	; (800b2a4 <dhcp_stop+0x60>)
 800b254:	f240 5242 	movw	r2, #1346	; 0x542
 800b258:	4913      	ldr	r1, [pc, #76]	; (800b2a8 <dhcp_stop+0x64>)
 800b25a:	4814      	ldr	r0, [pc, #80]	; (800b2ac <dhcp_stop+0x68>)
 800b25c:	f003 f944 	bl	800e4e8 <iprintf>
 800b260:	e01d      	b.n	800b29e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d017      	beq.n	800b29e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d006      	beq.n	800b284 <dhcp_stop+0x40>
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <dhcp_stop+0x60>)
 800b278:	f240 524f 	movw	r2, #1359	; 0x54f
 800b27c:	490c      	ldr	r1, [pc, #48]	; (800b2b0 <dhcp_stop+0x6c>)
 800b27e:	480b      	ldr	r0, [pc, #44]	; (800b2ac <dhcp_stop+0x68>)
 800b280:	f003 f932 	bl	800e4e8 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800b284:	2100      	movs	r1, #0
 800b286:	68f8      	ldr	r0, [r7, #12]
 800b288:	f000 f814 	bl	800b2b4 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	7a1b      	ldrb	r3, [r3, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d004      	beq.n	800b29e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800b294:	f7ff f852 	bl	800a33c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2200      	movs	r2, #0
 800b29c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	0801097c 	.word	0x0801097c
 800b2a8:	08010af0 	.word	0x08010af0
 800b2ac:	080109dc 	.word	0x080109dc
 800b2b0:	08010aa8 	.word	0x08010aa8

0800b2b4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	7a5b      	ldrb	r3, [r3, #9]
 800b2c4:	78fa      	ldrb	r2, [r7, #3]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d008      	beq.n	800b2dc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	78fa      	ldrb	r2, [r7, #3]
 800b2ce:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	82da      	strh	r2, [r3, #22]
  }
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	8a9b      	ldrh	r3, [r3, #20]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	78bb      	ldrb	r3, [r7, #2]
 800b300:	4413      	add	r3, r2
 800b302:	3302      	adds	r3, #2
 800b304:	2b44      	cmp	r3, #68	; 0x44
 800b306:	d906      	bls.n	800b316 <dhcp_option+0x2e>
 800b308:	4b11      	ldr	r3, [pc, #68]	; (800b350 <dhcp_option+0x68>)
 800b30a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b30e:	4911      	ldr	r1, [pc, #68]	; (800b354 <dhcp_option+0x6c>)
 800b310:	4811      	ldr	r0, [pc, #68]	; (800b358 <dhcp_option+0x70>)
 800b312:	f003 f8e9 	bl	800e4e8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	691a      	ldr	r2, [r3, #16]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8a9b      	ldrh	r3, [r3, #20]
 800b31e:	1c59      	adds	r1, r3, #1
 800b320:	b288      	uxth	r0, r1
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	8288      	strh	r0, [r1, #20]
 800b326:	4413      	add	r3, r2
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	8a9b      	ldrh	r3, [r3, #20]
 800b336:	1c59      	adds	r1, r3, #1
 800b338:	b288      	uxth	r0, r1
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	8288      	strh	r0, [r1, #20]
 800b33e:	4413      	add	r3, r2
 800b340:	78ba      	ldrb	r2, [r7, #2]
 800b342:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	0801097c 	.word	0x0801097c
 800b354:	08010b0c 	.word	0x08010b0c
 800b358:	080109dc 	.word	0x080109dc

0800b35c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	8a9b      	ldrh	r3, [r3, #20]
 800b36c:	2b43      	cmp	r3, #67	; 0x43
 800b36e:	d906      	bls.n	800b37e <dhcp_option_byte+0x22>
 800b370:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <dhcp_option_byte+0x44>)
 800b372:	f240 527b 	movw	r2, #1403	; 0x57b
 800b376:	490b      	ldr	r1, [pc, #44]	; (800b3a4 <dhcp_option_byte+0x48>)
 800b378:	480b      	ldr	r0, [pc, #44]	; (800b3a8 <dhcp_option_byte+0x4c>)
 800b37a:	f003 f8b5 	bl	800e4e8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691a      	ldr	r2, [r3, #16]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8a9b      	ldrh	r3, [r3, #20]
 800b386:	1c59      	adds	r1, r3, #1
 800b388:	b288      	uxth	r0, r1
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	8288      	strh	r0, [r1, #20]
 800b38e:	4413      	add	r3, r2
 800b390:	78fa      	ldrb	r2, [r7, #3]
 800b392:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b396:	bf00      	nop
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	0801097c 	.word	0x0801097c
 800b3a4:	08010b54 	.word	0x08010b54
 800b3a8:	080109dc 	.word	0x080109dc

0800b3ac <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	8a9b      	ldrh	r3, [r3, #20]
 800b3bc:	3302      	adds	r3, #2
 800b3be:	2b44      	cmp	r3, #68	; 0x44
 800b3c0:	d906      	bls.n	800b3d0 <dhcp_option_short+0x24>
 800b3c2:	4b14      	ldr	r3, [pc, #80]	; (800b414 <dhcp_option_short+0x68>)
 800b3c4:	f240 5282 	movw	r2, #1410	; 0x582
 800b3c8:	4913      	ldr	r1, [pc, #76]	; (800b418 <dhcp_option_short+0x6c>)
 800b3ca:	4814      	ldr	r0, [pc, #80]	; (800b41c <dhcp_option_short+0x70>)
 800b3cc:	f003 f88c 	bl	800e4e8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800b3d0:	887b      	ldrh	r3, [r7, #2]
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	b298      	uxth	r0, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	8a9b      	ldrh	r3, [r3, #20]
 800b3de:	1c59      	adds	r1, r3, #1
 800b3e0:	b28c      	uxth	r4, r1
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	828c      	strh	r4, [r1, #20]
 800b3e6:	b2c1      	uxtb	r1, r0
 800b3e8:	4413      	add	r3, r2
 800b3ea:	460a      	mov	r2, r1
 800b3ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	8a9b      	ldrh	r3, [r3, #20]
 800b3f8:	1c59      	adds	r1, r3, #1
 800b3fa:	b288      	uxth	r0, r1
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	8288      	strh	r0, [r1, #20]
 800b400:	8879      	ldrh	r1, [r7, #2]
 800b402:	b2c9      	uxtb	r1, r1
 800b404:	4413      	add	r3, r2
 800b406:	460a      	mov	r2, r1
 800b408:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	bd90      	pop	{r4, r7, pc}
 800b414:	0801097c 	.word	0x0801097c
 800b418:	08010b90 	.word	0x08010b90
 800b41c:	080109dc 	.word	0x080109dc

0800b420 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800b420:	b590      	push	{r4, r7, lr}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	8a9b      	ldrh	r3, [r3, #20]
 800b42e:	3304      	adds	r3, #4
 800b430:	2b44      	cmp	r3, #68	; 0x44
 800b432:	d906      	bls.n	800b442 <dhcp_option_long+0x22>
 800b434:	4b22      	ldr	r3, [pc, #136]	; (800b4c0 <dhcp_option_long+0xa0>)
 800b436:	f240 528a 	movw	r2, #1418	; 0x58a
 800b43a:	4922      	ldr	r1, [pc, #136]	; (800b4c4 <dhcp_option_long+0xa4>)
 800b43c:	4822      	ldr	r0, [pc, #136]	; (800b4c8 <dhcp_option_long+0xa8>)
 800b43e:	f003 f853 	bl	800e4e8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	0e18      	lsrs	r0, r3, #24
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	691a      	ldr	r2, [r3, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	8a9b      	ldrh	r3, [r3, #20]
 800b44e:	1c59      	adds	r1, r3, #1
 800b450:	b28c      	uxth	r4, r1
 800b452:	6879      	ldr	r1, [r7, #4]
 800b454:	828c      	strh	r4, [r1, #20]
 800b456:	b2c1      	uxtb	r1, r0
 800b458:	4413      	add	r3, r2
 800b45a:	460a      	mov	r2, r1
 800b45c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	0c18      	lsrs	r0, r3, #16
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	8a9b      	ldrh	r3, [r3, #20]
 800b46c:	1c59      	adds	r1, r3, #1
 800b46e:	b28c      	uxth	r4, r1
 800b470:	6879      	ldr	r1, [r7, #4]
 800b472:	828c      	strh	r4, [r1, #20]
 800b474:	b2c1      	uxtb	r1, r0
 800b476:	4413      	add	r3, r2
 800b478:	460a      	mov	r2, r1
 800b47a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	0a18      	lsrs	r0, r3, #8
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	8a9b      	ldrh	r3, [r3, #20]
 800b48a:	1c59      	adds	r1, r3, #1
 800b48c:	b28c      	uxth	r4, r1
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	828c      	strh	r4, [r1, #20]
 800b492:	b2c1      	uxtb	r1, r0
 800b494:	4413      	add	r3, r2
 800b496:	460a      	mov	r2, r1
 800b498:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	691a      	ldr	r2, [r3, #16]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8a9b      	ldrh	r3, [r3, #20]
 800b4a4:	1c59      	adds	r1, r3, #1
 800b4a6:	b288      	uxth	r0, r1
 800b4a8:	6879      	ldr	r1, [r7, #4]
 800b4aa:	8288      	strh	r0, [r1, #20]
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	b2c9      	uxtb	r1, r1
 800b4b0:	4413      	add	r3, r2
 800b4b2:	460a      	mov	r2, r1
 800b4b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd90      	pop	{r4, r7, pc}
 800b4c0:	0801097c 	.word	0x0801097c
 800b4c4:	08010bd4 	.word	0x08010bd4
 800b4c8:	080109dc 	.word	0x080109dc

0800b4cc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08e      	sub	sp, #56	; 0x38
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800b4de:	2208      	movs	r2, #8
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	48b3      	ldr	r0, [pc, #716]	; (800b7b0 <dhcp_parse_reply+0x2e4>)
 800b4e4:	f002 fff8 	bl	800e4d8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	895b      	ldrh	r3, [r3, #10]
 800b4ec:	2b2b      	cmp	r3, #43	; 0x2b
 800b4ee:	d802      	bhi.n	800b4f6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800b4f0:	f06f 0301 	mvn.w	r3, #1
 800b4f4:	e26a      	b.n	800b9cc <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800b4fe:	23f0      	movs	r3, #240	; 0xf0
 800b500:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	891b      	ldrh	r3, [r3, #8]
 800b506:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800b50c:	e00c      	b.n	800b528 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	895b      	ldrh	r3, [r3, #10]
 800b512:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800b528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <dhcp_parse_reply+0x6c>
 800b52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b530:	895b      	ldrh	r3, [r3, #10]
 800b532:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b534:	429a      	cmp	r2, r3
 800b536:	d2ea      	bcs.n	800b50e <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800b53e:	f06f 0301 	mvn.w	r3, #1
 800b542:	e243      	b.n	800b9cc <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800b544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b546:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800b548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b54a:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b552:	e1fb      	b.n	800b94c <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800b554:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b558:	4413      	add	r3, r2
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800b562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b566:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800b568:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b56a:	3302      	adds	r3, #2
 800b56c:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800b56e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b570:	3301      	adds	r3, #1
 800b572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b574:	8952      	ldrh	r2, [r2, #10]
 800b576:	4293      	cmp	r3, r2
 800b578:	da06      	bge.n	800b588 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800b57a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b57c:	3301      	adds	r3, #1
 800b57e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b580:	4413      	add	r3, r2
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	77fb      	strb	r3, [r7, #31]
 800b586:	e00a      	b.n	800b59e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <dhcp_parse_reply+0xce>
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	e000      	b.n	800b59c <dhcp_parse_reply+0xd0>
 800b59a:	2300      	movs	r3, #0
 800b59c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800b59e:	7ffb      	ldrb	r3, [r7, #31]
 800b5a0:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800b5a2:	7d7b      	ldrb	r3, [r7, #21]
 800b5a4:	2b3b      	cmp	r3, #59	; 0x3b
 800b5a6:	f200 8121 	bhi.w	800b7ec <dhcp_parse_reply+0x320>
 800b5aa:	a201      	add	r2, pc, #4	; (adr r2, 800b5b0 <dhcp_parse_reply+0xe4>)
 800b5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b0:	0800b6a1 	.word	0x0800b6a1
 800b5b4:	0800b6b1 	.word	0x0800b6b1
 800b5b8:	0800b7ed 	.word	0x0800b7ed
 800b5bc:	0800b6d1 	.word	0x0800b6d1
 800b5c0:	0800b7ed 	.word	0x0800b7ed
 800b5c4:	0800b7ed 	.word	0x0800b7ed
 800b5c8:	0800b7ed 	.word	0x0800b7ed
 800b5cc:	0800b7ed 	.word	0x0800b7ed
 800b5d0:	0800b7ed 	.word	0x0800b7ed
 800b5d4:	0800b7ed 	.word	0x0800b7ed
 800b5d8:	0800b7ed 	.word	0x0800b7ed
 800b5dc:	0800b7ed 	.word	0x0800b7ed
 800b5e0:	0800b7ed 	.word	0x0800b7ed
 800b5e4:	0800b7ed 	.word	0x0800b7ed
 800b5e8:	0800b7ed 	.word	0x0800b7ed
 800b5ec:	0800b7ed 	.word	0x0800b7ed
 800b5f0:	0800b7ed 	.word	0x0800b7ed
 800b5f4:	0800b7ed 	.word	0x0800b7ed
 800b5f8:	0800b7ed 	.word	0x0800b7ed
 800b5fc:	0800b7ed 	.word	0x0800b7ed
 800b600:	0800b7ed 	.word	0x0800b7ed
 800b604:	0800b7ed 	.word	0x0800b7ed
 800b608:	0800b7ed 	.word	0x0800b7ed
 800b60c:	0800b7ed 	.word	0x0800b7ed
 800b610:	0800b7ed 	.word	0x0800b7ed
 800b614:	0800b7ed 	.word	0x0800b7ed
 800b618:	0800b7ed 	.word	0x0800b7ed
 800b61c:	0800b7ed 	.word	0x0800b7ed
 800b620:	0800b7ed 	.word	0x0800b7ed
 800b624:	0800b7ed 	.word	0x0800b7ed
 800b628:	0800b7ed 	.word	0x0800b7ed
 800b62c:	0800b7ed 	.word	0x0800b7ed
 800b630:	0800b7ed 	.word	0x0800b7ed
 800b634:	0800b7ed 	.word	0x0800b7ed
 800b638:	0800b7ed 	.word	0x0800b7ed
 800b63c:	0800b7ed 	.word	0x0800b7ed
 800b640:	0800b7ed 	.word	0x0800b7ed
 800b644:	0800b7ed 	.word	0x0800b7ed
 800b648:	0800b7ed 	.word	0x0800b7ed
 800b64c:	0800b7ed 	.word	0x0800b7ed
 800b650:	0800b7ed 	.word	0x0800b7ed
 800b654:	0800b7ed 	.word	0x0800b7ed
 800b658:	0800b7ed 	.word	0x0800b7ed
 800b65c:	0800b7ed 	.word	0x0800b7ed
 800b660:	0800b7ed 	.word	0x0800b7ed
 800b664:	0800b7ed 	.word	0x0800b7ed
 800b668:	0800b7ed 	.word	0x0800b7ed
 800b66c:	0800b7ed 	.word	0x0800b7ed
 800b670:	0800b7ed 	.word	0x0800b7ed
 800b674:	0800b7ed 	.word	0x0800b7ed
 800b678:	0800b7ed 	.word	0x0800b7ed
 800b67c:	0800b6f7 	.word	0x0800b6f7
 800b680:	0800b717 	.word	0x0800b717
 800b684:	0800b751 	.word	0x0800b751
 800b688:	0800b771 	.word	0x0800b771
 800b68c:	0800b7ed 	.word	0x0800b7ed
 800b690:	0800b7ed 	.word	0x0800b7ed
 800b694:	0800b7ed 	.word	0x0800b7ed
 800b698:	0800b791 	.word	0x0800b791
 800b69c:	0800b7cd 	.word	0x0800b7cd
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	7ffb      	ldrb	r3, [r7, #31]
 800b6a6:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800b6a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800b6ae:	e0a0      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	2b04      	cmp	r3, #4
 800b6b4:	d009      	beq.n	800b6ca <dhcp_parse_reply+0x1fe>
 800b6b6:	4b3f      	ldr	r3, [pc, #252]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b6b8:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800b6bc:	493e      	ldr	r1, [pc, #248]	; (800b7b8 <dhcp_parse_reply+0x2ec>)
 800b6be:	483f      	ldr	r0, [pc, #252]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b6c0:	f002 ff12 	bl	800e4e8 <iprintf>
 800b6c4:	f06f 0305 	mvn.w	r3, #5
 800b6c8:	e180      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800b6ca:	2306      	movs	r3, #6
 800b6cc:	61bb      	str	r3, [r7, #24]
        break;
 800b6ce:	e090      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800b6d0:	2304      	movs	r3, #4
 800b6d2:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800b6d4:	7ffa      	ldrb	r2, [r7, #31]
 800b6d6:	7fbb      	ldrb	r3, [r7, #30]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d209      	bcs.n	800b6f0 <dhcp_parse_reply+0x224>
 800b6dc:	4b35      	ldr	r3, [pc, #212]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b6de:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800b6e2:	4937      	ldr	r1, [pc, #220]	; (800b7c0 <dhcp_parse_reply+0x2f4>)
 800b6e4:	4835      	ldr	r0, [pc, #212]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b6e6:	f002 feff 	bl	800e4e8 <iprintf>
 800b6ea:	f06f 0305 	mvn.w	r3, #5
 800b6ee:	e16d      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800b6f0:	2307      	movs	r3, #7
 800b6f2:	61bb      	str	r3, [r7, #24]
        break;
 800b6f4:	e07d      	b.n	800b7f2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b6f6:	7ffb      	ldrb	r3, [r7, #31]
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d009      	beq.n	800b710 <dhcp_parse_reply+0x244>
 800b6fc:	4b2d      	ldr	r3, [pc, #180]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b6fe:	f240 6209 	movw	r2, #1545	; 0x609
 800b702:	492d      	ldr	r1, [pc, #180]	; (800b7b8 <dhcp_parse_reply+0x2ec>)
 800b704:	482d      	ldr	r0, [pc, #180]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b706:	f002 feef 	bl	800e4e8 <iprintf>
 800b70a:	f06f 0305 	mvn.w	r3, #5
 800b70e:	e15d      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800b710:	2303      	movs	r3, #3
 800b712:	61bb      	str	r3, [r7, #24]
        break;
 800b714:	e06d      	b.n	800b7f2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b716:	7ffb      	ldrb	r3, [r7, #31]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d009      	beq.n	800b730 <dhcp_parse_reply+0x264>
 800b71c:	4b25      	ldr	r3, [pc, #148]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b71e:	f240 6217 	movw	r2, #1559	; 0x617
 800b722:	4928      	ldr	r1, [pc, #160]	; (800b7c4 <dhcp_parse_reply+0x2f8>)
 800b724:	4825      	ldr	r0, [pc, #148]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b726:	f002 fedf 	bl	800e4e8 <iprintf>
 800b72a:	f06f 0305 	mvn.w	r3, #5
 800b72e:	e14d      	b.n	800b9cc <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800b730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b732:	2bf0      	cmp	r3, #240	; 0xf0
 800b734:	d009      	beq.n	800b74a <dhcp_parse_reply+0x27e>
 800b736:	4b1f      	ldr	r3, [pc, #124]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b738:	f240 6219 	movw	r2, #1561	; 0x619
 800b73c:	4922      	ldr	r1, [pc, #136]	; (800b7c8 <dhcp_parse_reply+0x2fc>)
 800b73e:	481f      	ldr	r0, [pc, #124]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b740:	f002 fed2 	bl	800e4e8 <iprintf>
 800b744:	f06f 0305 	mvn.w	r3, #5
 800b748:	e140      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800b74a:	2300      	movs	r3, #0
 800b74c:	61bb      	str	r3, [r7, #24]
        break;
 800b74e:	e050      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b750:	7ffb      	ldrb	r3, [r7, #31]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d009      	beq.n	800b76a <dhcp_parse_reply+0x29e>
 800b756:	4b17      	ldr	r3, [pc, #92]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b758:	f240 621d 	movw	r2, #1565	; 0x61d
 800b75c:	4919      	ldr	r1, [pc, #100]	; (800b7c4 <dhcp_parse_reply+0x2f8>)
 800b75e:	4817      	ldr	r0, [pc, #92]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b760:	f002 fec2 	bl	800e4e8 <iprintf>
 800b764:	f06f 0305 	mvn.w	r3, #5
 800b768:	e130      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800b76a:	2301      	movs	r3, #1
 800b76c:	61bb      	str	r3, [r7, #24]
        break;
 800b76e:	e040      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b770:	7ffb      	ldrb	r3, [r7, #31]
 800b772:	2b04      	cmp	r3, #4
 800b774:	d009      	beq.n	800b78a <dhcp_parse_reply+0x2be>
 800b776:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b778:	f240 6221 	movw	r2, #1569	; 0x621
 800b77c:	490e      	ldr	r1, [pc, #56]	; (800b7b8 <dhcp_parse_reply+0x2ec>)
 800b77e:	480f      	ldr	r0, [pc, #60]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b780:	f002 feb2 	bl	800e4e8 <iprintf>
 800b784:	f06f 0305 	mvn.w	r3, #5
 800b788:	e120      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800b78a:	2302      	movs	r3, #2
 800b78c:	61bb      	str	r3, [r7, #24]
        break;
 800b78e:	e030      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b790:	7ffb      	ldrb	r3, [r7, #31]
 800b792:	2b04      	cmp	r3, #4
 800b794:	d009      	beq.n	800b7aa <dhcp_parse_reply+0x2de>
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <dhcp_parse_reply+0x2e8>)
 800b798:	f240 6225 	movw	r2, #1573	; 0x625
 800b79c:	4906      	ldr	r1, [pc, #24]	; (800b7b8 <dhcp_parse_reply+0x2ec>)
 800b79e:	4807      	ldr	r0, [pc, #28]	; (800b7bc <dhcp_parse_reply+0x2f0>)
 800b7a0:	f002 fea2 	bl	800e4e8 <iprintf>
 800b7a4:	f06f 0305 	mvn.w	r3, #5
 800b7a8:	e110      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	61bb      	str	r3, [r7, #24]
        break;
 800b7ae:	e020      	b.n	800b7f2 <dhcp_parse_reply+0x326>
 800b7b0:	200069b4 	.word	0x200069b4
 800b7b4:	0801097c 	.word	0x0801097c
 800b7b8:	08010c14 	.word	0x08010c14
 800b7bc:	080109dc 	.word	0x080109dc
 800b7c0:	08010c20 	.word	0x08010c20
 800b7c4:	08010c34 	.word	0x08010c34
 800b7c8:	08010c40 	.word	0x08010c40
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b7cc:	7ffb      	ldrb	r3, [r7, #31]
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d009      	beq.n	800b7e6 <dhcp_parse_reply+0x31a>
 800b7d2:	4b80      	ldr	r3, [pc, #512]	; (800b9d4 <dhcp_parse_reply+0x508>)
 800b7d4:	f240 6229 	movw	r2, #1577	; 0x629
 800b7d8:	497f      	ldr	r1, [pc, #508]	; (800b9d8 <dhcp_parse_reply+0x50c>)
 800b7da:	4880      	ldr	r0, [pc, #512]	; (800b9dc <dhcp_parse_reply+0x510>)
 800b7dc:	f002 fe84 	bl	800e4e8 <iprintf>
 800b7e0:	f06f 0305 	mvn.w	r3, #5
 800b7e4:	e0f2      	b.n	800b9cc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800b7e6:	2305      	movs	r3, #5
 800b7e8:	61bb      	str	r3, [r7, #24]
        break;
 800b7ea:	e002      	b.n	800b7f2 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800b7f0:	bf00      	nop
    }
    offset += len + 2;
 800b7f2:	7ffb      	ldrb	r3, [r7, #31]
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b7f8:	4413      	add	r3, r2
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	3302      	adds	r3, #2
 800b7fe:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800b800:	7fbb      	ldrb	r3, [r7, #30]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d079      	beq.n	800b8fa <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	db02      	blt.n	800b816 <dhcp_parse_reply+0x34a>
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b07      	cmp	r3, #7
 800b814:	dd06      	ble.n	800b824 <dhcp_parse_reply+0x358>
 800b816:	4b6f      	ldr	r3, [pc, #444]	; (800b9d4 <dhcp_parse_reply+0x508>)
 800b818:	f240 6236 	movw	r2, #1590	; 0x636
 800b81c:	4970      	ldr	r1, [pc, #448]	; (800b9e0 <dhcp_parse_reply+0x514>)
 800b81e:	486f      	ldr	r0, [pc, #444]	; (800b9dc <dhcp_parse_reply+0x510>)
 800b820:	f002 fe62 	bl	800e4e8 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800b824:	4a6f      	ldr	r2, [pc, #444]	; (800b9e4 <dhcp_parse_reply+0x518>)
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d164      	bne.n	800b8fa <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800b830:	7fbb      	ldrb	r3, [r7, #30]
 800b832:	2b04      	cmp	r3, #4
 800b834:	bf28      	it	cs
 800b836:	2304      	movcs	r3, #4
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800b83c:	8afb      	ldrh	r3, [r7, #22]
 800b83e:	8a7a      	ldrh	r2, [r7, #18]
 800b840:	f107 0108 	add.w	r1, r7, #8
 800b844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b846:	f7f9 fcc1 	bl	80051cc <pbuf_copy_partial>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461a      	mov	r2, r3
 800b84e:	8a7b      	ldrh	r3, [r7, #18]
 800b850:	4293      	cmp	r3, r2
 800b852:	d002      	beq.n	800b85a <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800b854:	f06f 0301 	mvn.w	r3, #1
 800b858:	e0b8      	b.n	800b9cc <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800b85a:	7fbb      	ldrb	r3, [r7, #30]
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d927      	bls.n	800b8b0 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800b860:	7fbb      	ldrb	r3, [r7, #30]
 800b862:	f003 0303 	and.w	r3, r3, #3
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d009      	beq.n	800b880 <dhcp_parse_reply+0x3b4>
 800b86c:	4b59      	ldr	r3, [pc, #356]	; (800b9d4 <dhcp_parse_reply+0x508>)
 800b86e:	f240 623e 	movw	r2, #1598	; 0x63e
 800b872:	495d      	ldr	r1, [pc, #372]	; (800b9e8 <dhcp_parse_reply+0x51c>)
 800b874:	4859      	ldr	r0, [pc, #356]	; (800b9dc <dhcp_parse_reply+0x510>)
 800b876:	f002 fe37 	bl	800e4e8 <iprintf>
 800b87a:	f06f 0305 	mvn.w	r3, #5
 800b87e:	e0a5      	b.n	800b9cc <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800b880:	4a58      	ldr	r2, [pc, #352]	; (800b9e4 <dhcp_parse_reply+0x518>)
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	4413      	add	r3, r2
 800b886:	2201      	movs	r2, #1
 800b888:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f8 f9a2 	bl	8003bd6 <lwip_htonl>
 800b892:	4601      	mov	r1, r0
 800b894:	4a55      	ldr	r2, [pc, #340]	; (800b9ec <dhcp_parse_reply+0x520>)
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800b89c:	7fbb      	ldrb	r3, [r7, #30]
 800b89e:	3b04      	subs	r3, #4
 800b8a0:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800b8a2:	8afb      	ldrh	r3, [r7, #22]
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800b8ae:	e7ac      	b.n	800b80a <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800b8b0:	7fbb      	ldrb	r3, [r7, #30]
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d106      	bne.n	800b8c4 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7f8 f98c 	bl	8003bd6 <lwip_htonl>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	60bb      	str	r3, [r7, #8]
 800b8c2:	e010      	b.n	800b8e6 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800b8c4:	7fbb      	ldrb	r3, [r7, #30]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d009      	beq.n	800b8de <dhcp_parse_reply+0x412>
 800b8ca:	4b42      	ldr	r3, [pc, #264]	; (800b9d4 <dhcp_parse_reply+0x508>)
 800b8cc:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800b8d0:	4947      	ldr	r1, [pc, #284]	; (800b9f0 <dhcp_parse_reply+0x524>)
 800b8d2:	4842      	ldr	r0, [pc, #264]	; (800b9dc <dhcp_parse_reply+0x510>)
 800b8d4:	f002 fe08 	bl	800e4e8 <iprintf>
 800b8d8:	f06f 0305 	mvn.w	r3, #5
 800b8dc:	e076      	b.n	800b9cc <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800b8e6:	4a3f      	ldr	r2, [pc, #252]	; (800b9e4 <dhcp_parse_reply+0x518>)
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	493e      	ldr	r1, [pc, #248]	; (800b9ec <dhcp_parse_reply+0x520>)
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800b8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fc:	895b      	ldrh	r3, [r3, #10]
 800b8fe:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b900:	429a      	cmp	r2, r3
 800b902:	d323      	bcc.n	800b94c <dhcp_parse_reply+0x480>
      offset -= q->len;
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	895b      	ldrh	r3, [r3, #10]
 800b908:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	895b      	ldrh	r3, [r3, #10]
 800b912:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800b918:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b91a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d223      	bcs.n	800b968 <dhcp_parse_reply+0x49c>
 800b920:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b922:	2b00      	cmp	r3, #0
 800b924:	d020      	beq.n	800b968 <dhcp_parse_reply+0x49c>
        q = q->next;
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <dhcp_parse_reply+0x47a>
 800b932:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <dhcp_parse_reply+0x508>)
 800b934:	f240 6254 	movw	r2, #1620	; 0x654
 800b938:	492e      	ldr	r1, [pc, #184]	; (800b9f4 <dhcp_parse_reply+0x528>)
 800b93a:	4828      	ldr	r0, [pc, #160]	; (800b9dc <dhcp_parse_reply+0x510>)
 800b93c:	f002 fdd4 	bl	800e4e8 <iprintf>
 800b940:	f06f 0305 	mvn.w	r3, #5
 800b944:	e042      	b.n	800b9cc <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <dhcp_parse_reply+0x49c>
 800b952:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b954:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b956:	429a      	cmp	r2, r3
 800b958:	d206      	bcs.n	800b968 <dhcp_parse_reply+0x49c>
 800b95a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b95c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b95e:	4413      	add	r3, r2
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2bff      	cmp	r3, #255	; 0xff
 800b964:	f47f adf6 	bne.w	800b554 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800b968:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <dhcp_parse_reply+0x518>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d018      	beq.n	800b9a2 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b970:	4b1e      	ldr	r3, [pc, #120]	; (800b9ec <dhcp_parse_reply+0x520>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b976:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <dhcp_parse_reply+0x518>)
 800b978:	2200      	movs	r2, #0
 800b97a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d102      	bne.n	800b988 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800b982:	2301      	movs	r3, #1
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
 800b986:	e00c      	b.n	800b9a2 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d102      	bne.n	800b994 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	623b      	str	r3, [r7, #32]
 800b992:	e006      	b.n	800b9a2 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b03      	cmp	r3, #3
 800b998:	d103      	bne.n	800b9a2 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800b9ac:	236c      	movs	r3, #108	; 0x6c
 800b9ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800b9b0:	23ec      	movs	r3, #236	; 0xec
 800b9b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800b9b4:	e5a8      	b.n	800b508 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d006      	beq.n	800b9ca <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800b9c0:	232c      	movs	r3, #44	; 0x2c
 800b9c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800b9c4:	236c      	movs	r3, #108	; 0x6c
 800b9c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800b9c8:	e59e      	b.n	800b508 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3738      	adds	r7, #56	; 0x38
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	0801097c 	.word	0x0801097c
 800b9d8:	08010c14 	.word	0x08010c14
 800b9dc:	080109dc 	.word	0x080109dc
 800b9e0:	08010c58 	.word	0x08010c58
 800b9e4:	200069b4 	.word	0x200069b4
 800b9e8:	08010c6c 	.word	0x08010c6c
 800b9ec:	200069bc 	.word	0x200069bc
 800b9f0:	08010c84 	.word	0x08010c84
 800b9f4:	08010c98 	.word	0x08010c98

0800b9f8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08a      	sub	sp, #40	; 0x28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ba06:	4b68      	ldr	r3, [pc, #416]	; (800bba8 <dhcp_recv+0x1b0>)
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	6a1b      	ldr	r3, [r3, #32]
 800ba10:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80a9 	beq.w	800bb72 <dhcp_recv+0x17a>
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	7a1b      	ldrb	r3, [r3, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 80a4 	beq.w	800bb72 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d006      	beq.n	800ba40 <dhcp_recv+0x48>
 800ba32:	4b5e      	ldr	r3, [pc, #376]	; (800bbac <dhcp_recv+0x1b4>)
 800ba34:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800ba38:	495d      	ldr	r1, [pc, #372]	; (800bbb0 <dhcp_recv+0x1b8>)
 800ba3a:	485e      	ldr	r0, [pc, #376]	; (800bbb4 <dhcp_recv+0x1bc>)
 800ba3c:	f002 fd54 	bl	800e4e8 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	895b      	ldrh	r3, [r3, #10]
 800ba44:	2b2b      	cmp	r3, #43	; 0x2b
 800ba46:	f240 8096 	bls.w	800bb76 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	f040 8093 	bne.w	800bb7a <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800ba54:	2300      	movs	r3, #0
 800ba56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba5a:	e012      	b.n	800ba82 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ba5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba60:	6a3a      	ldr	r2, [r7, #32]
 800ba62:	4413      	add	r3, r2
 800ba64:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800ba68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6c:	69b9      	ldr	r1, [r7, #24]
 800ba6e:	440b      	add	r3, r1
 800ba70:	7f1b      	ldrb	r3, [r3, #28]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	f040 8083 	bne.w	800bb7e <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800ba78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba88:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d207      	bcs.n	800baa0 <dhcp_recv+0xa8>
 800ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba94:	2b05      	cmp	r3, #5
 800ba96:	d803      	bhi.n	800baa0 <dhcp_recv+0xa8>
 800ba98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9c:	2b0f      	cmp	r3, #15
 800ba9e:	d9dd      	bls.n	800ba5c <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7f8 f896 	bl	8003bd6 <lwip_htonl>
 800baaa:	4602      	mov	r2, r0
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d166      	bne.n	800bb82 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800bab4:	6879      	ldr	r1, [r7, #4]
 800bab6:	69f8      	ldr	r0, [r7, #28]
 800bab8:	f7ff fd08 	bl	800b4cc <dhcp_parse_reply>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d161      	bne.n	800bb86 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800bac2:	4b3d      	ldr	r3, [pc, #244]	; (800bbb8 <dhcp_recv+0x1c0>)
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d05f      	beq.n	800bb8a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800baca:	4b3c      	ldr	r3, [pc, #240]	; (800bbbc <dhcp_recv+0x1c4>)
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	2b05      	cmp	r3, #5
 800bad4:	d128      	bne.n	800bb28 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	7a5b      	ldrb	r3, [r3, #9]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d111      	bne.n	800bb02 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800bade:	6a38      	ldr	r0, [r7, #32]
 800bae0:	f7fe fea0 	bl	800a824 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800bae4:	6a3b      	ldr	r3, [r7, #32]
 800bae6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800baea:	f003 0308 	and.w	r3, r3, #8
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d003      	beq.n	800bafa <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800baf2:	6a38      	ldr	r0, [r7, #32]
 800baf4:	f7fe fc66 	bl	800a3c4 <dhcp_check>
 800baf8:	e048      	b.n	800bb8c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800bafa:	6a38      	ldr	r0, [r7, #32]
 800bafc:	f7ff f8a0 	bl	800ac40 <dhcp_bind>
 800bb00:	e044      	b.n	800bb8c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	7a5b      	ldrb	r3, [r3, #9]
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d007      	beq.n	800bb1a <dhcp_recv+0x122>
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	7a5b      	ldrb	r3, [r3, #9]
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	d003      	beq.n	800bb1a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bb16:	2b05      	cmp	r3, #5
 800bb18:	d138      	bne.n	800bb8c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800bb1a:	6a38      	ldr	r0, [r7, #32]
 800bb1c:	f7fe fe82 	bl	800a824 <dhcp_handle_ack>
      dhcp_bind(netif);
 800bb20:	6a38      	ldr	r0, [r7, #32]
 800bb22:	f7ff f88d 	bl	800ac40 <dhcp_bind>
 800bb26:	e031      	b.n	800bb8c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	2b06      	cmp	r3, #6
 800bb2c:	d113      	bne.n	800bb56 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800bb32:	2b03      	cmp	r3, #3
 800bb34:	d00b      	beq.n	800bb4e <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	7a5b      	ldrb	r3, [r3, #9]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d007      	beq.n	800bb4e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d003      	beq.n	800bb4e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	7a5b      	ldrb	r3, [r3, #9]
 800bb4a:	2b05      	cmp	r3, #5
 800bb4c:	d103      	bne.n	800bb56 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800bb4e:	6a38      	ldr	r0, [r7, #32]
 800bb50:	f7fe fc1e 	bl	800a390 <dhcp_handle_nak>
 800bb54:	e01a      	b.n	800bb8c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d10a      	bne.n	800bb72 <dhcp_recv+0x17a>
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	7a5b      	ldrb	r3, [r3, #9]
 800bb60:	2b06      	cmp	r3, #6
 800bb62:	d106      	bne.n	800bb72 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	2200      	movs	r2, #0
 800bb68:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800bb6a:	6a38      	ldr	r0, [r7, #32]
 800bb6c:	f7fe fc5e 	bl	800a42c <dhcp_handle_offer>
 800bb70:	e00c      	b.n	800bb8c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800bb72:	bf00      	nop
 800bb74:	e00a      	b.n	800bb8c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bb76:	bf00      	nop
 800bb78:	e008      	b.n	800bb8c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bb7a:	bf00      	nop
 800bb7c:	e006      	b.n	800bb8c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800bb7e:	bf00      	nop
 800bb80:	e004      	b.n	800bb8c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bb82:	bf00      	nop
 800bb84:	e002      	b.n	800bb8c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bb86:	bf00      	nop
 800bb88:	e000      	b.n	800bb8c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bb8a:	bf00      	nop
  if (dhcp != NULL) {
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7f9 f917 	bl	8004dcc <pbuf_free>
}
 800bb9e:	bf00      	nop
 800bba0:	3728      	adds	r7, #40	; 0x28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	20003448 	.word	0x20003448
 800bbac:	0801097c 	.word	0x0801097c
 800bbb0:	08010aa8 	.word	0x08010aa8
 800bbb4:	080109dc 	.word	0x080109dc
 800bbb8:	200069b4 	.word	0x200069b4
 800bbbc:	200069bc 	.word	0x200069bc

0800bbc0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800bbc0:	b590      	push	{r4, r7, lr}
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d109      	bne.n	800bbe8 <dhcp_create_msg+0x28>
 800bbd4:	4ba3      	ldr	r3, [pc, #652]	; (800be64 <dhcp_create_msg+0x2a4>)
 800bbd6:	f240 721d 	movw	r2, #1821	; 0x71d
 800bbda:	49a3      	ldr	r1, [pc, #652]	; (800be68 <dhcp_create_msg+0x2a8>)
 800bbdc:	48a3      	ldr	r0, [pc, #652]	; (800be6c <dhcp_create_msg+0x2ac>)
 800bbde:	f002 fc83 	bl	800e4e8 <iprintf>
 800bbe2:	f06f 030f 	mvn.w	r3, #15
 800bbe6:	e138      	b.n	800be5a <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <dhcp_create_msg+0x42>
 800bbee:	4b9d      	ldr	r3, [pc, #628]	; (800be64 <dhcp_create_msg+0x2a4>)
 800bbf0:	f240 721e 	movw	r2, #1822	; 0x71e
 800bbf4:	499e      	ldr	r1, [pc, #632]	; (800be70 <dhcp_create_msg+0x2b0>)
 800bbf6:	489d      	ldr	r0, [pc, #628]	; (800be6c <dhcp_create_msg+0x2ac>)
 800bbf8:	f002 fc76 	bl	800e4e8 <iprintf>
 800bbfc:	f06f 0305 	mvn.w	r3, #5
 800bc00:	e12b      	b.n	800be5a <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d006      	beq.n	800bc18 <dhcp_create_msg+0x58>
 800bc0a:	4b96      	ldr	r3, [pc, #600]	; (800be64 <dhcp_create_msg+0x2a4>)
 800bc0c:	f240 721f 	movw	r2, #1823	; 0x71f
 800bc10:	4998      	ldr	r1, [pc, #608]	; (800be74 <dhcp_create_msg+0x2b4>)
 800bc12:	4896      	ldr	r0, [pc, #600]	; (800be6c <dhcp_create_msg+0x2ac>)
 800bc14:	f002 fc68 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d006      	beq.n	800bc2e <dhcp_create_msg+0x6e>
 800bc20:	4b90      	ldr	r3, [pc, #576]	; (800be64 <dhcp_create_msg+0x2a4>)
 800bc22:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800bc26:	4994      	ldr	r1, [pc, #592]	; (800be78 <dhcp_create_msg+0x2b8>)
 800bc28:	4890      	ldr	r0, [pc, #576]	; (800be6c <dhcp_create_msg+0x2ac>)
 800bc2a:	f002 fc5d 	bl	800e4e8 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f44f 719a 	mov.w	r1, #308	; 0x134
 800bc34:	2000      	movs	r0, #0
 800bc36:	f7f8 fd57 	bl	80046e8 <pbuf_alloc>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800bc48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc4c:	e105      	b.n	800be5a <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	895b      	ldrh	r3, [r3, #10]
 800bc54:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800bc58:	d206      	bcs.n	800bc68 <dhcp_create_msg+0xa8>
 800bc5a:	4b82      	ldr	r3, [pc, #520]	; (800be64 <dhcp_create_msg+0x2a4>)
 800bc5c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800bc60:	4986      	ldr	r1, [pc, #536]	; (800be7c <dhcp_create_msg+0x2bc>)
 800bc62:	4882      	ldr	r0, [pc, #520]	; (800be6c <dhcp_create_msg+0x2ac>)
 800bc64:	f002 fc40 	bl	800e4e8 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d103      	bne.n	800bc76 <dhcp_create_msg+0xb6>
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	7a5b      	ldrb	r3, [r3, #9]
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d10d      	bne.n	800bc92 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	7a9b      	ldrb	r3, [r3, #10]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d105      	bne.n	800bc8a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800bc7e:	f002 fc4b 	bl	800e518 <rand>
 800bc82:	4603      	mov	r3, r0
 800bc84:	461a      	mov	r2, r3
 800bc86:	4b7e      	ldr	r3, [pc, #504]	; (800be80 <dhcp_create_msg+0x2c0>)
 800bc88:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800bc8a:	4b7d      	ldr	r3, [pc, #500]	; (800be80 <dhcp_create_msg+0x2c0>)
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	2201      	movs	r2, #1
 800bca2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bcb6:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	691c      	ldr	r4, [r3, #16]
 800bcc8:	4610      	mov	r0, r2
 800bcca:	f7f7 ff84 	bl	8003bd6 <lwip_htonl>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	721a      	strb	r2, [r3, #8]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	2200      	movs	r2, #0
 800bce4:	729a      	strb	r2, [r3, #10]
 800bce6:	2200      	movs	r2, #0
 800bce8:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	731a      	strb	r2, [r3, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	735a      	strb	r2, [r3, #13]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	739a      	strb	r2, [r3, #14]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	2b08      	cmp	r3, #8
 800bd02:	d010      	beq.n	800bd26 <dhcp_create_msg+0x166>
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	d00d      	beq.n	800bd26 <dhcp_create_msg+0x166>
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	2b07      	cmp	r3, #7
 800bd0e:	d00a      	beq.n	800bd26 <dhcp_create_msg+0x166>
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d10d      	bne.n	800bd32 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d003      	beq.n	800bd26 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	7a5b      	ldrb	r3, [r3, #9]
 800bd22:	2b04      	cmp	r3, #4
 800bd24:	d105      	bne.n	800bd32 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1d1a      	adds	r2, r3, #4
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	6812      	ldr	r2, [r2, #0]
 800bd30:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2200      	movs	r2, #0
 800bd38:	741a      	strb	r2, [r3, #16]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	745a      	strb	r2, [r3, #17]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	749a      	strb	r2, [r3, #18]
 800bd42:	2200      	movs	r2, #0
 800bd44:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	751a      	strb	r2, [r3, #20]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	755a      	strb	r2, [r3, #21]
 800bd52:	2200      	movs	r2, #0
 800bd54:	759a      	strb	r2, [r3, #22]
 800bd56:	2200      	movs	r2, #0
 800bd58:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	761a      	strb	r2, [r3, #24]
 800bd62:	2200      	movs	r2, #0
 800bd64:	765a      	strb	r2, [r3, #25]
 800bd66:	2200      	movs	r2, #0
 800bd68:	769a      	strb	r2, [r3, #26]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800bd6e:	2300      	movs	r3, #0
 800bd70:	82fb      	strh	r3, [r7, #22]
 800bd72:	e019      	b.n	800bda8 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	8afa      	ldrh	r2, [r7, #22]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d208      	bcs.n	800bd94 <dhcp_create_msg+0x1d4>
 800bd82:	8afb      	ldrh	r3, [r7, #22]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	d805      	bhi.n	800bd94 <dhcp_create_msg+0x1d4>
 800bd88:	8afb      	ldrh	r3, [r7, #22]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800bd92:	e000      	b.n	800bd96 <dhcp_create_msg+0x1d6>
 800bd94:	2100      	movs	r1, #0
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	691a      	ldr	r2, [r3, #16]
 800bd9a:	8afb      	ldrh	r3, [r7, #22]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	460a      	mov	r2, r1
 800bda0:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800bda2:	8afb      	ldrh	r3, [r7, #22]
 800bda4:	3301      	adds	r3, #1
 800bda6:	82fb      	strh	r3, [r7, #22]
 800bda8:	8afb      	ldrh	r3, [r7, #22]
 800bdaa:	2b0f      	cmp	r3, #15
 800bdac:	d9e2      	bls.n	800bd74 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800bdae:	2300      	movs	r3, #0
 800bdb0:	82fb      	strh	r3, [r7, #22]
 800bdb2:	e009      	b.n	800bdc8 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	8afb      	ldrh	r3, [r7, #22]
 800bdba:	4413      	add	r3, r2
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800bdc2:	8afb      	ldrh	r3, [r7, #22]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	82fb      	strh	r3, [r7, #22]
 800bdc8:	8afb      	ldrh	r3, [r7, #22]
 800bdca:	2b3f      	cmp	r3, #63	; 0x3f
 800bdcc:	d9f2      	bls.n	800bdb4 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800bdce:	2300      	movs	r3, #0
 800bdd0:	82fb      	strh	r3, [r7, #22]
 800bdd2:	e009      	b.n	800bde8 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	8afb      	ldrh	r3, [r7, #22]
 800bdda:	4413      	add	r3, r2
 800bddc:	2200      	movs	r2, #0
 800bdde:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800bde2:	8afb      	ldrh	r3, [r7, #22]
 800bde4:	3301      	adds	r3, #1
 800bde6:	82fb      	strh	r3, [r7, #22]
 800bde8:	8afb      	ldrh	r3, [r7, #22]
 800bdea:	2b7f      	cmp	r3, #127	; 0x7f
 800bdec:	d9f2      	bls.n	800bdd4 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800bdf8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800be02:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800be06:	2200      	movs	r2, #0
 800be08:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800be0c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800be10:	2200      	movs	r2, #0
 800be12:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800be16:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2200      	movs	r2, #0
 800be1e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800be20:	2300      	movs	r3, #0
 800be22:	82fb      	strh	r3, [r7, #22]
 800be24:	e00b      	b.n	800be3e <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	8afb      	ldrh	r3, [r7, #22]
 800be2c:	8af9      	ldrh	r1, [r7, #22]
 800be2e:	b2c9      	uxtb	r1, r1
 800be30:	4413      	add	r3, r2
 800be32:	460a      	mov	r2, r1
 800be34:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800be38:	8afb      	ldrh	r3, [r7, #22]
 800be3a:	3301      	adds	r3, #1
 800be3c:	82fb      	strh	r3, [r7, #22]
 800be3e:	8afb      	ldrh	r3, [r7, #22]
 800be40:	2b43      	cmp	r3, #67	; 0x43
 800be42:	d9f0      	bls.n	800be26 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800be44:	2201      	movs	r2, #1
 800be46:	2135      	movs	r1, #53	; 0x35
 800be48:	68b8      	ldr	r0, [r7, #8]
 800be4a:	f7ff fa4d 	bl	800b2e8 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800be4e:	79fb      	ldrb	r3, [r7, #7]
 800be50:	4619      	mov	r1, r3
 800be52:	68b8      	ldr	r0, [r7, #8]
 800be54:	f7ff fa82 	bl	800b35c <dhcp_option_byte>
  return ERR_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	371c      	adds	r7, #28
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd90      	pop	{r4, r7, pc}
 800be62:	bf00      	nop
 800be64:	0801097c 	.word	0x0801097c
 800be68:	08010cac 	.word	0x08010cac
 800be6c:	080109dc 	.word	0x080109dc
 800be70:	08010ccc 	.word	0x08010ccc
 800be74:	08010cec 	.word	0x08010cec
 800be78:	08010d14 	.word	0x08010d14
 800be7c:	08010d3c 	.word	0x08010d3c
 800be80:	20000118 	.word	0x20000118

0800be84 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d107      	bne.n	800bea2 <dhcp_delete_msg+0x1e>
 800be92:	4b18      	ldr	r3, [pc, #96]	; (800bef4 <dhcp_delete_msg+0x70>)
 800be94:	f240 726d 	movw	r2, #1901	; 0x76d
 800be98:	4917      	ldr	r1, [pc, #92]	; (800bef8 <dhcp_delete_msg+0x74>)
 800be9a:	4818      	ldr	r0, [pc, #96]	; (800befc <dhcp_delete_msg+0x78>)
 800be9c:	f002 fb24 	bl	800e4e8 <iprintf>
 800bea0:	e024      	b.n	800beec <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <dhcp_delete_msg+0x34>
 800beaa:	4b12      	ldr	r3, [pc, #72]	; (800bef4 <dhcp_delete_msg+0x70>)
 800beac:	f240 726e 	movw	r2, #1902	; 0x76e
 800beb0:	4913      	ldr	r1, [pc, #76]	; (800bf00 <dhcp_delete_msg+0x7c>)
 800beb2:	4812      	ldr	r0, [pc, #72]	; (800befc <dhcp_delete_msg+0x78>)
 800beb4:	f002 fb18 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <dhcp_delete_msg+0x4a>
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <dhcp_delete_msg+0x70>)
 800bec2:	f240 726f 	movw	r2, #1903	; 0x76f
 800bec6:	490f      	ldr	r1, [pc, #60]	; (800bf04 <dhcp_delete_msg+0x80>)
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <dhcp_delete_msg+0x78>)
 800beca:	f002 fb0d 	bl	800e4e8 <iprintf>
  if (dhcp->p_out != NULL) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d004      	beq.n	800bee0 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7f8 ff76 	bl	8004dcc <pbuf_free>
  }
  dhcp->p_out = NULL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	611a      	str	r2, [r3, #16]
}
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	0801097c 	.word	0x0801097c
 800bef8:	08010d7c 	.word	0x08010d7c
 800befc:	080109dc 	.word	0x080109dc
 800bf00:	08010d9c 	.word	0x08010d9c
 800bf04:	08010dc4 	.word	0x08010dc4

0800bf08 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d107      	bne.n	800bf26 <dhcp_option_trailer+0x1e>
 800bf16:	4b24      	ldr	r3, [pc, #144]	; (800bfa8 <dhcp_option_trailer+0xa0>)
 800bf18:	f240 7282 	movw	r2, #1922	; 0x782
 800bf1c:	4923      	ldr	r1, [pc, #140]	; (800bfac <dhcp_option_trailer+0xa4>)
 800bf1e:	4824      	ldr	r0, [pc, #144]	; (800bfb0 <dhcp_option_trailer+0xa8>)
 800bf20:	f002 fae2 	bl	800e4e8 <iprintf>
 800bf24:	e03c      	b.n	800bfa0 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <dhcp_option_trailer+0x34>
 800bf2e:	4b1e      	ldr	r3, [pc, #120]	; (800bfa8 <dhcp_option_trailer+0xa0>)
 800bf30:	f240 7283 	movw	r2, #1923	; 0x783
 800bf34:	491f      	ldr	r1, [pc, #124]	; (800bfb4 <dhcp_option_trailer+0xac>)
 800bf36:	481e      	ldr	r0, [pc, #120]	; (800bfb0 <dhcp_option_trailer+0xa8>)
 800bf38:	f002 fad6 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	8a9b      	ldrh	r3, [r3, #20]
 800bf40:	2b43      	cmp	r3, #67	; 0x43
 800bf42:	d906      	bls.n	800bf52 <dhcp_option_trailer+0x4a>
 800bf44:	4b18      	ldr	r3, [pc, #96]	; (800bfa8 <dhcp_option_trailer+0xa0>)
 800bf46:	f240 7284 	movw	r2, #1924	; 0x784
 800bf4a:	491b      	ldr	r1, [pc, #108]	; (800bfb8 <dhcp_option_trailer+0xb0>)
 800bf4c:	4818      	ldr	r0, [pc, #96]	; (800bfb0 <dhcp_option_trailer+0xa8>)
 800bf4e:	f002 facb 	bl	800e4e8 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691a      	ldr	r2, [r3, #16]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8a9b      	ldrh	r3, [r3, #20]
 800bf5a:	1c59      	adds	r1, r3, #1
 800bf5c:	b288      	uxth	r0, r1
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	8288      	strh	r0, [r1, #20]
 800bf62:	4413      	add	r3, r2
 800bf64:	22ff      	movs	r2, #255	; 0xff
 800bf66:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bf6a:	e00b      	b.n	800bf84 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	691a      	ldr	r2, [r3, #16]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8a9b      	ldrh	r3, [r3, #20]
 800bf74:	1c59      	adds	r1, r3, #1
 800bf76:	b288      	uxth	r0, r1
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	8288      	strh	r0, [r1, #20]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	8a9b      	ldrh	r3, [r3, #20]
 800bf88:	2b43      	cmp	r3, #67	; 0x43
 800bf8a:	d905      	bls.n	800bf98 <dhcp_option_trailer+0x90>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	8a9b      	ldrh	r3, [r3, #20]
 800bf90:	f003 0303 	and.w	r3, r3, #3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bf9c:	2b43      	cmp	r3, #67	; 0x43
 800bf9e:	d9e5      	bls.n	800bf6c <dhcp_option_trailer+0x64>
  }
}
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	0801097c 	.word	0x0801097c
 800bfac:	08010dec 	.word	0x08010dec
 800bfb0:	080109dc 	.word	0x080109dc
 800bfb4:	08010e10 	.word	0x08010e10
 800bfb8:	08010e3c 	.word	0x08010e3c

0800bfbc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d017      	beq.n	800bffa <dhcp_supplied_address+0x3e>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6a1b      	ldr	r3, [r3, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d013      	beq.n	800bffa <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	7a5b      	ldrb	r3, [r3, #9]
 800bfdc:	2b0a      	cmp	r3, #10
 800bfde:	d007      	beq.n	800bff0 <dhcp_supplied_address+0x34>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7a5b      	ldrb	r3, [r3, #9]
 800bfe4:	2b05      	cmp	r3, #5
 800bfe6:	d003      	beq.n	800bff0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800bfec:	2b04      	cmp	r3, #4
 800bfee:	d101      	bne.n	800bff4 <dhcp_supplied_address+0x38>
 800bff0:	2301      	movs	r3, #1
 800bff2:	e000      	b.n	800bff6 <dhcp_supplied_address+0x3a>
 800bff4:	2300      	movs	r3, #0
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	e000      	b.n	800bffc <dhcp_supplied_address+0x40>
  }
  return 0;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c010:	4915      	ldr	r1, [pc, #84]	; (800c068 <etharp_free_entry+0x60>)
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	005b      	lsls	r3, r3, #1
 800c018:	4413      	add	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	440b      	add	r3, r1
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d013      	beq.n	800c04c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c024:	4910      	ldr	r1, [pc, #64]	; (800c068 <etharp_free_entry+0x60>)
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4613      	mov	r3, r2
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	440b      	add	r3, r1
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4618      	mov	r0, r3
 800c036:	f7f8 fec9 	bl	8004dcc <pbuf_free>
    arp_table[i].q = NULL;
 800c03a:	490b      	ldr	r1, [pc, #44]	; (800c068 <etharp_free_entry+0x60>)
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c04c:	4906      	ldr	r1, [pc, #24]	; (800c068 <etharp_free_entry+0x60>)
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	440b      	add	r3, r1
 800c05a:	3314      	adds	r3, #20
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	2000011c 	.word	0x2000011c

0800c06c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c072:	2300      	movs	r3, #0
 800c074:	71fb      	strb	r3, [r7, #7]
 800c076:	e096      	b.n	800c1a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c078:	79fa      	ldrb	r2, [r7, #7]
 800c07a:	494f      	ldr	r1, [pc, #316]	; (800c1b8 <etharp_tmr+0x14c>)
 800c07c:	4613      	mov	r3, r2
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	4413      	add	r3, r2
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	440b      	add	r3, r1
 800c086:	3314      	adds	r3, #20
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800c08c:	79bb      	ldrb	r3, [r7, #6]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 8086 	beq.w	800c1a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800c094:	79fa      	ldrb	r2, [r7, #7]
 800c096:	4948      	ldr	r1, [pc, #288]	; (800c1b8 <etharp_tmr+0x14c>)
 800c098:	4613      	mov	r3, r2
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3312      	adds	r3, #18
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	b298      	uxth	r0, r3
 800c0aa:	4943      	ldr	r1, [pc, #268]	; (800c1b8 <etharp_tmr+0x14c>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	440b      	add	r3, r1
 800c0b6:	3312      	adds	r3, #18
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c0bc:	79fa      	ldrb	r2, [r7, #7]
 800c0be:	493e      	ldr	r1, [pc, #248]	; (800c1b8 <etharp_tmr+0x14c>)
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	440b      	add	r3, r1
 800c0ca:	3312      	adds	r3, #18
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c0d2:	d215      	bcs.n	800c100 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c0d4:	79fa      	ldrb	r2, [r7, #7]
 800c0d6:	4938      	ldr	r1, [pc, #224]	; (800c1b8 <etharp_tmr+0x14c>)
 800c0d8:	4613      	mov	r3, r2
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	4413      	add	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	440b      	add	r3, r1
 800c0e2:	3314      	adds	r3, #20
 800c0e4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d10f      	bne.n	800c10a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c0ea:	79fa      	ldrb	r2, [r7, #7]
 800c0ec:	4932      	ldr	r1, [pc, #200]	; (800c1b8 <etharp_tmr+0x14c>)
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3312      	adds	r3, #18
 800c0fa:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d904      	bls.n	800c10a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	4618      	mov	r0, r3
 800c104:	f7ff ff80 	bl	800c008 <etharp_free_entry>
 800c108:	e04a      	b.n	800c1a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c10a:	79fa      	ldrb	r2, [r7, #7]
 800c10c:	492a      	ldr	r1, [pc, #168]	; (800c1b8 <etharp_tmr+0x14c>)
 800c10e:	4613      	mov	r3, r2
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	4413      	add	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	440b      	add	r3, r1
 800c118:	3314      	adds	r3, #20
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d10a      	bne.n	800c136 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c120:	79fa      	ldrb	r2, [r7, #7]
 800c122:	4925      	ldr	r1, [pc, #148]	; (800c1b8 <etharp_tmr+0x14c>)
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	440b      	add	r3, r1
 800c12e:	3314      	adds	r3, #20
 800c130:	2204      	movs	r2, #4
 800c132:	701a      	strb	r2, [r3, #0]
 800c134:	e034      	b.n	800c1a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c136:	79fa      	ldrb	r2, [r7, #7]
 800c138:	491f      	ldr	r1, [pc, #124]	; (800c1b8 <etharp_tmr+0x14c>)
 800c13a:	4613      	mov	r3, r2
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	4413      	add	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	440b      	add	r3, r1
 800c144:	3314      	adds	r3, #20
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d10a      	bne.n	800c162 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c14c:	79fa      	ldrb	r2, [r7, #7]
 800c14e:	491a      	ldr	r1, [pc, #104]	; (800c1b8 <etharp_tmr+0x14c>)
 800c150:	4613      	mov	r3, r2
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	4413      	add	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	440b      	add	r3, r1
 800c15a:	3314      	adds	r3, #20
 800c15c:	2202      	movs	r2, #2
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e01e      	b.n	800c1a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c162:	79fa      	ldrb	r2, [r7, #7]
 800c164:	4914      	ldr	r1, [pc, #80]	; (800c1b8 <etharp_tmr+0x14c>)
 800c166:	4613      	mov	r3, r2
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	4413      	add	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	440b      	add	r3, r1
 800c170:	3314      	adds	r3, #20
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d113      	bne.n	800c1a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c178:	79fa      	ldrb	r2, [r7, #7]
 800c17a:	490f      	ldr	r1, [pc, #60]	; (800c1b8 <etharp_tmr+0x14c>)
 800c17c:	4613      	mov	r3, r2
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4413      	add	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	440b      	add	r3, r1
 800c186:	3308      	adds	r3, #8
 800c188:	6818      	ldr	r0, [r3, #0]
 800c18a:	79fa      	ldrb	r2, [r7, #7]
 800c18c:	4613      	mov	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	4a08      	ldr	r2, [pc, #32]	; (800c1b8 <etharp_tmr+0x14c>)
 800c196:	4413      	add	r3, r2
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	f000 fe3c 	bl	800ce18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	71fb      	strb	r3, [r7, #7]
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	f67f af65 	bls.w	800c078 <etharp_tmr+0xc>
      }
    }
  }
}
 800c1ae:	bf00      	nop
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	2000011c 	.word	0x2000011c

0800c1bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c1ca:	230a      	movs	r3, #10
 800c1cc:	77fb      	strb	r3, [r7, #31]
 800c1ce:	230a      	movs	r3, #10
 800c1d0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800c1d2:	230a      	movs	r3, #10
 800c1d4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800c1da:	230a      	movs	r3, #10
 800c1dc:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	833b      	strh	r3, [r7, #24]
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	82fb      	strh	r3, [r7, #22]
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	773b      	strb	r3, [r7, #28]
 800c1ee:	e093      	b.n	800c318 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800c1f0:	7f3a      	ldrb	r2, [r7, #28]
 800c1f2:	4990      	ldr	r1, [pc, #576]	; (800c434 <etharp_find_entry+0x278>)
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	440b      	add	r3, r1
 800c1fe:	3314      	adds	r3, #20
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c204:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c208:	2b0a      	cmp	r3, #10
 800c20a:	d105      	bne.n	800c218 <etharp_find_entry+0x5c>
 800c20c:	7cfb      	ldrb	r3, [r7, #19]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d102      	bne.n	800c218 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800c212:	7f3b      	ldrb	r3, [r7, #28]
 800c214:	777b      	strb	r3, [r7, #29]
 800c216:	e07c      	b.n	800c312 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c218:	7cfb      	ldrb	r3, [r7, #19]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d079      	beq.n	800c312 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c21e:	7cfb      	ldrb	r3, [r7, #19]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d009      	beq.n	800c238 <etharp_find_entry+0x7c>
 800c224:	7cfb      	ldrb	r3, [r7, #19]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d806      	bhi.n	800c238 <etharp_find_entry+0x7c>
 800c22a:	4b83      	ldr	r3, [pc, #524]	; (800c438 <etharp_find_entry+0x27c>)
 800c22c:	f44f 7293 	mov.w	r2, #294	; 0x126
 800c230:	4982      	ldr	r1, [pc, #520]	; (800c43c <etharp_find_entry+0x280>)
 800c232:	4883      	ldr	r0, [pc, #524]	; (800c440 <etharp_find_entry+0x284>)
 800c234:	f002 f958 	bl	800e4e8 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00f      	beq.n	800c25e <etharp_find_entry+0xa2>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6819      	ldr	r1, [r3, #0]
 800c242:	7f3a      	ldrb	r2, [r7, #28]
 800c244:	487b      	ldr	r0, [pc, #492]	; (800c434 <etharp_find_entry+0x278>)
 800c246:	4613      	mov	r3, r2
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	4403      	add	r3, r0
 800c250:	3304      	adds	r3, #4
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4299      	cmp	r1, r3
 800c256:	d102      	bne.n	800c25e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c258:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c25c:	e0e5      	b.n	800c42a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c25e:	7cfb      	ldrb	r3, [r7, #19]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d13b      	bne.n	800c2dc <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c264:	7f3a      	ldrb	r2, [r7, #28]
 800c266:	4973      	ldr	r1, [pc, #460]	; (800c434 <etharp_find_entry+0x278>)
 800c268:	4613      	mov	r3, r2
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	4413      	add	r3, r2
 800c26e:	00db      	lsls	r3, r3, #3
 800c270:	440b      	add	r3, r1
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d018      	beq.n	800c2aa <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800c278:	7f3a      	ldrb	r2, [r7, #28]
 800c27a:	496e      	ldr	r1, [pc, #440]	; (800c434 <etharp_find_entry+0x278>)
 800c27c:	4613      	mov	r3, r2
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	4413      	add	r3, r2
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	440b      	add	r3, r1
 800c286:	3312      	adds	r3, #18
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	8b3a      	ldrh	r2, [r7, #24]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d840      	bhi.n	800c312 <etharp_find_entry+0x156>
            old_queue = i;
 800c290:	7f3b      	ldrb	r3, [r7, #28]
 800c292:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800c294:	7f3a      	ldrb	r2, [r7, #28]
 800c296:	4967      	ldr	r1, [pc, #412]	; (800c434 <etharp_find_entry+0x278>)
 800c298:	4613      	mov	r3, r2
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	4413      	add	r3, r2
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	440b      	add	r3, r1
 800c2a2:	3312      	adds	r3, #18
 800c2a4:	881b      	ldrh	r3, [r3, #0]
 800c2a6:	833b      	strh	r3, [r7, #24]
 800c2a8:	e033      	b.n	800c312 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c2aa:	7f3a      	ldrb	r2, [r7, #28]
 800c2ac:	4961      	ldr	r1, [pc, #388]	; (800c434 <etharp_find_entry+0x278>)
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	4413      	add	r3, r2
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	440b      	add	r3, r1
 800c2b8:	3312      	adds	r3, #18
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	8afa      	ldrh	r2, [r7, #22]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d827      	bhi.n	800c312 <etharp_find_entry+0x156>
            old_pending = i;
 800c2c2:	7f3b      	ldrb	r3, [r7, #28]
 800c2c4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800c2c6:	7f3a      	ldrb	r2, [r7, #28]
 800c2c8:	495a      	ldr	r1, [pc, #360]	; (800c434 <etharp_find_entry+0x278>)
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	4413      	add	r3, r2
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	440b      	add	r3, r1
 800c2d4:	3312      	adds	r3, #18
 800c2d6:	881b      	ldrh	r3, [r3, #0]
 800c2d8:	82fb      	strh	r3, [r7, #22]
 800c2da:	e01a      	b.n	800c312 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c2dc:	7cfb      	ldrb	r3, [r7, #19]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d917      	bls.n	800c312 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c2e2:	7f3a      	ldrb	r2, [r7, #28]
 800c2e4:	4953      	ldr	r1, [pc, #332]	; (800c434 <etharp_find_entry+0x278>)
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	4413      	add	r3, r2
 800c2ec:	00db      	lsls	r3, r3, #3
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3312      	adds	r3, #18
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	8aba      	ldrh	r2, [r7, #20]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d80b      	bhi.n	800c312 <etharp_find_entry+0x156>
            old_stable = i;
 800c2fa:	7f3b      	ldrb	r3, [r7, #28]
 800c2fc:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800c2fe:	7f3a      	ldrb	r2, [r7, #28]
 800c300:	494c      	ldr	r1, [pc, #304]	; (800c434 <etharp_find_entry+0x278>)
 800c302:	4613      	mov	r3, r2
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	4413      	add	r3, r2
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	440b      	add	r3, r1
 800c30c:	3312      	adds	r3, #18
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c312:	7f3b      	ldrb	r3, [r7, #28]
 800c314:	3301      	adds	r3, #1
 800c316:	773b      	strb	r3, [r7, #28]
 800c318:	7f3b      	ldrb	r3, [r7, #28]
 800c31a:	2b09      	cmp	r3, #9
 800c31c:	f67f af68 	bls.w	800c1f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d108      	bne.n	800c33c <etharp_find_entry+0x180>
 800c32a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c32e:	2b0a      	cmp	r3, #10
 800c330:	d107      	bne.n	800c342 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c332:	7afb      	ldrb	r3, [r7, #11]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800c33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c340:	e073      	b.n	800c42a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c342:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c346:	2b09      	cmp	r3, #9
 800c348:	dc02      	bgt.n	800c350 <etharp_find_entry+0x194>
    i = empty;
 800c34a:	7f7b      	ldrb	r3, [r7, #29]
 800c34c:	773b      	strb	r3, [r7, #28]
 800c34e:	e036      	b.n	800c3be <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c350:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c354:	2b09      	cmp	r3, #9
 800c356:	dc13      	bgt.n	800c380 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800c358:	7fbb      	ldrb	r3, [r7, #30]
 800c35a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c35c:	7f3a      	ldrb	r2, [r7, #28]
 800c35e:	4935      	ldr	r1, [pc, #212]	; (800c434 <etharp_find_entry+0x278>)
 800c360:	4613      	mov	r3, r2
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	4413      	add	r3, r2
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	440b      	add	r3, r1
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d018      	beq.n	800c3a2 <etharp_find_entry+0x1e6>
 800c370:	4b31      	ldr	r3, [pc, #196]	; (800c438 <etharp_find_entry+0x27c>)
 800c372:	f240 126f 	movw	r2, #367	; 0x16f
 800c376:	4933      	ldr	r1, [pc, #204]	; (800c444 <etharp_find_entry+0x288>)
 800c378:	4831      	ldr	r0, [pc, #196]	; (800c440 <etharp_find_entry+0x284>)
 800c37a:	f002 f8b5 	bl	800e4e8 <iprintf>
 800c37e:	e010      	b.n	800c3a2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c380:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c384:	2b09      	cmp	r3, #9
 800c386:	dc02      	bgt.n	800c38e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800c388:	7ffb      	ldrb	r3, [r7, #31]
 800c38a:	773b      	strb	r3, [r7, #28]
 800c38c:	e009      	b.n	800c3a2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c38e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c392:	2b09      	cmp	r3, #9
 800c394:	dc02      	bgt.n	800c39c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c396:	7efb      	ldrb	r3, [r7, #27]
 800c398:	773b      	strb	r3, [r7, #28]
 800c39a:	e002      	b.n	800c3a2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800c39c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3a0:	e043      	b.n	800c42a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c3a2:	7f3b      	ldrb	r3, [r7, #28]
 800c3a4:	2b09      	cmp	r3, #9
 800c3a6:	d906      	bls.n	800c3b6 <etharp_find_entry+0x1fa>
 800c3a8:	4b23      	ldr	r3, [pc, #140]	; (800c438 <etharp_find_entry+0x27c>)
 800c3aa:	f240 1281 	movw	r2, #385	; 0x181
 800c3ae:	4926      	ldr	r1, [pc, #152]	; (800c448 <etharp_find_entry+0x28c>)
 800c3b0:	4823      	ldr	r0, [pc, #140]	; (800c440 <etharp_find_entry+0x284>)
 800c3b2:	f002 f899 	bl	800e4e8 <iprintf>
    etharp_free_entry(i);
 800c3b6:	7f3b      	ldrb	r3, [r7, #28]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fe25 	bl	800c008 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c3be:	7f3b      	ldrb	r3, [r7, #28]
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	d906      	bls.n	800c3d2 <etharp_find_entry+0x216>
 800c3c4:	4b1c      	ldr	r3, [pc, #112]	; (800c438 <etharp_find_entry+0x27c>)
 800c3c6:	f240 1285 	movw	r2, #389	; 0x185
 800c3ca:	491f      	ldr	r1, [pc, #124]	; (800c448 <etharp_find_entry+0x28c>)
 800c3cc:	481c      	ldr	r0, [pc, #112]	; (800c440 <etharp_find_entry+0x284>)
 800c3ce:	f002 f88b 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c3d2:	7f3a      	ldrb	r2, [r7, #28]
 800c3d4:	4917      	ldr	r1, [pc, #92]	; (800c434 <etharp_find_entry+0x278>)
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	3314      	adds	r3, #20
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d006      	beq.n	800c3f6 <etharp_find_entry+0x23a>
 800c3e8:	4b13      	ldr	r3, [pc, #76]	; (800c438 <etharp_find_entry+0x27c>)
 800c3ea:	f240 1287 	movw	r2, #391	; 0x187
 800c3ee:	4917      	ldr	r1, [pc, #92]	; (800c44c <etharp_find_entry+0x290>)
 800c3f0:	4813      	ldr	r0, [pc, #76]	; (800c440 <etharp_find_entry+0x284>)
 800c3f2:	f002 f879 	bl	800e4e8 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00a      	beq.n	800c412 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c3fc:	7f3a      	ldrb	r2, [r7, #28]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6819      	ldr	r1, [r3, #0]
 800c402:	480c      	ldr	r0, [pc, #48]	; (800c434 <etharp_find_entry+0x278>)
 800c404:	4613      	mov	r3, r2
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	4413      	add	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	4403      	add	r3, r0
 800c40e:	3304      	adds	r3, #4
 800c410:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c412:	7f3a      	ldrb	r2, [r7, #28]
 800c414:	4907      	ldr	r1, [pc, #28]	; (800c434 <etharp_find_entry+0x278>)
 800c416:	4613      	mov	r3, r2
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	4413      	add	r3, r2
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	440b      	add	r3, r1
 800c420:	3312      	adds	r3, #18
 800c422:	2200      	movs	r2, #0
 800c424:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800c426:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3720      	adds	r7, #32
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop
 800c434:	2000011c 	.word	0x2000011c
 800c438:	08010e7c 	.word	0x08010e7c
 800c43c:	08010eb4 	.word	0x08010eb4
 800c440:	08010ef4 	.word	0x08010ef4
 800c444:	08010f1c 	.word	0x08010f1c
 800c448:	08010f34 	.word	0x08010f34
 800c44c:	08010f48 	.word	0x08010f48

0800c450 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b088      	sub	sp, #32
 800c454:	af02      	add	r7, sp, #8
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c464:	2b06      	cmp	r3, #6
 800c466:	d006      	beq.n	800c476 <etharp_update_arp_entry+0x26>
 800c468:	4b48      	ldr	r3, [pc, #288]	; (800c58c <etharp_update_arp_entry+0x13c>)
 800c46a:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c46e:	4948      	ldr	r1, [pc, #288]	; (800c590 <etharp_update_arp_entry+0x140>)
 800c470:	4848      	ldr	r0, [pc, #288]	; (800c594 <etharp_update_arp_entry+0x144>)
 800c472:	f002 f839 	bl	800e4e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d012      	beq.n	800c4a2 <etharp_update_arp_entry+0x52>
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00e      	beq.n	800c4a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68f9      	ldr	r1, [r7, #12]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f001 f8fc 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800c490:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c492:	2b00      	cmp	r3, #0
 800c494:	d105      	bne.n	800c4a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c49e:	2be0      	cmp	r3, #224	; 0xe0
 800c4a0:	d102      	bne.n	800c4a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4a2:	f06f 030f 	mvn.w	r3, #15
 800c4a6:	e06c      	b.n	800c582 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	68b8      	ldr	r0, [r7, #8]
 800c4b0:	f7ff fe84 	bl	800c1bc <etharp_find_entry>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c4b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	da02      	bge.n	800c4c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4c4:	e05d      	b.n	800c582 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c4c6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c4ca:	4933      	ldr	r1, [pc, #204]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3314      	adds	r3, #20
 800c4d8:	2202      	movs	r2, #2
 800c4da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c4dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c4e0:	492d      	ldr	r1, [pc, #180]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	440b      	add	r3, r1
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800c4f2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	4413      	add	r3, r2
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	3308      	adds	r3, #8
 800c500:	4a25      	ldr	r2, [pc, #148]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c502:	4413      	add	r3, r2
 800c504:	3304      	adds	r3, #4
 800c506:	2206      	movs	r2, #6
 800c508:	6879      	ldr	r1, [r7, #4]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f001 ffd9 	bl	800e4c2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c510:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c514:	4920      	ldr	r1, [pc, #128]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c516:	4613      	mov	r3, r2
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	4413      	add	r3, r2
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	440b      	add	r3, r1
 800c520:	3312      	adds	r3, #18
 800c522:	2200      	movs	r2, #0
 800c524:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c526:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c52a:	491b      	ldr	r1, [pc, #108]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c52c:	4613      	mov	r3, r2
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	4413      	add	r3, r2
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	440b      	add	r3, r1
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d021      	beq.n	800c580 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c53c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c540:	4915      	ldr	r1, [pc, #84]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c542:	4613      	mov	r3, r2
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	4413      	add	r3, r2
 800c548:	00db      	lsls	r3, r3, #3
 800c54a:	440b      	add	r3, r1
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c550:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c554:	4910      	ldr	r1, [pc, #64]	; (800c598 <etharp_update_arp_entry+0x148>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	00db      	lsls	r3, r3, #3
 800c55e:	440b      	add	r3, r1
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c56a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6939      	ldr	r1, [r7, #16]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f001 ff29 	bl	800e3cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c57a:	6938      	ldr	r0, [r7, #16]
 800c57c:	f7f8 fc26 	bl	8004dcc <pbuf_free>
  }
  return ERR_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	08010e7c 	.word	0x08010e7c
 800c590:	08010f74 	.word	0x08010f74
 800c594:	08010ef4 	.word	0x08010ef4
 800c598:	2000011c 	.word	0x2000011c

0800c59c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73fb      	strb	r3, [r7, #15]
 800c5a8:	e01f      	b.n	800c5ea <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800c5aa:	7bfa      	ldrb	r2, [r7, #15]
 800c5ac:	4912      	ldr	r1, [pc, #72]	; (800c5f8 <etharp_cleanup_netif+0x5c>)
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	4413      	add	r3, r2
 800c5b4:	00db      	lsls	r3, r3, #3
 800c5b6:	440b      	add	r3, r1
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d00f      	beq.n	800c5e4 <etharp_cleanup_netif+0x48>
 800c5c4:	7bfa      	ldrb	r2, [r7, #15]
 800c5c6:	490c      	ldr	r1, [pc, #48]	; (800c5f8 <etharp_cleanup_netif+0x5c>)
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	4413      	add	r3, r2
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	440b      	add	r3, r1
 800c5d2:	3308      	adds	r3, #8
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d103      	bne.n	800c5e4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800c5dc:	7bfb      	ldrb	r3, [r7, #15]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fd12 	bl	800c008 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	73fb      	strb	r3, [r7, #15]
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
 800c5ec:	2b09      	cmp	r3, #9
 800c5ee:	d9dc      	bls.n	800c5aa <etharp_cleanup_netif+0xe>
    }
  }
}
 800c5f0:	bf00      	nop
 800c5f2:	3710      	adds	r7, #16
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	2000011c 	.word	0x2000011c

0800c5fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c5fc:	b5b0      	push	{r4, r5, r7, lr}
 800c5fe:	b08a      	sub	sp, #40	; 0x28
 800c600:	af04      	add	r7, sp, #16
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d107      	bne.n	800c61c <etharp_input+0x20>
 800c60c:	4b3f      	ldr	r3, [pc, #252]	; (800c70c <etharp_input+0x110>)
 800c60e:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c612:	493f      	ldr	r1, [pc, #252]	; (800c710 <etharp_input+0x114>)
 800c614:	483f      	ldr	r0, [pc, #252]	; (800c714 <etharp_input+0x118>)
 800c616:	f001 ff67 	bl	800e4e8 <iprintf>
 800c61a:	e074      	b.n	800c706 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	b29b      	uxth	r3, r3
 800c628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62c:	d10c      	bne.n	800c648 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c632:	2b06      	cmp	r3, #6
 800c634:	d108      	bne.n	800c648 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	d104      	bne.n	800c648 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	885b      	ldrh	r3, [r3, #2]
 800c642:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c644:	2b08      	cmp	r3, #8
 800c646:	d003      	beq.n	800c650 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7f8 fbbf 	bl	8004dcc <pbuf_free>
    return;
 800c64e:	e05a      	b.n	800c706 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	330e      	adds	r3, #14
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	3318      	adds	r3, #24
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	3304      	adds	r3, #4
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <etharp_input+0x74>
    for_us = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	75fb      	strb	r3, [r7, #23]
 800c66e:	e009      	b.n	800c684 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	3304      	adds	r3, #4
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	429a      	cmp	r2, r3
 800c67a:	bf0c      	ite	eq
 800c67c:	2301      	moveq	r3, #1
 800c67e:	2300      	movne	r3, #0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	f103 0208 	add.w	r2, r3, #8
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d001      	beq.n	800c694 <etharp_input+0x98>
 800c690:	2301      	movs	r3, #1
 800c692:	e000      	b.n	800c696 <etharp_input+0x9a>
 800c694:	2302      	movs	r3, #2
 800c696:	f107 010c 	add.w	r1, r7, #12
 800c69a:	6838      	ldr	r0, [r7, #0]
 800c69c:	f7ff fed8 	bl	800c450 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	88db      	ldrh	r3, [r3, #6]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6aa:	d003      	beq.n	800c6b4 <etharp_input+0xb8>
 800c6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6b0:	d01e      	beq.n	800c6f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800c6b2:	e025      	b.n	800c700 <etharp_input+0x104>
    if (for_us) {
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d021      	beq.n	800c6fe <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	3208      	adds	r2, #8
      etharp_raw(netif,
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	f107 010c 	add.w	r1, r7, #12
 800c6dc:	9102      	str	r1, [sp, #8]
 800c6de:	9201      	str	r2, [sp, #4]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	462b      	mov	r3, r5
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4601      	mov	r1, r0
 800c6e8:	6838      	ldr	r0, [r7, #0]
 800c6ea:	f000 fae7 	bl	800ccbc <etharp_raw>
    break;
 800c6ee:	e006      	b.n	800c6fe <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800c6f0:	f107 030c 	add.w	r3, r7, #12
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6838      	ldr	r0, [r7, #0]
 800c6f8:	f7fe f980 	bl	800a9fc <dhcp_arp_reply>
    break;
 800c6fc:	e000      	b.n	800c700 <etharp_input+0x104>
    break;
 800c6fe:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7f8 fb63 	bl	8004dcc <pbuf_free>
}
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bdb0      	pop	{r4, r5, r7, pc}
 800c70c:	08010e7c 	.word	0x08010e7c
 800c710:	08010fcc 	.word	0x08010fcc
 800c714:	08010ef4 	.word	0x08010ef4

0800c718 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af02      	add	r7, sp, #8
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c726:	79fa      	ldrb	r2, [r7, #7]
 800c728:	4944      	ldr	r1, [pc, #272]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c72a:	4613      	mov	r3, r2
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	4413      	add	r3, r2
 800c730:	00db      	lsls	r3, r3, #3
 800c732:	440b      	add	r3, r1
 800c734:	3314      	adds	r3, #20
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d806      	bhi.n	800c74a <etharp_output_to_arp_index+0x32>
 800c73c:	4b40      	ldr	r3, [pc, #256]	; (800c840 <etharp_output_to_arp_index+0x128>)
 800c73e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c742:	4940      	ldr	r1, [pc, #256]	; (800c844 <etharp_output_to_arp_index+0x12c>)
 800c744:	4840      	ldr	r0, [pc, #256]	; (800c848 <etharp_output_to_arp_index+0x130>)
 800c746:	f001 fecf 	bl	800e4e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c74a:	79fa      	ldrb	r2, [r7, #7]
 800c74c:	493b      	ldr	r1, [pc, #236]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c74e:	4613      	mov	r3, r2
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	4413      	add	r3, r2
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	440b      	add	r3, r1
 800c758:	3314      	adds	r3, #20
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	d153      	bne.n	800c808 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c760:	79fa      	ldrb	r2, [r7, #7]
 800c762:	4936      	ldr	r1, [pc, #216]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c764:	4613      	mov	r3, r2
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	4413      	add	r3, r2
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	440b      	add	r3, r1
 800c76e:	3312      	adds	r3, #18
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c776:	d919      	bls.n	800c7ac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c778:	79fa      	ldrb	r2, [r7, #7]
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	4a2e      	ldr	r2, [pc, #184]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c784:	4413      	add	r3, r2
 800c786:	3304      	adds	r3, #4
 800c788:	4619      	mov	r1, r3
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f000 fb44 	bl	800ce18 <etharp_request>
 800c790:	4603      	mov	r3, r0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d138      	bne.n	800c808 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c796:	79fa      	ldrb	r2, [r7, #7]
 800c798:	4928      	ldr	r1, [pc, #160]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3314      	adds	r3, #20
 800c7a6:	2203      	movs	r2, #3
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	e02d      	b.n	800c808 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7ac:	79fa      	ldrb	r2, [r7, #7]
 800c7ae:	4923      	ldr	r1, [pc, #140]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	4413      	add	r3, r2
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	440b      	add	r3, r1
 800c7ba:	3312      	adds	r3, #18
 800c7bc:	881b      	ldrh	r3, [r3, #0]
 800c7be:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c7c2:	d321      	bcc.n	800c808 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7c4:	79fa      	ldrb	r2, [r7, #7]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	4413      	add	r3, r2
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	4a1b      	ldr	r2, [pc, #108]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	1d19      	adds	r1, r3, #4
 800c7d4:	79fa      	ldrb	r2, [r7, #7]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	3308      	adds	r3, #8
 800c7e0:	4a16      	ldr	r2, [pc, #88]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c7e2:	4413      	add	r3, r2
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f000 faf3 	bl	800cdd4 <etharp_request_dst>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d109      	bne.n	800c808 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c7f4:	79fa      	ldrb	r2, [r7, #7]
 800c7f6:	4911      	ldr	r1, [pc, #68]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	440b      	add	r3, r1
 800c802:	3314      	adds	r3, #20
 800c804:	2203      	movs	r2, #3
 800c806:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800c80e:	79fa      	ldrb	r2, [r7, #7]
 800c810:	4613      	mov	r3, r2
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	4413      	add	r3, r2
 800c816:	00db      	lsls	r3, r3, #3
 800c818:	3308      	adds	r3, #8
 800c81a:	4a08      	ldr	r2, [pc, #32]	; (800c83c <etharp_output_to_arp_index+0x124>)
 800c81c:	4413      	add	r3, r2
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	4613      	mov	r3, r2
 800c828:	460a      	mov	r2, r1
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f001 fdcd 	bl	800e3cc <ethernet_output>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	2000011c 	.word	0x2000011c
 800c840:	08010e7c 	.word	0x08010e7c
 800c844:	08010fec 	.word	0x08010fec
 800c848:	08010ef4 	.word	0x08010ef4

0800c84c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b08a      	sub	sp, #40	; 0x28
 800c850:	af02      	add	r7, sp, #8
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d106      	bne.n	800c870 <etharp_output+0x24>
 800c862:	4b69      	ldr	r3, [pc, #420]	; (800ca08 <etharp_output+0x1bc>)
 800c864:	f240 321b 	movw	r2, #795	; 0x31b
 800c868:	4968      	ldr	r1, [pc, #416]	; (800ca0c <etharp_output+0x1c0>)
 800c86a:	4869      	ldr	r0, [pc, #420]	; (800ca10 <etharp_output+0x1c4>)
 800c86c:	f001 fe3c 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <etharp_output+0x38>
 800c876:	4b64      	ldr	r3, [pc, #400]	; (800ca08 <etharp_output+0x1bc>)
 800c878:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c87c:	4965      	ldr	r1, [pc, #404]	; (800ca14 <etharp_output+0x1c8>)
 800c87e:	4864      	ldr	r0, [pc, #400]	; (800ca10 <etharp_output+0x1c4>)
 800c880:	f001 fe32 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <etharp_output+0x4c>
 800c88a:	4b5f      	ldr	r3, [pc, #380]	; (800ca08 <etharp_output+0x1bc>)
 800c88c:	f240 321d 	movw	r2, #797	; 0x31d
 800c890:	4961      	ldr	r1, [pc, #388]	; (800ca18 <etharp_output+0x1cc>)
 800c892:	485f      	ldr	r0, [pc, #380]	; (800ca10 <etharp_output+0x1c4>)
 800c894:	f001 fe28 	bl	800e4e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68f9      	ldr	r1, [r7, #12]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fef2 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c8aa:	4b5c      	ldr	r3, [pc, #368]	; (800ca1c <etharp_output+0x1d0>)
 800c8ac:	61fb      	str	r3, [r7, #28]
 800c8ae:	e09b      	b.n	800c9e8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8b8:	2be0      	cmp	r3, #224	; 0xe0
 800c8ba:	d118      	bne.n	800c8ee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c8c4:	235e      	movs	r3, #94	; 0x5e
 800c8c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3302      	adds	r3, #2
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3303      	adds	r3, #3
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c8e6:	f107 0310 	add.w	r3, r7, #16
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	e07c      	b.n	800c9e8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	405a      	eors	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3308      	adds	r3, #8
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4013      	ands	r3, r2
 800c902:	2b00      	cmp	r3, #0
 800c904:	d012      	beq.n	800c92c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c90c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c910:	4293      	cmp	r3, r2
 800c912:	d00b      	beq.n	800c92c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	330c      	adds	r3, #12
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	330c      	adds	r3, #12
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	e002      	b.n	800c92c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c926:	f06f 0303 	mvn.w	r3, #3
 800c92a:	e069      	b.n	800ca00 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c92c:	4b3c      	ldr	r3, [pc, #240]	; (800ca20 <etharp_output+0x1d4>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	4619      	mov	r1, r3
 800c932:	4a3c      	ldr	r2, [pc, #240]	; (800ca24 <etharp_output+0x1d8>)
 800c934:	460b      	mov	r3, r1
 800c936:	005b      	lsls	r3, r3, #1
 800c938:	440b      	add	r3, r1
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	4413      	add	r3, r2
 800c93e:	3314      	adds	r3, #20
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d917      	bls.n	800c976 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4b35      	ldr	r3, [pc, #212]	; (800ca20 <etharp_output+0x1d4>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	4934      	ldr	r1, [pc, #208]	; (800ca24 <etharp_output+0x1d8>)
 800c952:	4603      	mov	r3, r0
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	4403      	add	r3, r0
 800c958:	00db      	lsls	r3, r3, #3
 800c95a:	440b      	add	r3, r1
 800c95c:	3304      	adds	r3, #4
 800c95e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c960:	429a      	cmp	r2, r3
 800c962:	d108      	bne.n	800c976 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c964:	4b2e      	ldr	r3, [pc, #184]	; (800ca20 <etharp_output+0x1d4>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	461a      	mov	r2, r3
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f7ff fed3 	bl	800c718 <etharp_output_to_arp_index>
 800c972:	4603      	mov	r3, r0
 800c974:	e044      	b.n	800ca00 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c976:	2300      	movs	r3, #0
 800c978:	75fb      	strb	r3, [r7, #23]
 800c97a:	e02a      	b.n	800c9d2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c97c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c980:	4928      	ldr	r1, [pc, #160]	; (800ca24 <etharp_output+0x1d8>)
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	00db      	lsls	r3, r3, #3
 800c98a:	440b      	add	r3, r1
 800c98c:	3314      	adds	r3, #20
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d918      	bls.n	800c9c6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	6819      	ldr	r1, [r3, #0]
 800c998:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c99c:	4821      	ldr	r0, [pc, #132]	; (800ca24 <etharp_output+0x1d8>)
 800c99e:	4613      	mov	r3, r2
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	4413      	add	r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	4403      	add	r3, r0
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c9ac:	4299      	cmp	r1, r3
 800c9ae:	d10a      	bne.n	800c9c6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c9b0:	7dfa      	ldrb	r2, [r7, #23]
 800c9b2:	4b1b      	ldr	r3, [pc, #108]	; (800ca20 <etharp_output+0x1d4>)
 800c9b4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68b9      	ldr	r1, [r7, #8]
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7ff feab 	bl	800c718 <etharp_output_to_arp_index>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	e01c      	b.n	800ca00 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c9c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	75fb      	strb	r3, [r7, #23]
 800c9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9d6:	2b09      	cmp	r3, #9
 800c9d8:	ddd0      	ble.n	800c97c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	69b9      	ldr	r1, [r7, #24]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f822 	bl	800ca28 <etharp_query>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e00b      	b.n	800ca00 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800c9ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f001 fce7 	bl	800e3cc <ethernet_output>
 800c9fe:	4603      	mov	r3, r0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3720      	adds	r7, #32
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	08010e7c 	.word	0x08010e7c
 800ca0c:	08010fcc 	.word	0x08010fcc
 800ca10:	08010ef4 	.word	0x08010ef4
 800ca14:	0801101c 	.word	0x0801101c
 800ca18:	08010fbc 	.word	0x08010fbc
 800ca1c:	080115f0 	.word	0x080115f0
 800ca20:	2000020c 	.word	0x2000020c
 800ca24:	2000011c 	.word	0x2000011c

0800ca28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08c      	sub	sp, #48	; 0x30
 800ca2c:	af02      	add	r7, sp, #8
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3329      	adds	r3, #41	; 0x29
 800ca38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ca3a:	23ff      	movs	r3, #255	; 0xff
 800ca3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68f9      	ldr	r1, [r7, #12]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 fe1c 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10c      	bne.n	800ca70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca5e:	2be0      	cmp	r3, #224	; 0xe0
 800ca60:	d006      	beq.n	800ca70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d003      	beq.n	800ca70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ca70:	f06f 030f 	mvn.w	r3, #15
 800ca74:	e10f      	b.n	800cc96 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	68b8      	ldr	r0, [r7, #8]
 800ca7c:	f7ff fb9e 	bl	800c1bc <etharp_find_entry>
 800ca80:	4603      	mov	r3, r0
 800ca82:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800ca84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	da02      	bge.n	800ca92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800ca8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca90:	e101      	b.n	800cc96 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ca92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ca96:	4982      	ldr	r1, [pc, #520]	; (800cca0 <etharp_query+0x278>)
 800ca98:	4613      	mov	r3, r2
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	4413      	add	r3, r2
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	440b      	add	r3, r1
 800caa2:	3314      	adds	r3, #20
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d117      	bne.n	800cada <etharp_query+0xb2>
    is_new_entry = 1;
 800caaa:	2301      	movs	r3, #1
 800caac:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800caae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cab2:	497b      	ldr	r1, [pc, #492]	; (800cca0 <etharp_query+0x278>)
 800cab4:	4613      	mov	r3, r2
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	4413      	add	r3, r2
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	440b      	add	r3, r1
 800cabe:	3314      	adds	r3, #20
 800cac0:	2201      	movs	r2, #1
 800cac2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cac4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cac8:	4975      	ldr	r1, [pc, #468]	; (800cca0 <etharp_query+0x278>)
 800caca:	4613      	mov	r3, r2
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	4413      	add	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	440b      	add	r3, r1
 800cad4:	3308      	adds	r3, #8
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cada:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cade:	4970      	ldr	r1, [pc, #448]	; (800cca0 <etharp_query+0x278>)
 800cae0:	4613      	mov	r3, r2
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	4413      	add	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	440b      	add	r3, r1
 800caea:	3314      	adds	r3, #20
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d012      	beq.n	800cb18 <etharp_query+0xf0>
 800caf2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800caf6:	496a      	ldr	r1, [pc, #424]	; (800cca0 <etharp_query+0x278>)
 800caf8:	4613      	mov	r3, r2
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	4413      	add	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	440b      	add	r3, r1
 800cb02:	3314      	adds	r3, #20
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d806      	bhi.n	800cb18 <etharp_query+0xf0>
 800cb0a:	4b66      	ldr	r3, [pc, #408]	; (800cca4 <etharp_query+0x27c>)
 800cb0c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cb10:	4965      	ldr	r1, [pc, #404]	; (800cca8 <etharp_query+0x280>)
 800cb12:	4866      	ldr	r0, [pc, #408]	; (800ccac <etharp_query+0x284>)
 800cb14:	f001 fce8 	bl	800e4e8 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d102      	bne.n	800cb24 <etharp_query+0xfc>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10c      	bne.n	800cb3e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 f976 	bl	800ce18 <etharp_request>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <etharp_query+0x116>
      return result;
 800cb38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb3c:	e0ab      	b.n	800cc96 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <etharp_query+0x12a>
 800cb44:	4b57      	ldr	r3, [pc, #348]	; (800cca4 <etharp_query+0x27c>)
 800cb46:	f240 32db 	movw	r2, #987	; 0x3db
 800cb4a:	4959      	ldr	r1, [pc, #356]	; (800ccb0 <etharp_query+0x288>)
 800cb4c:	4857      	ldr	r0, [pc, #348]	; (800ccac <etharp_query+0x284>)
 800cb4e:	f001 fccb 	bl	800e4e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb52:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb56:	4952      	ldr	r1, [pc, #328]	; (800cca0 <etharp_query+0x278>)
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	440b      	add	r3, r1
 800cb62:	3314      	adds	r3, #20
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d919      	bls.n	800cb9e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800cb6a:	7cfa      	ldrb	r2, [r7, #19]
 800cb6c:	4b51      	ldr	r3, [pc, #324]	; (800ccb4 <etharp_query+0x28c>)
 800cb6e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	3308      	adds	r3, #8
 800cb7e:	4a48      	ldr	r2, [pc, #288]	; (800cca0 <etharp_query+0x278>)
 800cb80:	4413      	add	r3, r2
 800cb82:	1d1a      	adds	r2, r3, #4
 800cb84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f001 fc1b 	bl	800e3cc <ethernet_output>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb9c:	e079      	b.n	800cc92 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb9e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cba2:	493f      	ldr	r1, [pc, #252]	; (800cca0 <etharp_query+0x278>)
 800cba4:	4613      	mov	r3, r2
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	4413      	add	r3, r2
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	440b      	add	r3, r1
 800cbae:	3314      	adds	r3, #20
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d16d      	bne.n	800cc92 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cbbe:	e01a      	b.n	800cbf6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	895a      	ldrh	r2, [r3, #10]
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	891b      	ldrh	r3, [r3, #8]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d10a      	bne.n	800cbe2 <etharp_query+0x1ba>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d006      	beq.n	800cbe2 <etharp_query+0x1ba>
 800cbd4:	4b33      	ldr	r3, [pc, #204]	; (800cca4 <etharp_query+0x27c>)
 800cbd6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cbda:	4937      	ldr	r1, [pc, #220]	; (800ccb8 <etharp_query+0x290>)
 800cbdc:	4833      	ldr	r0, [pc, #204]	; (800ccac <etharp_query+0x284>)
 800cbde:	f001 fc83 	bl	800e4e8 <iprintf>
      if (p->type != PBUF_ROM) {
 800cbe2:	69fb      	ldr	r3, [r7, #28]
 800cbe4:	7b1b      	ldrb	r3, [r3, #12]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d002      	beq.n	800cbf0 <etharp_query+0x1c8>
        copy_needed = 1;
 800cbea:	2301      	movs	r3, #1
 800cbec:	61bb      	str	r3, [r7, #24]
        break;
 800cbee:	e005      	b.n	800cbfc <etharp_query+0x1d4>
      }
      p = p->next;
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e1      	bne.n	800cbc0 <etharp_query+0x198>
    }
    if (copy_needed) {
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d017      	beq.n	800cc32 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800cc02:	69fb      	ldr	r3, [r7, #28]
 800cc04:	891b      	ldrh	r3, [r3, #8]
 800cc06:	2200      	movs	r2, #0
 800cc08:	4619      	mov	r1, r3
 800cc0a:	2002      	movs	r0, #2
 800cc0c:	f7f7 fd6c 	bl	80046e8 <pbuf_alloc>
 800cc10:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d011      	beq.n	800cc3c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	69f8      	ldr	r0, [r7, #28]
 800cc1c:	f7f8 fa0a 	bl	8005034 <pbuf_copy>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00a      	beq.n	800cc3c <etharp_query+0x214>
          pbuf_free(p);
 800cc26:	69f8      	ldr	r0, [r7, #28]
 800cc28:	f7f8 f8d0 	bl	8004dcc <pbuf_free>
          p = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	61fb      	str	r3, [r7, #28]
 800cc30:	e004      	b.n	800cc3c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cc36:	69f8      	ldr	r0, [r7, #28]
 800cc38:	f7f8 f974 	bl	8004f24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d024      	beq.n	800cc8c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cc42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc46:	4916      	ldr	r1, [pc, #88]	; (800cca0 <etharp_query+0x278>)
 800cc48:	4613      	mov	r3, r2
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	4413      	add	r3, r2
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	440b      	add	r3, r1
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800cc58:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc5c:	4910      	ldr	r1, [pc, #64]	; (800cca0 <etharp_query+0x278>)
 800cc5e:	4613      	mov	r3, r2
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	4413      	add	r3, r2
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	440b      	add	r3, r1
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f8 f8ae 	bl	8004dcc <pbuf_free>
      }
      arp_table[i].q = p;
 800cc70:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc74:	490a      	ldr	r1, [pc, #40]	; (800cca0 <etharp_query+0x278>)
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	69fa      	ldr	r2, [r7, #28]
 800cc82:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc8a:	e002      	b.n	800cc92 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cc8c:	23ff      	movs	r3, #255	; 0xff
 800cc8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cc92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3728      	adds	r7, #40	; 0x28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000011c 	.word	0x2000011c
 800cca4:	08010e7c 	.word	0x08010e7c
 800cca8:	08011028 	.word	0x08011028
 800ccac:	08010ef4 	.word	0x08010ef4
 800ccb0:	0801101c 	.word	0x0801101c
 800ccb4:	2000020c 	.word	0x2000020c
 800ccb8:	08011050 	.word	0x08011050

0800ccbc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <etharp_raw+0x26>
 800ccd4:	4b3a      	ldr	r3, [pc, #232]	; (800cdc0 <etharp_raw+0x104>)
 800ccd6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800ccda:	493a      	ldr	r1, [pc, #232]	; (800cdc4 <etharp_raw+0x108>)
 800ccdc:	483a      	ldr	r0, [pc, #232]	; (800cdc8 <etharp_raw+0x10c>)
 800ccde:	f001 fc03 	bl	800e4e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cce2:	2200      	movs	r2, #0
 800cce4:	211c      	movs	r1, #28
 800cce6:	2002      	movs	r0, #2
 800cce8:	f7f7 fcfe 	bl	80046e8 <pbuf_alloc>
 800ccec:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccf8:	e05d      	b.n	800cdb6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	2b1b      	cmp	r3, #27
 800cd00:	d806      	bhi.n	800cd10 <etharp_raw+0x54>
 800cd02:	4b2f      	ldr	r3, [pc, #188]	; (800cdc0 <etharp_raw+0x104>)
 800cd04:	f240 4264 	movw	r2, #1124	; 0x464
 800cd08:	4930      	ldr	r1, [pc, #192]	; (800cdcc <etharp_raw+0x110>)
 800cd0a:	482f      	ldr	r0, [pc, #188]	; (800cdc8 <etharp_raw+0x10c>)
 800cd0c:	f001 fbec 	bl	800e4e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cd16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f6 ff4e 	bl	8003bba <lwip_htons>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	461a      	mov	r2, r3
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd2c:	2b06      	cmp	r3, #6
 800cd2e:	d006      	beq.n	800cd3e <etharp_raw+0x82>
 800cd30:	4b23      	ldr	r3, [pc, #140]	; (800cdc0 <etharp_raw+0x104>)
 800cd32:	f240 426b 	movw	r2, #1131	; 0x46b
 800cd36:	4926      	ldr	r1, [pc, #152]	; (800cdd0 <etharp_raw+0x114>)
 800cd38:	4823      	ldr	r0, [pc, #140]	; (800cdc8 <etharp_raw+0x10c>)
 800cd3a:	f001 fbd5 	bl	800e4e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	3308      	adds	r3, #8
 800cd42:	2206      	movs	r2, #6
 800cd44:	6839      	ldr	r1, [r7, #0]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 fbbb 	bl	800e4c2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	3312      	adds	r3, #18
 800cd50:	2206      	movs	r2, #6
 800cd52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 fbb4 	bl	800e4c2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	330e      	adds	r3, #14
 800cd5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	3318      	adds	r3, #24
 800cd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6a:	6812      	ldr	r2, [r2, #0]
 800cd6c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2200      	movs	r2, #0
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f042 0201 	orr.w	r2, r2, #1
 800cd7a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f042 0208 	orr.w	r2, r2, #8
 800cd84:	709a      	strb	r2, [r3, #2]
 800cd86:	2200      	movs	r2, #0
 800cd88:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2204      	movs	r2, #4
 800cd94:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cd96:	f640 0306 	movw	r3, #2054	; 0x806
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	69b9      	ldr	r1, [r7, #24]
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f001 fb12 	bl	800e3cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cda8:	69b8      	ldr	r0, [r7, #24]
 800cdaa:	f7f8 f80f 	bl	8004dcc <pbuf_free>
  p = NULL;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cdb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3720      	adds	r7, #32
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	08010e7c 	.word	0x08010e7c
 800cdc4:	08010fcc 	.word	0x08010fcc
 800cdc8:	08010ef4 	.word	0x08010ef4
 800cdcc:	0801106c 	.word	0x0801106c
 800cdd0:	080110a0 	.word	0x080110a0

0800cdd4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af04      	add	r7, sp, #16
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	9203      	str	r2, [sp, #12]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	9202      	str	r2, [sp, #8]
 800cdf8:	4a06      	ldr	r2, [pc, #24]	; (800ce14 <etharp_request_dst+0x40>)
 800cdfa:	9201      	str	r2, [sp, #4]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	4603      	mov	r3, r0
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7ff ff5a 	bl	800ccbc <etharp_raw>
 800ce08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	080115f8 	.word	0x080115f8

0800ce18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ce22:	4a05      	ldr	r2, [pc, #20]	; (800ce38 <etharp_request+0x20>)
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7ff ffd4 	bl	800cdd4 <etharp_request_dst>
 800ce2c:	4603      	mov	r3, r0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	080115f0 	.word	0x080115f0

0800ce3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08e      	sub	sp, #56	; 0x38
 800ce40:	af04      	add	r7, sp, #16
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ce46:	4b7a      	ldr	r3, [pc, #488]	; (800d030 <icmp_input+0x1f4>)
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800ce4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	f003 030f 	and.w	r3, r3, #15
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ce5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce5e:	2b13      	cmp	r3, #19
 800ce60:	f240 80d1 	bls.w	800d006 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	895b      	ldrh	r3, [r3, #10]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	f240 80ce 	bls.w	800d00a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ce78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f000 80bb 	beq.w	800cff8 <icmp_input+0x1bc>
 800ce82:	2b08      	cmp	r3, #8
 800ce84:	f040 80bb 	bne.w	800cffe <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800ce88:	4b6a      	ldr	r3, [pc, #424]	; (800d034 <icmp_input+0x1f8>)
 800ce8a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ce8c:	4b68      	ldr	r3, [pc, #416]	; (800d030 <icmp_input+0x1f4>)
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce94:	2be0      	cmp	r3, #224	; 0xe0
 800ce96:	f000 80bf 	beq.w	800d018 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ce9a:	4b65      	ldr	r3, [pc, #404]	; (800d030 <icmp_input+0x1f4>)
 800ce9c:	695a      	ldr	r2, [r3, #20]
 800ce9e:	4b64      	ldr	r3, [pc, #400]	; (800d030 <icmp_input+0x1f4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4619      	mov	r1, r3
 800cea4:	4610      	mov	r0, r2
 800cea6:	f000 fbef 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f040 80b5 	bne.w	800d01c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	891b      	ldrh	r3, [r3, #8]
 800ceb6:	2b07      	cmp	r3, #7
 800ceb8:	f240 80a9 	bls.w	800d00e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cebe:	330e      	adds	r3, #14
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	b21b      	sxth	r3, r3
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7f7 ff5c 	bl	8004d84 <pbuf_header>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d046      	beq.n	800cf60 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	891a      	ldrh	r2, [r3, #8]
 800ced6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced8:	4413      	add	r3, r2
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	2200      	movs	r2, #0
 800cede:	4619      	mov	r1, r3
 800cee0:	2002      	movs	r0, #2
 800cee2:	f7f7 fc01 	bl	80046e8 <pbuf_alloc>
 800cee6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 8098 	beq.w	800d020 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cef0:	69bb      	ldr	r3, [r7, #24]
 800cef2:	895b      	ldrh	r3, [r3, #10]
 800cef4:	461a      	mov	r2, r3
 800cef6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cef8:	3308      	adds	r3, #8
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d203      	bcs.n	800cf06 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800cefe:	69b8      	ldr	r0, [r7, #24]
 800cf00:	f7f7 ff64 	bl	8004dcc <pbuf_free>
        goto icmperr;
 800cf04:	e08d      	b.n	800d022 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f001 fad7 	bl	800e4c2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800cf14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf16:	425b      	negs	r3, r3
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	b21b      	sxth	r3, r3
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	69b8      	ldr	r0, [r7, #24]
 800cf20:	f7f7 ff30 	bl	8004d84 <pbuf_header>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cf2a:	4b43      	ldr	r3, [pc, #268]	; (800d038 <icmp_input+0x1fc>)
 800cf2c:	22af      	movs	r2, #175	; 0xaf
 800cf2e:	4943      	ldr	r1, [pc, #268]	; (800d03c <icmp_input+0x200>)
 800cf30:	4843      	ldr	r0, [pc, #268]	; (800d040 <icmp_input+0x204>)
 800cf32:	f001 fad9 	bl	800e4e8 <iprintf>
        pbuf_free(r);
 800cf36:	69b8      	ldr	r0, [r7, #24]
 800cf38:	f7f7 ff48 	bl	8004dcc <pbuf_free>
        goto icmperr;
 800cf3c:	e071      	b.n	800d022 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	69b8      	ldr	r0, [r7, #24]
 800cf42:	f7f8 f877 	bl	8005034 <pbuf_copy>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800cf4c:	69b8      	ldr	r0, [r7, #24]
 800cf4e:	f7f7 ff3d 	bl	8004dcc <pbuf_free>
        goto icmperr;
 800cf52:	e066      	b.n	800d022 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f7 ff39 	bl	8004dcc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	607b      	str	r3, [r7, #4]
 800cf5e:	e015      	b.n	800cf8c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cf60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf62:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800cf66:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cf6a:	33f2      	adds	r3, #242	; 0xf2
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	b21b      	sxth	r3, r3
 800cf70:	4619      	mov	r1, r3
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f7f7 ff06 	bl	8004d84 <pbuf_header>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d006      	beq.n	800cf8c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cf7e:	4b2e      	ldr	r3, [pc, #184]	; (800d038 <icmp_input+0x1fc>)
 800cf80:	22c0      	movs	r2, #192	; 0xc0
 800cf82:	4930      	ldr	r1, [pc, #192]	; (800d044 <icmp_input+0x208>)
 800cf84:	482e      	ldr	r0, [pc, #184]	; (800d040 <icmp_input+0x204>)
 800cf86:	f001 faaf 	bl	800e4e8 <iprintf>
        goto icmperr;
 800cf8a:	e04a      	b.n	800d022 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800cf92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f7 fef3 	bl	8004d84 <pbuf_header>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d12b      	bne.n	800cffc <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cfb2:	4b1f      	ldr	r3, [pc, #124]	; (800d030 <icmp_input+0x1f4>)
 800cfb4:	691a      	ldr	r2, [r3, #16]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	709a      	strb	r2, [r3, #2]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	22ff      	movs	r2, #255	; 0xff
 800cfce:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	729a      	strb	r2, [r3, #10]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	2301      	movs	r3, #1
 800cfe0:	9301      	str	r3, [sp, #4]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	9300      	str	r3, [sp, #0]
 800cfe6:	23ff      	movs	r3, #255	; 0xff
 800cfe8:	2200      	movs	r2, #0
 800cfea:	69f9      	ldr	r1, [r7, #28]
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fa79 	bl	800d4e4 <ip4_output_if>
 800cff2:	4603      	mov	r3, r0
 800cff4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800cff6:	e001      	b.n	800cffc <icmp_input+0x1c0>
    break;
 800cff8:	bf00      	nop
 800cffa:	e000      	b.n	800cffe <icmp_input+0x1c2>
    break;
 800cffc:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7f7 fee4 	bl	8004dcc <pbuf_free>
  return;
 800d004:	e011      	b.n	800d02a <icmp_input+0x1ee>
    goto lenerr;
 800d006:	bf00      	nop
 800d008:	e002      	b.n	800d010 <icmp_input+0x1d4>
    goto lenerr;
 800d00a:	bf00      	nop
 800d00c:	e000      	b.n	800d010 <icmp_input+0x1d4>
      goto lenerr;
 800d00e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7f7 fedb 	bl	8004dcc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d016:	e008      	b.n	800d02a <icmp_input+0x1ee>
      goto icmperr;
 800d018:	bf00      	nop
 800d01a:	e002      	b.n	800d022 <icmp_input+0x1e6>
      goto icmperr;
 800d01c:	bf00      	nop
 800d01e:	e000      	b.n	800d022 <icmp_input+0x1e6>
        goto icmperr;
 800d020:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7f7 fed2 	bl	8004dcc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d028:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d02a:	3728      	adds	r7, #40	; 0x28
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	20003448 	.word	0x20003448
 800d034:	2000345c 	.word	0x2000345c
 800d038:	080110e4 	.word	0x080110e4
 800d03c:	0801111c 	.word	0x0801111c
 800d040:	08011154 	.word	0x08011154
 800d044:	0801117c 	.word	0x0801117c

0800d048 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	461a      	mov	r2, r3
 800d058:	2103      	movs	r1, #3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f814 	bl	800d088 <icmp_send_response>
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d074:	78fb      	ldrb	r3, [r7, #3]
 800d076:	461a      	mov	r2, r3
 800d078:	210b      	movs	r1, #11
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f804 	bl	800d088 <icmp_send_response>
}
 800d080:	bf00      	nop
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	; 0x30
 800d08c:	af04      	add	r7, sp, #16
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
 800d094:	4613      	mov	r3, r2
 800d096:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d098:	2200      	movs	r2, #0
 800d09a:	2124      	movs	r1, #36	; 0x24
 800d09c:	2001      	movs	r0, #1
 800d09e:	f7f7 fb23 	bl	80046e8 <pbuf_alloc>
 800d0a2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d04c      	beq.n	800d144 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	895b      	ldrh	r3, [r3, #10]
 800d0ae:	2b23      	cmp	r3, #35	; 0x23
 800d0b0:	d806      	bhi.n	800d0c0 <icmp_send_response+0x38>
 800d0b2:	4b26      	ldr	r3, [pc, #152]	; (800d14c <icmp_send_response+0xc4>)
 800d0b4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800d0b8:	4925      	ldr	r1, [pc, #148]	; (800d150 <icmp_send_response+0xc8>)
 800d0ba:	4826      	ldr	r0, [pc, #152]	; (800d154 <icmp_send_response+0xcc>)
 800d0bc:	f001 fa14 	bl	800e4e8 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	78fa      	ldrb	r2, [r7, #3]
 800d0d0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	78ba      	ldrb	r2, [r7, #2]
 800d0d6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	711a      	strb	r2, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	719a      	strb	r2, [r3, #6]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	f103 0008 	add.w	r0, r3, #8
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	221c      	movs	r2, #28
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f001 f9e1 	bl	800e4c2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 f824 	bl	800d158 <ip4_route>
 800d110:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d011      	beq.n	800d13c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2200      	movs	r2, #0
 800d11c:	709a      	strb	r2, [r3, #2]
 800d11e:	2200      	movs	r2, #0
 800d120:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d122:	f107 020c 	add.w	r2, r7, #12
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	2301      	movs	r3, #1
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	2300      	movs	r3, #0
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	23ff      	movs	r3, #255	; 0xff
 800d134:	2100      	movs	r1, #0
 800d136:	69f8      	ldr	r0, [r7, #28]
 800d138:	f000 f9d4 	bl	800d4e4 <ip4_output_if>
  }
  pbuf_free(q);
 800d13c:	69f8      	ldr	r0, [r7, #28]
 800d13e:	f7f7 fe45 	bl	8004dcc <pbuf_free>
 800d142:	e000      	b.n	800d146 <icmp_send_response+0xbe>
    return;
 800d144:	bf00      	nop
}
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	080110e4 	.word	0x080110e4
 800d150:	080111b0 	.word	0x080111b0
 800d154:	08011154 	.word	0x08011154

0800d158 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d160:	4b30      	ldr	r3, [pc, #192]	; (800d224 <ip4_route+0xcc>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	60fb      	str	r3, [r7, #12]
 800d166:	e036      	b.n	800d1d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d02b      	beq.n	800d1d0 <ip4_route+0x78>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d17e:	089b      	lsrs	r3, r3, #2
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	d022      	beq.n	800d1d0 <ip4_route+0x78>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3304      	adds	r3, #4
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d01d      	beq.n	800d1d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3304      	adds	r3, #4
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	405a      	eors	r2, r3
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3308      	adds	r3, #8
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	e033      	b.n	800d218 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1b6:	f003 0302 	and.w	r3, r3, #2
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d108      	bne.n	800d1d0 <ip4_route+0x78>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	330c      	adds	r3, #12
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d101      	bne.n	800d1d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	e023      	b.n	800d218 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60fb      	str	r3, [r7, #12]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1c5      	bne.n	800d168 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d1dc:	4b12      	ldr	r3, [pc, #72]	; (800d228 <ip4_route+0xd0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d015      	beq.n	800d210 <ip4_route+0xb8>
 800d1e4:	4b10      	ldr	r3, [pc, #64]	; (800d228 <ip4_route+0xd0>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00d      	beq.n	800d210 <ip4_route+0xb8>
 800d1f4:	4b0c      	ldr	r3, [pc, #48]	; (800d228 <ip4_route+0xd0>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b00      	cmp	r3, #0
 800d202:	d005      	beq.n	800d210 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800d204:	4b08      	ldr	r3, [pc, #32]	; (800d228 <ip4_route+0xd0>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3304      	adds	r3, #4
 800d20a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	e001      	b.n	800d218 <ip4_route+0xc0>
  }

  return netif_default;
 800d214:	4b04      	ldr	r3, [pc, #16]	; (800d228 <ip4_route+0xd0>)
 800d216:	681b      	ldr	r3, [r3, #0]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20006988 	.word	0x20006988
 800d228:	2000698c 	.word	0x2000698c

0800d22c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800d236:	2301      	movs	r3, #1
 800d238:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	091b      	lsrs	r3, r3, #4
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b04      	cmp	r3, #4
 800d24a:	d004      	beq.n	800d256 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7f7 fdbd 	bl	8004dcc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	e13e      	b.n	800d4d4 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800d262:	89fb      	ldrh	r3, [r7, #14]
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	885b      	ldrh	r3, [r3, #2]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	4618      	mov	r0, r3
 800d270:	f7f6 fca3 	bl	8003bba <lwip_htons>
 800d274:	4603      	mov	r3, r0
 800d276:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	891b      	ldrh	r3, [r3, #8]
 800d27c:	89ba      	ldrh	r2, [r7, #12]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d204      	bcs.n	800d28c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800d282:	89bb      	ldrh	r3, [r7, #12]
 800d284:	4619      	mov	r1, r3
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7f7 fc2c 	bl	8004ae4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	89fa      	ldrh	r2, [r7, #14]
 800d292:	429a      	cmp	r2, r3
 800d294:	d807      	bhi.n	800d2a6 <ip4_input+0x7a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	891b      	ldrh	r3, [r3, #8]
 800d29a:	89ba      	ldrh	r2, [r7, #12]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d802      	bhi.n	800d2a6 <ip4_input+0x7a>
 800d2a0:	89fb      	ldrh	r3, [r7, #14]
 800d2a2:	2b13      	cmp	r3, #19
 800d2a4:	d804      	bhi.n	800d2b0 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f7f7 fd90 	bl	8004dcc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e111      	b.n	800d4d4 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	4a89      	ldr	r2, [pc, #548]	; (800d4dc <ip4_input+0x2b0>)
 800d2b6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	4a87      	ldr	r2, [pc, #540]	; (800d4dc <ip4_input+0x2b0>)
 800d2be:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2c0:	4b86      	ldr	r3, [pc, #536]	; (800d4dc <ip4_input+0x2b0>)
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d2c8:	2be0      	cmp	r3, #224	; 0xe0
 800d2ca:	d112      	bne.n	800d2f2 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	b2db      	uxtb	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d007      	beq.n	800d2ec <ip4_input+0xc0>
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <ip4_input+0xc0>
      netif = inp;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	61bb      	str	r3, [r7, #24]
 800d2ea:	e041      	b.n	800d370 <ip4_input+0x144>
    } else {
      netif = NULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61bb      	str	r3, [r7, #24]
 800d2f0:	e03e      	b.n	800d370 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	613b      	str	r3, [r7, #16]
    netif = inp;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	b2db      	uxtb	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d014      	beq.n	800d334 <ip4_input+0x108>
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	3304      	adds	r3, #4
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00f      	beq.n	800d334 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d314:	4b71      	ldr	r3, [pc, #452]	; (800d4dc <ip4_input+0x2b0>)
 800d316:	695a      	ldr	r2, [r3, #20]
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	3304      	adds	r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d026      	beq.n	800d370 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d322:	4b6e      	ldr	r3, [pc, #440]	; (800d4dc <ip4_input+0x2b0>)
 800d324:	695b      	ldr	r3, [r3, #20]
 800d326:	69b9      	ldr	r1, [r7, #24]
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 f9ad 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800d32e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d330:	2b00      	cmp	r3, #0
 800d332:	d11d      	bne.n	800d370 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00d      	beq.n	800d356 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800d33a:	4b68      	ldr	r3, [pc, #416]	; (800d4dc <ip4_input+0x2b0>)
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	2b7f      	cmp	r3, #127	; 0x7f
 800d342:	d102      	bne.n	800d34a <ip4_input+0x11e>
          netif = NULL;
 800d344:	2300      	movs	r3, #0
 800d346:	61bb      	str	r3, [r7, #24]
          break;
 800d348:	e012      	b.n	800d370 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800d34e:	4b64      	ldr	r3, [pc, #400]	; (800d4e0 <ip4_input+0x2b4>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	61bb      	str	r3, [r7, #24]
 800d354:	e002      	b.n	800d35c <ip4_input+0x130>
      } else {
        netif = netif->next;
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	429a      	cmp	r2, r3
 800d362:	d102      	bne.n	800d36a <ip4_input+0x13e>
        netif = netif->next;
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1c4      	bne.n	800d2fa <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d111      	bne.n	800d39a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	7a5b      	ldrb	r3, [r3, #9]
 800d37a:	2b11      	cmp	r3, #17
 800d37c:	d10d      	bne.n	800d39a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800d37e:	89fb      	ldrh	r3, [r7, #14]
 800d380:	69fa      	ldr	r2, [r7, #28]
 800d382:	4413      	add	r3, r2
 800d384:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	885b      	ldrh	r3, [r3, #2]
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800d390:	d103      	bne.n	800d39a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800d396:	2300      	movs	r3, #0
 800d398:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d017      	beq.n	800d3d0 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800d3a0:	4b4e      	ldr	r3, [pc, #312]	; (800d4dc <ip4_input+0x2b0>)
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d013      	beq.n	800d3d0 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3a8:	4b4c      	ldr	r3, [pc, #304]	; (800d4dc <ip4_input+0x2b0>)
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f96a 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d105      	bne.n	800d3c6 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d3ba:	4b48      	ldr	r3, [pc, #288]	; (800d4dc <ip4_input+0x2b0>)
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3c2:	2be0      	cmp	r3, #224	; 0xe0
 800d3c4:	d104      	bne.n	800d3d0 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7f7 fd00 	bl	8004dcc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e081      	b.n	800d4d4 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d104      	bne.n	800d3e0 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7f7 fcf8 	bl	8004dcc <pbuf_free>
    return ERR_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e079      	b.n	800d4d4 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	88db      	ldrh	r3, [r3, #6]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00b      	beq.n	800d40a <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fc8e 	bl	800dd14 <ip4_reass>
 800d3f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <ip4_input+0x1d8>
      return ERR_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	e067      	b.n	800d4d4 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d40a:	4a34      	ldr	r2, [pc, #208]	; (800d4dc <ip4_input+0x2b0>)
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d410:	4a32      	ldr	r2, [pc, #200]	; (800d4dc <ip4_input+0x2b0>)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d416:	4a31      	ldr	r2, [pc, #196]	; (800d4dc <ip4_input+0x2b0>)
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	b29b      	uxth	r3, r3
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	b29b      	uxth	r3, r3
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	4b2b      	ldr	r3, [pc, #172]	; (800d4dc <ip4_input+0x2b0>)
 800d42e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800d430:	89fb      	ldrh	r3, [r7, #14]
 800d432:	425b      	negs	r3, r3
 800d434:	b29b      	uxth	r3, r3
 800d436:	b21b      	sxth	r3, r3
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7f7 fca2 	bl	8004d84 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	7a5b      	ldrb	r3, [r3, #9]
 800d444:	2b06      	cmp	r3, #6
 800d446:	d009      	beq.n	800d45c <ip4_input+0x230>
 800d448:	2b11      	cmp	r3, #17
 800d44a:	d002      	beq.n	800d452 <ip4_input+0x226>
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d00a      	beq.n	800d466 <ip4_input+0x23a>
 800d450:	e00e      	b.n	800d470 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800d452:	6839      	ldr	r1, [r7, #0]
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7fc fc0f 	bl	8009c78 <udp_input>
      break;
 800d45a:	e028      	b.n	800d4ae <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7f9 f8fc 	bl	800665c <tcp_input>
      break;
 800d464:	e023      	b.n	800d4ae <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f7ff fce7 	bl	800ce3c <icmp_input>
      break;
 800d46e:	e01e      	b.n	800d4ae <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d470:	4b1a      	ldr	r3, [pc, #104]	; (800d4dc <ip4_input+0x2b0>)
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	69b9      	ldr	r1, [r7, #24]
 800d476:	4618      	mov	r0, r3
 800d478:	f000 f906 	bl	800d688 <ip4_addr_isbroadcast_u32>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d112      	bne.n	800d4a8 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <ip4_input+0x2b0>)
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d48a:	2be0      	cmp	r3, #224	; 0xe0
 800d48c:	d00c      	beq.n	800d4a8 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800d48e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7f7 fc87 	bl	8004da8 <pbuf_header_force>
        p->payload = iphdr;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	69fa      	ldr	r2, [r7, #28]
 800d49e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d4a0:	2102      	movs	r1, #2
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fdd0 	bl	800d048 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7f7 fc8f 	bl	8004dcc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d4ae:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <ip4_input+0x2b0>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d4b4:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <ip4_input+0x2b0>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d4ba:	4b08      	ldr	r3, [pc, #32]	; (800d4dc <ip4_input+0x2b0>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d4c0:	4b06      	ldr	r3, [pc, #24]	; (800d4dc <ip4_input+0x2b0>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d4c6:	4b05      	ldr	r3, [pc, #20]	; (800d4dc <ip4_input+0x2b0>)
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d4cc:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <ip4_input+0x2b0>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20003448 	.word	0x20003448
 800d4e0:	20006988 	.word	0x20006988

0800d4e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b08a      	sub	sp, #40	; 0x28
 800d4e8:	af04      	add	r7, sp, #16
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d009      	beq.n	800d510 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d003      	beq.n	800d50a <ip4_output_if+0x26>
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d102      	bne.n	800d510 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	3304      	adds	r3, #4
 800d50e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d510:	78fa      	ldrb	r2, [r7, #3]
 800d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d514:	9302      	str	r3, [sp, #8]
 800d516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4613      	mov	r3, r2
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	6979      	ldr	r1, [r7, #20]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f000 f805 	bl	800d538 <ip4_output_if_src>
 800d52e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	89db      	ldrh	r3, [r3, #14]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d006      	beq.n	800d55c <ip4_output_if_src+0x24>
 800d54e:	4b48      	ldr	r3, [pc, #288]	; (800d670 <ip4_output_if_src+0x138>)
 800d550:	f240 3233 	movw	r2, #819	; 0x333
 800d554:	4947      	ldr	r1, [pc, #284]	; (800d674 <ip4_output_if_src+0x13c>)
 800d556:	4848      	ldr	r0, [pc, #288]	; (800d678 <ip4_output_if_src+0x140>)
 800d558:	f000 ffc6 	bl	800e4e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d060      	beq.n	800d624 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d562:	2314      	movs	r3, #20
 800d564:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800d566:	2114      	movs	r1, #20
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7f7 fc0b 	bl	8004d84 <pbuf_header>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d574:	f06f 0301 	mvn.w	r3, #1
 800d578:	e075      	b.n	800d666 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	895b      	ldrh	r3, [r3, #10]
 800d584:	2b13      	cmp	r3, #19
 800d586:	d806      	bhi.n	800d596 <ip4_output_if_src+0x5e>
 800d588:	4b39      	ldr	r3, [pc, #228]	; (800d670 <ip4_output_if_src+0x138>)
 800d58a:	f240 3261 	movw	r2, #865	; 0x361
 800d58e:	493b      	ldr	r1, [pc, #236]	; (800d67c <ip4_output_if_src+0x144>)
 800d590:	4839      	ldr	r0, [pc, #228]	; (800d678 <ip4_output_if_src+0x140>)
 800d592:	f000 ffa9 	bl	800e4e8 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	78fa      	ldrb	r2, [r7, #3]
 800d59a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d5a2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d5ac:	8b7b      	ldrh	r3, [r7, #26]
 800d5ae:	089b      	lsrs	r3, r3, #2
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d5c4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	891b      	ldrh	r3, [r3, #8]
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7f6 faf5 	bl	8003bba <lwip_htons>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	719a      	strb	r2, [r3, #6]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5e2:	4b27      	ldr	r3, [pc, #156]	; (800d680 <ip4_output_if_src+0x148>)
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7f6 fae7 	bl	8003bba <lwip_htons>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d5f4:	4b22      	ldr	r3, [pc, #136]	; (800d680 <ip4_output_if_src+0x148>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	4b20      	ldr	r3, [pc, #128]	; (800d680 <ip4_output_if_src+0x148>)
 800d5fe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d606:	4b1f      	ldr	r3, [pc, #124]	; (800d684 <ip4_output_if_src+0x14c>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	60da      	str	r2, [r3, #12]
 800d60e:	e003      	b.n	800d618 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2200      	movs	r2, #0
 800d61c:	729a      	strb	r2, [r3, #10]
 800d61e:	2200      	movs	r2, #0
 800d620:	72da      	strb	r2, [r3, #11]
 800d622:	e008      	b.n	800d636 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d630:	f107 0314 	add.w	r3, r7, #20
 800d634:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00c      	beq.n	800d658 <ip4_output_if_src+0x120>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	891a      	ldrh	r2, [r3, #8]
 800d642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d646:	429a      	cmp	r2, r3
 800d648:	d906      	bls.n	800d658 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fd0a 	bl	800e068 <ip4_frag>
 800d654:	4603      	mov	r3, r0
 800d656:	e006      	b.n	800d666 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	68f9      	ldr	r1, [r7, #12]
 800d660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d662:	4798      	blx	r3
 800d664:	4603      	mov	r3, r0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3720      	adds	r7, #32
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	080111dc 	.word	0x080111dc
 800d674:	08011210 	.word	0x08011210
 800d678:	0801121c 	.word	0x0801121c
 800d67c:	08011244 	.word	0x08011244
 800d680:	2000020e 	.word	0x2000020e
 800d684:	080115e8 	.word	0x080115e8

0800d688 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d69c:	d002      	beq.n	800d6a4 <ip4_addr_isbroadcast_u32+0x1c>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e02a      	b.n	800d6fe <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d6ae:	f003 0302 	and.w	r3, r3, #2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d101      	bne.n	800d6ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e021      	b.n	800d6fe <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d101      	bne.n	800d6ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e019      	b.n	800d6fe <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	3304      	adds	r3, #4
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	405a      	eors	r2, r3
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10d      	bne.n	800d6fc <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	3308      	adds	r3, #8
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	43da      	mvns	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d101      	bne.n	800d6fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e000      	b.n	800d6fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d6fc:	2300      	movs	r3, #0
  }
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3714      	adds	r7, #20
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
	...

0800d70c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d712:	2300      	movs	r3, #0
 800d714:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d716:	4b12      	ldr	r3, [pc, #72]	; (800d760 <ip_reass_tmr+0x54>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d71c:	e018      	b.n	800d750 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	7fdb      	ldrb	r3, [r3, #31]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00b      	beq.n	800d73e <ip_reass_tmr+0x32>
      r->timer--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	7fdb      	ldrb	r3, [r3, #31]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	e008      	b.n	800d750 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d748:	68b9      	ldr	r1, [r7, #8]
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 f80a 	bl	800d764 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1e3      	bne.n	800d71e <ip_reass_tmr+0x12>
     }
   }
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20000210 	.word	0x20000210

0800d764 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	429a      	cmp	r2, r3
 800d778:	d105      	bne.n	800d786 <ip_reass_free_complete_datagram+0x22>
 800d77a:	4b45      	ldr	r3, [pc, #276]	; (800d890 <ip_reass_free_complete_datagram+0x12c>)
 800d77c:	22ab      	movs	r2, #171	; 0xab
 800d77e:	4945      	ldr	r1, [pc, #276]	; (800d894 <ip_reass_free_complete_datagram+0x130>)
 800d780:	4845      	ldr	r0, [pc, #276]	; (800d898 <ip_reass_free_complete_datagram+0x134>)
 800d782:	f000 feb1 	bl	800e4e8 <iprintf>
  if (prev != NULL) {
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00a      	beq.n	800d7a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	429a      	cmp	r2, r3
 800d794:	d005      	beq.n	800d7a2 <ip_reass_free_complete_datagram+0x3e>
 800d796:	4b3e      	ldr	r3, [pc, #248]	; (800d890 <ip_reass_free_complete_datagram+0x12c>)
 800d798:	22ad      	movs	r2, #173	; 0xad
 800d79a:	4940      	ldr	r1, [pc, #256]	; (800d89c <ip_reass_free_complete_datagram+0x138>)
 800d79c:	483e      	ldr	r0, [pc, #248]	; (800d898 <ip_reass_free_complete_datagram+0x134>)
 800d79e:	f000 fea3 	bl	800e4e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	889b      	ldrh	r3, [r3, #4]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d12a      	bne.n	800d80a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	6858      	ldr	r0, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	3308      	adds	r3, #8
 800d7ca:	2214      	movs	r2, #20
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	f000 fe78 	bl	800e4c2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	69b8      	ldr	r0, [r7, #24]
 800d7d6:	f7ff fc47 	bl	800d068 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d7da:	69b8      	ldr	r0, [r7, #24]
 800d7dc:	f7f7 fb8a 	bl	8004ef4 <pbuf_clen>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d7e4:	8bfa      	ldrh	r2, [r7, #30]
 800d7e6:	8a7b      	ldrh	r3, [r7, #18]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7ee:	db05      	blt.n	800d7fc <ip_reass_free_complete_datagram+0x98>
 800d7f0:	4b27      	ldr	r3, [pc, #156]	; (800d890 <ip_reass_free_complete_datagram+0x12c>)
 800d7f2:	22bc      	movs	r2, #188	; 0xbc
 800d7f4:	492a      	ldr	r1, [pc, #168]	; (800d8a0 <ip_reass_free_complete_datagram+0x13c>)
 800d7f6:	4828      	ldr	r0, [pc, #160]	; (800d898 <ip_reass_free_complete_datagram+0x134>)
 800d7f8:	f000 fe76 	bl	800e4e8 <iprintf>
    pbufs_freed += clen;
 800d7fc:	8bfa      	ldrh	r2, [r7, #30]
 800d7fe:	8a7b      	ldrh	r3, [r7, #18]
 800d800:	4413      	add	r3, r2
 800d802:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d804:	69b8      	ldr	r0, [r7, #24]
 800d806:	f7f7 fae1 	bl	8004dcc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d810:	e01f      	b.n	800d852 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7f7 fb66 	bl	8004ef4 <pbuf_clen>
 800d828:	4603      	mov	r3, r0
 800d82a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d82c:	8bfa      	ldrh	r2, [r7, #30]
 800d82e:	8a7b      	ldrh	r3, [r7, #18]
 800d830:	4413      	add	r3, r2
 800d832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d836:	db05      	blt.n	800d844 <ip_reass_free_complete_datagram+0xe0>
 800d838:	4b15      	ldr	r3, [pc, #84]	; (800d890 <ip_reass_free_complete_datagram+0x12c>)
 800d83a:	22cc      	movs	r2, #204	; 0xcc
 800d83c:	4918      	ldr	r1, [pc, #96]	; (800d8a0 <ip_reass_free_complete_datagram+0x13c>)
 800d83e:	4816      	ldr	r0, [pc, #88]	; (800d898 <ip_reass_free_complete_datagram+0x134>)
 800d840:	f000 fe52 	bl	800e4e8 <iprintf>
    pbufs_freed += clen;
 800d844:	8bfa      	ldrh	r2, [r7, #30]
 800d846:	8a7b      	ldrh	r3, [r7, #18]
 800d848:	4413      	add	r3, r2
 800d84a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7f7 fabd 	bl	8004dcc <pbuf_free>
  while (p != NULL) {
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d1dc      	bne.n	800d812 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f8c2 	bl	800d9e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d860:	4b10      	ldr	r3, [pc, #64]	; (800d8a4 <ip_reass_free_complete_datagram+0x140>)
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	8bfa      	ldrh	r2, [r7, #30]
 800d866:	429a      	cmp	r2, r3
 800d868:	d905      	bls.n	800d876 <ip_reass_free_complete_datagram+0x112>
 800d86a:	4b09      	ldr	r3, [pc, #36]	; (800d890 <ip_reass_free_complete_datagram+0x12c>)
 800d86c:	22d2      	movs	r2, #210	; 0xd2
 800d86e:	490e      	ldr	r1, [pc, #56]	; (800d8a8 <ip_reass_free_complete_datagram+0x144>)
 800d870:	4809      	ldr	r0, [pc, #36]	; (800d898 <ip_reass_free_complete_datagram+0x134>)
 800d872:	f000 fe39 	bl	800e4e8 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d876:	4b0b      	ldr	r3, [pc, #44]	; (800d8a4 <ip_reass_free_complete_datagram+0x140>)
 800d878:	881a      	ldrh	r2, [r3, #0]
 800d87a:	8bfb      	ldrh	r3, [r7, #30]
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	b29a      	uxth	r2, r3
 800d880:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <ip_reass_free_complete_datagram+0x140>)
 800d882:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d884:	8bfb      	ldrh	r3, [r7, #30]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3720      	adds	r7, #32
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	08011274 	.word	0x08011274
 800d894:	080112b0 	.word	0x080112b0
 800d898:	080112bc 	.word	0x080112bc
 800d89c:	080112e4 	.word	0x080112e4
 800d8a0:	080112f8 	.word	0x080112f8
 800d8a4:	20000214 	.word	0x20000214
 800d8a8:	08011318 	.word	0x08011318

0800d8ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b08a      	sub	sp, #40	; 0x28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d8ca:	4b28      	ldr	r3, [pc, #160]	; (800d96c <ip_reass_remove_oldest_datagram+0xc0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d8d0:	e030      	b.n	800d934 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	695a      	ldr	r2, [r3, #20]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d10c      	bne.n	800d8f8 <ip_reass_remove_oldest_datagram+0x4c>
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	699a      	ldr	r2, [r3, #24]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691b      	ldr	r3, [r3, #16]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d106      	bne.n	800d8f8 <ip_reass_remove_oldest_datagram+0x4c>
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	899a      	ldrh	r2, [r3, #12]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	889b      	ldrh	r3, [r3, #4]
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d014      	beq.n	800d922 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d8fe:	6a3b      	ldr	r3, [r7, #32]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d104      	bne.n	800d90e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	61bb      	str	r3, [r7, #24]
 800d90c:	e009      	b.n	800d922 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	7fda      	ldrb	r2, [r3, #31]
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	7fdb      	ldrb	r3, [r3, #31]
 800d916:	429a      	cmp	r2, r3
 800d918:	d803      	bhi.n	800d922 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1cb      	bne.n	800d8d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d008      	beq.n	800d952 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d940:	69b9      	ldr	r1, [r7, #24]
 800d942:	6a38      	ldr	r0, [r7, #32]
 800d944:	f7ff ff0e 	bl	800d764 <ip_reass_free_complete_datagram>
 800d948:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d94a:	697a      	ldr	r2, [r7, #20]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4413      	add	r3, r2
 800d950:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	429a      	cmp	r2, r3
 800d958:	da02      	bge.n	800d960 <ip_reass_remove_oldest_datagram+0xb4>
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	dcac      	bgt.n	800d8ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d960:	697b      	ldr	r3, [r7, #20]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3728      	adds	r7, #40	; 0x28
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000210 	.word	0x20000210

0800d970 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d97a:	2004      	movs	r0, #4
 800d97c:	f7f6 fccc 	bl	8004318 <memp_malloc>
 800d980:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d110      	bne.n	800d9aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d988:	6839      	ldr	r1, [r7, #0]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f7ff ff8e 	bl	800d8ac <ip_reass_remove_oldest_datagram>
 800d990:	4602      	mov	r2, r0
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	4293      	cmp	r3, r2
 800d996:	dc03      	bgt.n	800d9a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d998:	2004      	movs	r0, #4
 800d99a:	f7f6 fcbd 	bl	8004318 <memp_malloc>
 800d99e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e016      	b.n	800d9d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d9aa:	2220      	movs	r2, #32
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f000 fd92 	bl	800e4d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2203      	movs	r2, #3
 800d9b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d9ba:	4b09      	ldr	r3, [pc, #36]	; (800d9e0 <ip_reass_enqueue_new_datagram+0x70>)
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d9c2:	4a07      	ldr	r2, [pc, #28]	; (800d9e0 <ip_reass_enqueue_new_datagram+0x70>)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	2214      	movs	r2, #20
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fd76 	bl	800e4c2 <memcpy>
  return ipr;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	20000210 	.word	0x20000210

0800d9e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d9ee:	4b10      	ldr	r3, [pc, #64]	; (800da30 <ip_reass_dequeue_datagram+0x4c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d104      	bne.n	800da02 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a0c      	ldr	r2, [pc, #48]	; (800da30 <ip_reass_dequeue_datagram+0x4c>)
 800d9fe:	6013      	str	r3, [r2, #0]
 800da00:	e00d      	b.n	800da1e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d106      	bne.n	800da16 <ip_reass_dequeue_datagram+0x32>
 800da08:	4b0a      	ldr	r3, [pc, #40]	; (800da34 <ip_reass_dequeue_datagram+0x50>)
 800da0a:	f240 1245 	movw	r2, #325	; 0x145
 800da0e:	490a      	ldr	r1, [pc, #40]	; (800da38 <ip_reass_dequeue_datagram+0x54>)
 800da10:	480a      	ldr	r0, [pc, #40]	; (800da3c <ip_reass_dequeue_datagram+0x58>)
 800da12:	f000 fd69 	bl	800e4e8 <iprintf>
    prev->next = ipr->next;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	2004      	movs	r0, #4
 800da22:	f7f6 fcc5 	bl	80043b0 <memp_free>
}
 800da26:	bf00      	nop
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20000210 	.word	0x20000210
 800da34:	08011274 	.word	0x08011274
 800da38:	08011334 	.word	0x08011334
 800da3c:	080112bc 	.word	0x080112bc

0800da40 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08c      	sub	sp, #48	; 0x30
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800da50:	2301      	movs	r3, #1
 800da52:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	885b      	ldrh	r3, [r3, #2]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	4618      	mov	r0, r3
 800da62:	f7f6 f8aa 	bl	8003bba <lwip_htons>
 800da66:	4603      	mov	r3, r0
 800da68:	461a      	mov	r2, r3
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	b29b      	uxth	r3, r3
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800da7e:	69fb      	ldr	r3, [r7, #28]
 800da80:	88db      	ldrh	r3, [r3, #6]
 800da82:	b29b      	uxth	r3, r3
 800da84:	4618      	mov	r0, r3
 800da86:	f7f6 f898 	bl	8003bba <lwip_htons>
 800da8a:	4603      	mov	r3, r0
 800da8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da90:	b29b      	uxth	r3, r3
 800da92:	00db      	lsls	r3, r3, #3
 800da94:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9e:	2200      	movs	r2, #0
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	2200      	movs	r2, #0
 800daa4:	705a      	strb	r2, [r3, #1]
 800daa6:	2200      	movs	r2, #0
 800daa8:	709a      	strb	r2, [r3, #2]
 800daaa:	2200      	movs	r2, #0
 800daac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	8b3a      	ldrh	r2, [r7, #24]
 800dab2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800dab4:	8b3a      	ldrh	r2, [r7, #24]
 800dab6:	8b7b      	ldrh	r3, [r7, #26]
 800dab8:	4413      	add	r3, r2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dabe:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	627b      	str	r3, [r7, #36]	; 0x24
 800dac6:	e061      	b.n	800db8c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800dace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad0:	889b      	ldrh	r3, [r3, #4]
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	889b      	ldrh	r3, [r3, #4]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	429a      	cmp	r2, r3
 800dadc:	d232      	bcs.n	800db44 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d01f      	beq.n	800db2a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800daea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daec:	889b      	ldrh	r3, [r3, #4]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	88db      	ldrh	r3, [r3, #6]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	429a      	cmp	r2, r3
 800daf8:	f0c0 80e3 	bcc.w	800dcc2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800dafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafe:	88db      	ldrh	r3, [r3, #6]
 800db00:	b29a      	uxth	r2, r3
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	889b      	ldrh	r3, [r3, #4]
 800db06:	b29b      	uxth	r3, r3
 800db08:	429a      	cmp	r2, r3
 800db0a:	f200 80da 	bhi.w	800dcc2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800db0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800db14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db16:	88db      	ldrh	r3, [r3, #6]
 800db18:	b29a      	uxth	r2, r3
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	889b      	ldrh	r3, [r3, #4]
 800db1e:	b29b      	uxth	r3, r3
 800db20:	429a      	cmp	r2, r3
 800db22:	d037      	beq.n	800db94 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db24:	2300      	movs	r3, #0
 800db26:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800db28:	e034      	b.n	800db94 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800db2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2c:	88db      	ldrh	r3, [r3, #6]
 800db2e:	b29a      	uxth	r2, r3
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	889b      	ldrh	r3, [r3, #4]
 800db34:	b29b      	uxth	r3, r3
 800db36:	429a      	cmp	r2, r3
 800db38:	f200 80c5 	bhi.w	800dcc6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	605a      	str	r2, [r3, #4]
      break;
 800db42:	e027      	b.n	800db94 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	889b      	ldrh	r3, [r3, #4]
 800db48:	b29a      	uxth	r2, r3
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	889b      	ldrh	r3, [r3, #4]
 800db4e:	b29b      	uxth	r3, r3
 800db50:	429a      	cmp	r2, r3
 800db52:	f000 80ba 	beq.w	800dcca <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800db56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db58:	889b      	ldrh	r3, [r3, #4]
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	88db      	ldrh	r3, [r3, #6]
 800db60:	b29b      	uxth	r3, r3
 800db62:	429a      	cmp	r2, r3
 800db64:	f0c0 80b3 	bcc.w	800dcce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d009      	beq.n	800db82 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	88db      	ldrh	r3, [r3, #6]
 800db72:	b29a      	uxth	r2, r3
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	889b      	ldrh	r3, [r3, #4]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d001      	beq.n	800db82 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d19a      	bne.n	800dac8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800db92:	e000      	b.n	800db96 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800db94:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d12d      	bne.n	800dbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d01c      	beq.n	800dbdc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	889b      	ldrh	r3, [r3, #4]
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d906      	bls.n	800dbc0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800dbb2:	4b51      	ldr	r3, [pc, #324]	; (800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dbb4:	f240 12ab 	movw	r2, #427	; 0x1ab
 800dbb8:	4950      	ldr	r1, [pc, #320]	; (800dcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbba:	4851      	ldr	r0, [pc, #324]	; (800dd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dbbc:	f000 fc94 	bl	800e4e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	88db      	ldrh	r3, [r3, #6]
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbce:	889b      	ldrh	r3, [r3, #4]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d010      	beq.n	800dbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	623b      	str	r3, [r7, #32]
 800dbda:	e00d      	b.n	800dbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800dbe4:	4b44      	ldr	r3, [pc, #272]	; (800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dbe6:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800dbea:	4946      	ldr	r1, [pc, #280]	; (800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dbec:	4844      	ldr	r0, [pc, #272]	; (800dd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dbee:	f000 fc7b 	bl	800e4e8 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d105      	bne.n	800dc0a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	7f9b      	ldrb	r3, [r3, #30]
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d059      	beq.n	800dcbe <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800dc0a:	6a3b      	ldr	r3, [r7, #32]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d04f      	beq.n	800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d006      	beq.n	800dc26 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	889b      	ldrh	r3, [r3, #4]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d002      	beq.n	800dc2c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	623b      	str	r3, [r7, #32]
 800dc2a:	e041      	b.n	800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc36:	e012      	b.n	800dc5e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	88db      	ldrh	r3, [r3, #6]
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc46:	889b      	ldrh	r3, [r3, #4]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d002      	beq.n	800dc54 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	623b      	str	r3, [r7, #32]
            break;
 800dc52:	e007      	b.n	800dc64 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1e9      	bne.n	800dc38 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d022      	beq.n	800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800dc72:	4b21      	ldr	r3, [pc, #132]	; (800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dc74:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800dc78:	4923      	ldr	r1, [pc, #140]	; (800dd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dc7a:	4821      	ldr	r0, [pc, #132]	; (800dd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dc7c:	f000 fc34 	bl	800e4e8 <iprintf>
          LWIP_ASSERT("sanity check",
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d106      	bne.n	800dc9a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800dc8c:	4b1a      	ldr	r3, [pc, #104]	; (800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dc8e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800dc92:	491d      	ldr	r1, [pc, #116]	; (800dd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dc94:	481a      	ldr	r0, [pc, #104]	; (800dd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dc96:	f000 fc27 	bl	800e4e8 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d006      	beq.n	800dcb0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dca4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800dca8:	4918      	ldr	r1, [pc, #96]	; (800dd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dcaa:	4815      	ldr	r0, [pc, #84]	; (800dd00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dcac:	f000 fc1c 	bl	800e4e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	bf14      	ite	ne
 800dcb6:	2301      	movne	r3, #1
 800dcb8:	2300      	moveq	r3, #0
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	e018      	b.n	800dcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e016      	b.n	800dcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800dcc2:	bf00      	nop
 800dcc4:	e004      	b.n	800dcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800dcc6:	bf00      	nop
 800dcc8:	e002      	b.n	800dcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800dcca:	bf00      	nop
 800dccc:	e000      	b.n	800dcd0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800dcce:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800dcd0:	68b8      	ldr	r0, [r7, #8]
 800dcd2:	f7f7 f90f 	bl	8004ef4 <pbuf_clen>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	4b0d      	ldr	r3, [pc, #52]	; (800dd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	1a9b      	subs	r3, r3, r2
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	4b0b      	ldr	r3, [pc, #44]	; (800dd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dce4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800dce6:	68b8      	ldr	r0, [r7, #8]
 800dce8:	f7f7 f870 	bl	8004dcc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3730      	adds	r7, #48	; 0x30
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	08011274 	.word	0x08011274
 800dcfc:	08011350 	.word	0x08011350
 800dd00:	080112bc 	.word	0x080112bc
 800dd04:	08011370 	.word	0x08011370
 800dd08:	080113a8 	.word	0x080113a8
 800dd0c:	080113b8 	.word	0x080113b8
 800dd10:	20000214 	.word	0x20000214

0800dd14 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	; 0x38
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	f003 030f 	and.w	r3, r3, #15
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	2b14      	cmp	r3, #20
 800dd2e:	f040 8131 	bne.w	800df94 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	88db      	ldrh	r3, [r3, #6]
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7f5 ff3e 	bl	8003bba <lwip_htons>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	00db      	lsls	r3, r3, #3
 800dd48:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	885b      	ldrh	r3, [r3, #2]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f5 ff32 	bl	8003bba <lwip_htons>
 800dd56:	4603      	mov	r3, r0
 800dd58:	461a      	mov	r2, r3
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	f003 030f 	and.w	r3, r3, #15
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7f7 f8c0 	bl	8004ef4 <pbuf_clen>
 800dd74:	4603      	mov	r3, r0
 800dd76:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dd78:	4b8d      	ldr	r3, [pc, #564]	; (800dfb0 <ip4_reass+0x29c>)
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd80:	4413      	add	r3, r2
 800dd82:	2b0a      	cmp	r3, #10
 800dd84:	dd10      	ble.n	800dda8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dd86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd8c:	f7ff fd8e 	bl	800d8ac <ip_reass_remove_oldest_datagram>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	f000 8100 	beq.w	800df98 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dd98:	4b85      	ldr	r3, [pc, #532]	; (800dfb0 <ip4_reass+0x29c>)
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dda0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dda2:	2b0a      	cmp	r3, #10
 800dda4:	f300 80f8 	bgt.w	800df98 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dda8:	4b82      	ldr	r3, [pc, #520]	; (800dfb4 <ip4_reass+0x2a0>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	633b      	str	r3, [r7, #48]	; 0x30
 800ddae:	e015      	b.n	800dddc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	695a      	ldr	r2, [r3, #20]
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d10c      	bne.n	800ddd6 <ip4_reass+0xc2>
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	699a      	ldr	r2, [r3, #24]
 800ddc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d106      	bne.n	800ddd6 <ip4_reass+0xc2>
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	899a      	ldrh	r2, [r3, #12]
 800ddcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddce:	889b      	ldrh	r3, [r3, #4]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d006      	beq.n	800dde4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	633b      	str	r3, [r7, #48]	; 0x30
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e6      	bne.n	800ddb0 <ip4_reass+0x9c>
 800dde2:	e000      	b.n	800dde6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dde4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d109      	bne.n	800de00 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ddec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddf2:	f7ff fdbd 	bl	800d970 <ip_reass_enqueue_new_datagram>
 800ddf6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d11c      	bne.n	800de38 <ip4_reass+0x124>
      goto nullreturn;
 800ddfe:	e0ce      	b.n	800df9e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	88db      	ldrh	r3, [r3, #6]
 800de04:	b29b      	uxth	r3, r3
 800de06:	4618      	mov	r0, r3
 800de08:	f7f5 fed7 	bl	8003bba <lwip_htons>
 800de0c:	4603      	mov	r3, r0
 800de0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de12:	2b00      	cmp	r3, #0
 800de14:	d110      	bne.n	800de38 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de18:	89db      	ldrh	r3, [r3, #14]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7f5 fecd 	bl	8003bba <lwip_htons>
 800de20:	4603      	mov	r3, r0
 800de22:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de26:	2b00      	cmp	r3, #0
 800de28:	d006      	beq.n	800de38 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	3308      	adds	r3, #8
 800de2e:	2214      	movs	r2, #20
 800de30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de32:	4618      	mov	r0, r3
 800de34:	f000 fb45 	bl	800e4c2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	88db      	ldrh	r3, [r3, #6]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	f003 0320 	and.w	r3, r3, #32
 800de42:	2b00      	cmp	r3, #0
 800de44:	bf0c      	ite	eq
 800de46:	2301      	moveq	r3, #1
 800de48:	2300      	movne	r3, #0
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800de4e:	69fb      	ldr	r3, [r7, #28]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00e      	beq.n	800de72 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800de54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de58:	4413      	add	r3, r2
 800de5a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800de5c:	8b7a      	ldrh	r2, [r7, #26]
 800de5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de60:	429a      	cmp	r2, r3
 800de62:	f0c0 8099 	bcc.w	800df98 <ip4_reass+0x284>
 800de66:	8b7b      	ldrh	r3, [r7, #26]
 800de68:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800de6c:	4293      	cmp	r3, r2
 800de6e:	f200 8093 	bhi.w	800df98 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800de72:	69fa      	ldr	r2, [r7, #28]
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de78:	f7ff fde2 	bl	800da40 <ip_reass_chain_frag_into_datagram_and_validate>
 800de7c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de84:	f000 808a 	beq.w	800df9c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800de88:	4b49      	ldr	r3, [pc, #292]	; (800dfb0 <ip4_reass+0x29c>)
 800de8a:	881a      	ldrh	r2, [r3, #0]
 800de8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de8e:	4413      	add	r3, r2
 800de90:	b29a      	uxth	r2, r3
 800de92:	4b47      	ldr	r3, [pc, #284]	; (800dfb0 <ip4_reass+0x29c>)
 800de94:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d00d      	beq.n	800deb8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800de9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dea0:	4413      	add	r3, r2
 800dea2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea6:	8a7a      	ldrh	r2, [r7, #18]
 800dea8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	7f9b      	ldrb	r3, [r3, #30]
 800deae:	f043 0301 	orr.w	r3, r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d168      	bne.n	800df90 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	8b9b      	ldrh	r3, [r3, #28]
 800dec2:	3314      	adds	r3, #20
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	3308      	adds	r3, #8
 800dee0:	2214      	movs	r2, #20
 800dee2:	4619      	mov	r1, r3
 800dee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dee6:	f000 faec 	bl	800e4c2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	8b9b      	ldrh	r3, [r3, #28]
 800deee:	4618      	mov	r0, r3
 800def0:	f7f5 fe63 	bl	8003bba <lwip_htons>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	2200      	movs	r2, #0
 800df00:	719a      	strb	r2, [r3, #6]
 800df02:	2200      	movs	r2, #0
 800df04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	2200      	movs	r2, #0
 800df0a:	729a      	strb	r2, [r3, #10]
 800df0c:	2200      	movs	r2, #0
 800df0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800df16:	e00e      	b.n	800df36 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800df18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800df1e:	f06f 0113 	mvn.w	r1, #19
 800df22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df24:	f7f6 ff2e 	bl	8004d84 <pbuf_header>
      pbuf_cat(p, r);
 800df28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f7f7 f81c 	bl	8004f68 <pbuf_cat>
      r = iprh->next_pbuf;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800df36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1ed      	bne.n	800df18 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800df3c:	4b1d      	ldr	r3, [pc, #116]	; (800dfb4 <ip4_reass+0x2a0>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df42:	429a      	cmp	r2, r3
 800df44:	d102      	bne.n	800df4c <ip4_reass+0x238>
      ipr_prev = NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df4a:	e010      	b.n	800df6e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df4c:	4b19      	ldr	r3, [pc, #100]	; (800dfb4 <ip4_reass+0x2a0>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df52:	e007      	b.n	800df64 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d006      	beq.n	800df6c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d1f4      	bne.n	800df54 <ip4_reass+0x240>
 800df6a:	e000      	b.n	800df6e <ip4_reass+0x25a>
          break;
 800df6c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800df6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df72:	f7ff fd37 	bl	800d9e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7f6 ffbc 	bl	8004ef4 <pbuf_clen>
 800df7c:	4603      	mov	r3, r0
 800df7e:	461a      	mov	r2, r3
 800df80:	4b0b      	ldr	r3, [pc, #44]	; (800dfb0 <ip4_reass+0x29c>)
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	1a9b      	subs	r3, r3, r2
 800df86:	b29a      	uxth	r2, r3
 800df88:	4b09      	ldr	r3, [pc, #36]	; (800dfb0 <ip4_reass+0x29c>)
 800df8a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	e00a      	b.n	800dfa6 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800df90:	2300      	movs	r3, #0
 800df92:	e008      	b.n	800dfa6 <ip4_reass+0x292>
    goto nullreturn;
 800df94:	bf00      	nop
 800df96:	e002      	b.n	800df9e <ip4_reass+0x28a>

nullreturn:
 800df98:	bf00      	nop
 800df9a:	e000      	b.n	800df9e <ip4_reass+0x28a>
    goto nullreturn;
 800df9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7f6 ff14 	bl	8004dcc <pbuf_free>
  return NULL;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3738      	adds	r7, #56	; 0x38
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	20000214 	.word	0x20000214
 800dfb4:	20000210 	.word	0x20000210

0800dfb8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800dfbc:	2005      	movs	r0, #5
 800dfbe:	f7f6 f9ab 	bl	8004318 <memp_malloc>
 800dfc2:	4603      	mov	r3, r0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dfd6:	4b07      	ldr	r3, [pc, #28]	; (800dff4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dfd8:	f240 22ae 	movw	r2, #686	; 0x2ae
 800dfdc:	4906      	ldr	r1, [pc, #24]	; (800dff8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dfde:	4807      	ldr	r0, [pc, #28]	; (800dffc <ip_frag_free_pbuf_custom_ref+0x34>)
 800dfe0:	f000 fa82 	bl	800e4e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	2005      	movs	r0, #5
 800dfe8:	f7f6 f9e2 	bl	80043b0 <memp_free>
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	08011274 	.word	0x08011274
 800dff8:	080113dc 	.word	0x080113dc
 800dffc:	080112bc 	.word	0x080112bc

0800e000 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <ipfrag_free_pbuf_custom+0x20>
 800e012:	4b11      	ldr	r3, [pc, #68]	; (800e058 <ipfrag_free_pbuf_custom+0x58>)
 800e014:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800e018:	4910      	ldr	r1, [pc, #64]	; (800e05c <ipfrag_free_pbuf_custom+0x5c>)
 800e01a:	4811      	ldr	r0, [pc, #68]	; (800e060 <ipfrag_free_pbuf_custom+0x60>)
 800e01c:	f000 fa64 	bl	800e4e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	429a      	cmp	r2, r3
 800e026:	d006      	beq.n	800e036 <ipfrag_free_pbuf_custom+0x36>
 800e028:	4b0b      	ldr	r3, [pc, #44]	; (800e058 <ipfrag_free_pbuf_custom+0x58>)
 800e02a:	f240 22b9 	movw	r2, #697	; 0x2b9
 800e02e:	490d      	ldr	r1, [pc, #52]	; (800e064 <ipfrag_free_pbuf_custom+0x64>)
 800e030:	480b      	ldr	r0, [pc, #44]	; (800e060 <ipfrag_free_pbuf_custom+0x60>)
 800e032:	f000 fa59 	bl	800e4e8 <iprintf>
  if (pcr->original != NULL) {
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d004      	beq.n	800e048 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	695b      	ldr	r3, [r3, #20]
 800e042:	4618      	mov	r0, r3
 800e044:	f7f6 fec2 	bl	8004dcc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f7ff ffbd 	bl	800dfc8 <ip_frag_free_pbuf_custom_ref>
}
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	08011274 	.word	0x08011274
 800e05c:	080113e8 	.word	0x080113e8
 800e060:	080112bc 	.word	0x080112bc
 800e064:	080113f4 	.word	0x080113f4

0800e068 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b092      	sub	sp, #72	; 0x48
 800e06c:	af02      	add	r7, sp, #8
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e07c:	3b14      	subs	r3, #20
 800e07e:	2b00      	cmp	r3, #0
 800e080:	da00      	bge.n	800e084 <ip4_frag+0x1c>
 800e082:	3307      	adds	r3, #7
 800e084:	10db      	asrs	r3, r3, #3
 800e086:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e088:	2314      	movs	r3, #20
 800e08a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 030f 	and.w	r3, r3, #15
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	2b14      	cmp	r3, #20
 800e0a2:	d009      	beq.n	800e0b8 <ip4_frag+0x50>
 800e0a4:	4b79      	ldr	r3, [pc, #484]	; (800e28c <ip4_frag+0x224>)
 800e0a6:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e0aa:	4979      	ldr	r1, [pc, #484]	; (800e290 <ip4_frag+0x228>)
 800e0ac:	4879      	ldr	r0, [pc, #484]	; (800e294 <ip4_frag+0x22c>)
 800e0ae:	f000 fa1b 	bl	800e4e8 <iprintf>
 800e0b2:	f06f 0305 	mvn.w	r3, #5
 800e0b6:	e0e5      	b.n	800e284 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	88db      	ldrh	r3, [r3, #6]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7f5 fd7b 	bl	8003bba <lwip_htons>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800e0c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e0ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0ce:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e0d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e0d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d009      	beq.n	800e0ee <ip4_frag+0x86>
 800e0da:	4b6c      	ldr	r3, [pc, #432]	; (800e28c <ip4_frag+0x224>)
 800e0dc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e0e0:	496d      	ldr	r1, [pc, #436]	; (800e298 <ip4_frag+0x230>)
 800e0e2:	486c      	ldr	r0, [pc, #432]	; (800e294 <ip4_frag+0x22c>)
 800e0e4:	f000 fa00 	bl	800e4e8 <iprintf>
 800e0e8:	f06f 0305 	mvn.w	r3, #5
 800e0ec:	e0ca      	b.n	800e284 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	891b      	ldrh	r3, [r3, #8]
 800e0f2:	3b14      	subs	r3, #20
 800e0f4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800e0f6:	e0bc      	b.n	800e272 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800e0f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e0fa:	00da      	lsls	r2, r3, #3
 800e0fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e0fe:	4293      	cmp	r3, r2
 800e100:	bfa8      	it	ge
 800e102:	4613      	movge	r3, r2
 800e104:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e106:	2200      	movs	r2, #0
 800e108:	2114      	movs	r1, #20
 800e10a:	2002      	movs	r0, #2
 800e10c:	f7f6 faec 	bl	80046e8 <pbuf_alloc>
 800e110:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	2b00      	cmp	r3, #0
 800e116:	f000 80b2 	beq.w	800e27e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	895b      	ldrh	r3, [r3, #10]
 800e11e:	2b13      	cmp	r3, #19
 800e120:	d806      	bhi.n	800e130 <ip4_frag+0xc8>
 800e122:	4b5a      	ldr	r3, [pc, #360]	; (800e28c <ip4_frag+0x224>)
 800e124:	f240 3209 	movw	r2, #777	; 0x309
 800e128:	495c      	ldr	r1, [pc, #368]	; (800e29c <ip4_frag+0x234>)
 800e12a:	485a      	ldr	r0, [pc, #360]	; (800e294 <ip4_frag+0x22c>)
 800e12c:	f000 f9dc 	bl	800e4e8 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	2214      	movs	r2, #20
 800e136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e138:	4618      	mov	r0, r3
 800e13a:	f000 f9c2 	bl	800e4c2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800e144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e146:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800e148:	e04f      	b.n	800e1ea <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	895a      	ldrh	r2, [r3, #10]
 800e14e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e154:	8b7a      	ldrh	r2, [r7, #26]
 800e156:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e158:	4293      	cmp	r3, r2
 800e15a:	bf28      	it	cs
 800e15c:	4613      	movcs	r3, r2
 800e15e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e160:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <ip4_frag+0x10a>
        poff = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	60fb      	str	r3, [r7, #12]
        continue;
 800e170:	e03b      	b.n	800e1ea <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e172:	f7ff ff21 	bl	800dfb8 <ip_frag_alloc_pbuf_custom_ref>
 800e176:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d103      	bne.n	800e186 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800e17e:	6a38      	ldr	r0, [r7, #32]
 800e180:	f7f6 fe24 	bl	8004dcc <pbuf_free>
        goto memerr;
 800e184:	e07c      	b.n	800e280 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e186:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e18c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e18e:	4413      	add	r3, r2
 800e190:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e192:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e194:	9201      	str	r2, [sp, #4]
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	4603      	mov	r3, r0
 800e19a:	2202      	movs	r2, #2
 800e19c:	2004      	movs	r0, #4
 800e19e:	f7f6 fc37 	bl	8004a10 <pbuf_alloced_custom>
 800e1a2:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d106      	bne.n	800e1b8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e1aa:	6978      	ldr	r0, [r7, #20]
 800e1ac:	f7ff ff0c 	bl	800dfc8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e1b0:	6a38      	ldr	r0, [r7, #32]
 800e1b2:	f7f6 fe0b 	bl	8004dcc <pbuf_free>
        goto memerr;
 800e1b6:	e063      	b.n	800e280 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f7f6 feb3 	bl	8004f24 <pbuf_ref>
      pcr->original = p;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	4a36      	ldr	r2, [pc, #216]	; (800e2a0 <ip4_frag+0x238>)
 800e1c8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e1ca:	6939      	ldr	r1, [r7, #16]
 800e1cc:	6a38      	ldr	r0, [r7, #32]
 800e1ce:	f7f6 fecb 	bl	8004f68 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800e1d2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800e1d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800e1da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d004      	beq.n	800e1ea <ip4_frag+0x182>
        poff = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e1ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d1ac      	bne.n	800e14a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800e1f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e1f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e1f4:	4413      	add	r3, r2
 800e1f6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e1f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1fe:	3b14      	subs	r3, #20
 800e200:	429a      	cmp	r2, r3
 800e202:	bfd4      	ite	le
 800e204:	2301      	movle	r3, #1
 800e206:	2300      	movgt	r3, #0
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e20c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e20e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e212:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d103      	bne.n	800e222 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800e21a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e21c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e220:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e222:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e224:	4618      	mov	r0, r3
 800e226:	f7f5 fcc8 	bl	8003bba <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	461a      	mov	r2, r3
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800e232:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e234:	3314      	adds	r3, #20
 800e236:	b29b      	uxth	r3, r3
 800e238:	4618      	mov	r0, r3
 800e23a:	f7f5 fcbe 	bl	8003bba <lwip_htons>
 800e23e:	4603      	mov	r3, r0
 800e240:	461a      	mov	r2, r3
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e248:	2200      	movs	r2, #0
 800e24a:	729a      	strb	r2, [r3, #10]
 800e24c:	2200      	movs	r2, #0
 800e24e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	695b      	ldr	r3, [r3, #20]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	6a39      	ldr	r1, [r7, #32]
 800e258:	68b8      	ldr	r0, [r7, #8]
 800e25a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e25c:	6a38      	ldr	r0, [r7, #32]
 800e25e:	f7f6 fdb5 	bl	8004dcc <pbuf_free>
    left -= fragsize;
 800e262:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e266:	1ad3      	subs	r3, r2, r3
 800e268:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800e26a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e26c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e26e:	4413      	add	r3, r2
 800e270:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800e272:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e274:	2b00      	cmp	r3, #0
 800e276:	f47f af3f 	bne.w	800e0f8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e002      	b.n	800e284 <ip4_frag+0x21c>
      goto memerr;
 800e27e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e284:	4618      	mov	r0, r3
 800e286:	3740      	adds	r7, #64	; 0x40
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	08011274 	.word	0x08011274
 800e290:	08011400 	.word	0x08011400
 800e294:	080112bc 	.word	0x080112bc
 800e298:	08011428 	.word	0x08011428
 800e29c:	08011444 	.word	0x08011444
 800e2a0:	0800e001 	.word	0x0800e001

0800e2a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b086      	sub	sp, #24
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800e2ae:	230e      	movs	r3, #14
 800e2b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	895b      	ldrh	r3, [r3, #10]
 800e2b6:	2b0e      	cmp	r3, #14
 800e2b8:	d977      	bls.n	800e3aa <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	7b1a      	ldrb	r2, [r3, #12]
 800e2c4:	7b5b      	ldrb	r3, [r3, #13]
 800e2c6:	021b      	lsls	r3, r3, #8
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d023      	beq.n	800e320 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d10f      	bne.n	800e300 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	785b      	ldrb	r3, [r3, #1]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d11b      	bne.n	800e320 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e2ec:	2b5e      	cmp	r3, #94	; 0x5e
 800e2ee:	d117      	bne.n	800e320 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	7b5b      	ldrb	r3, [r3, #13]
 800e2f4:	f043 0310 	orr.w	r3, r3, #16
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	735a      	strb	r2, [r3, #13]
 800e2fe:	e00f      	b.n	800e320 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	2206      	movs	r2, #6
 800e304:	4930      	ldr	r1, [pc, #192]	; (800e3c8 <ethernet_input+0x124>)
 800e306:	4618      	mov	r0, r3
 800e308:	f000 f8cc 	bl	800e4a4 <memcmp>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	7b5b      	ldrb	r3, [r3, #13]
 800e316:	f043 0308 	orr.w	r3, r3, #8
 800e31a:	b2da      	uxtb	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e320:	89fb      	ldrh	r3, [r7, #14]
 800e322:	2b08      	cmp	r3, #8
 800e324:	d003      	beq.n	800e32e <ethernet_input+0x8a>
 800e326:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e32a:	d01e      	beq.n	800e36a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e32c:	e044      	b.n	800e3b8 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e334:	f003 0308 	and.w	r3, r3, #8
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d038      	beq.n	800e3ae <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	895b      	ldrh	r3, [r3, #10]
 800e340:	461a      	mov	r2, r3
 800e342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e346:	429a      	cmp	r2, r3
 800e348:	db33      	blt.n	800e3b2 <ethernet_input+0x10e>
 800e34a:	8afb      	ldrh	r3, [r7, #22]
 800e34c:	425b      	negs	r3, r3
 800e34e:	b29b      	uxth	r3, r3
 800e350:	b21b      	sxth	r3, r3
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7f6 fd15 	bl	8004d84 <pbuf_header>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d128      	bne.n	800e3b2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7fe ff62 	bl	800d22c <ip4_input>
      break;
 800e368:	e01d      	b.n	800e3a6 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e370:	f003 0308 	and.w	r3, r3, #8
 800e374:	2b00      	cmp	r3, #0
 800e376:	d01e      	beq.n	800e3b6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	895b      	ldrh	r3, [r3, #10]
 800e37c:	461a      	mov	r2, r3
 800e37e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e382:	429a      	cmp	r2, r3
 800e384:	db15      	blt.n	800e3b2 <ethernet_input+0x10e>
 800e386:	8afb      	ldrh	r3, [r7, #22]
 800e388:	425b      	negs	r3, r3
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	b21b      	sxth	r3, r3
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7f6 fcf7 	bl	8004d84 <pbuf_header>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10a      	bne.n	800e3b2 <ethernet_input+0x10e>
        etharp_input(p, netif);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7fe f92c 	bl	800c5fc <etharp_input>
      break;
 800e3a4:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	e00a      	b.n	800e3c0 <ethernet_input+0x11c>
    goto free_and_return;
 800e3aa:	bf00      	nop
 800e3ac:	e004      	b.n	800e3b8 <ethernet_input+0x114>
        goto free_and_return;
 800e3ae:	bf00      	nop
 800e3b0:	e002      	b.n	800e3b8 <ethernet_input+0x114>

free_and_return:
 800e3b2:	bf00      	nop
 800e3b4:	e000      	b.n	800e3b8 <ethernet_input+0x114>
        goto free_and_return;
 800e3b6:	bf00      	nop
  pbuf_free(p);
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7f6 fd07 	bl	8004dcc <pbuf_free>
  return ERR_OK;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	080115f0 	.word	0x080115f0

0800e3cc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
 800e3d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3da:	8c3b      	ldrh	r3, [r7, #32]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f5 fbec 	bl	8003bba <lwip_htons>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3e6:	210e      	movs	r1, #14
 800e3e8:	68b8      	ldr	r0, [r7, #8]
 800e3ea:	f7f6 fccb 	bl	8004d84 <pbuf_header>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d125      	bne.n	800e440 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	8afa      	ldrh	r2, [r7, #22]
 800e3fe:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	2206      	movs	r2, #6
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	4618      	mov	r0, r3
 800e408:	f000 f85b 	bl	800e4c2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3306      	adds	r3, #6
 800e410:	2206      	movs	r2, #6
 800e412:	6879      	ldr	r1, [r7, #4]
 800e414:	4618      	mov	r0, r3
 800e416:	f000 f854 	bl	800e4c2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e420:	2b06      	cmp	r3, #6
 800e422:	d006      	beq.n	800e432 <ethernet_output+0x66>
 800e424:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <ethernet_output+0x84>)
 800e426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e42a:	490a      	ldr	r1, [pc, #40]	; (800e454 <ethernet_output+0x88>)
 800e42c:	480a      	ldr	r0, [pc, #40]	; (800e458 <ethernet_output+0x8c>)
 800e42e:	f000 f85b 	bl	800e4e8 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	68b9      	ldr	r1, [r7, #8]
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	4798      	blx	r3
 800e43c:	4603      	mov	r3, r0
 800e43e:	e002      	b.n	800e446 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e440:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e442:	f06f 0301 	mvn.w	r3, #1
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	08011464 	.word	0x08011464
 800e454:	0801149c 	.word	0x0801149c
 800e458:	080114d0 	.word	0x080114d0

0800e45c <__libc_init_array>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	4e0d      	ldr	r6, [pc, #52]	; (800e494 <__libc_init_array+0x38>)
 800e460:	4c0d      	ldr	r4, [pc, #52]	; (800e498 <__libc_init_array+0x3c>)
 800e462:	1ba4      	subs	r4, r4, r6
 800e464:	10a4      	asrs	r4, r4, #2
 800e466:	2500      	movs	r5, #0
 800e468:	42a5      	cmp	r5, r4
 800e46a:	d109      	bne.n	800e480 <__libc_init_array+0x24>
 800e46c:	4e0b      	ldr	r6, [pc, #44]	; (800e49c <__libc_init_array+0x40>)
 800e46e:	4c0c      	ldr	r4, [pc, #48]	; (800e4a0 <__libc_init_array+0x44>)
 800e470:	f000 ff5a 	bl	800f328 <_init>
 800e474:	1ba4      	subs	r4, r4, r6
 800e476:	10a4      	asrs	r4, r4, #2
 800e478:	2500      	movs	r5, #0
 800e47a:	42a5      	cmp	r5, r4
 800e47c:	d105      	bne.n	800e48a <__libc_init_array+0x2e>
 800e47e:	bd70      	pop	{r4, r5, r6, pc}
 800e480:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e484:	4798      	blx	r3
 800e486:	3501      	adds	r5, #1
 800e488:	e7ee      	b.n	800e468 <__libc_init_array+0xc>
 800e48a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e48e:	4798      	blx	r3
 800e490:	3501      	adds	r5, #1
 800e492:	e7f2      	b.n	800e47a <__libc_init_array+0x1e>
 800e494:	080116a0 	.word	0x080116a0
 800e498:	080116a0 	.word	0x080116a0
 800e49c:	080116a0 	.word	0x080116a0
 800e4a0:	080116a4 	.word	0x080116a4

0800e4a4 <memcmp>:
 800e4a4:	b530      	push	{r4, r5, lr}
 800e4a6:	2400      	movs	r4, #0
 800e4a8:	42a2      	cmp	r2, r4
 800e4aa:	d101      	bne.n	800e4b0 <memcmp+0xc>
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	e007      	b.n	800e4c0 <memcmp+0x1c>
 800e4b0:	5d03      	ldrb	r3, [r0, r4]
 800e4b2:	3401      	adds	r4, #1
 800e4b4:	190d      	adds	r5, r1, r4
 800e4b6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e4ba:	42ab      	cmp	r3, r5
 800e4bc:	d0f4      	beq.n	800e4a8 <memcmp+0x4>
 800e4be:	1b58      	subs	r0, r3, r5
 800e4c0:	bd30      	pop	{r4, r5, pc}

0800e4c2 <memcpy>:
 800e4c2:	b510      	push	{r4, lr}
 800e4c4:	1e43      	subs	r3, r0, #1
 800e4c6:	440a      	add	r2, r1
 800e4c8:	4291      	cmp	r1, r2
 800e4ca:	d100      	bne.n	800e4ce <memcpy+0xc>
 800e4cc:	bd10      	pop	{r4, pc}
 800e4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4d6:	e7f7      	b.n	800e4c8 <memcpy+0x6>

0800e4d8 <memset>:
 800e4d8:	4402      	add	r2, r0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d100      	bne.n	800e4e2 <memset+0xa>
 800e4e0:	4770      	bx	lr
 800e4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e4e6:	e7f9      	b.n	800e4dc <memset+0x4>

0800e4e8 <iprintf>:
 800e4e8:	b40f      	push	{r0, r1, r2, r3}
 800e4ea:	4b0a      	ldr	r3, [pc, #40]	; (800e514 <iprintf+0x2c>)
 800e4ec:	b513      	push	{r0, r1, r4, lr}
 800e4ee:	681c      	ldr	r4, [r3, #0]
 800e4f0:	b124      	cbz	r4, 800e4fc <iprintf+0x14>
 800e4f2:	69a3      	ldr	r3, [r4, #24]
 800e4f4:	b913      	cbnz	r3, 800e4fc <iprintf+0x14>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f000 f882 	bl	800e600 <__sinit>
 800e4fc:	ab05      	add	r3, sp, #20
 800e4fe:	9a04      	ldr	r2, [sp, #16]
 800e500:	68a1      	ldr	r1, [r4, #8]
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	4620      	mov	r0, r4
 800e506:	f000 f9df 	bl	800e8c8 <_vfiprintf_r>
 800e50a:	b002      	add	sp, #8
 800e50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e510:	b004      	add	sp, #16
 800e512:	4770      	bx	lr
 800e514:	20000018 	.word	0x20000018

0800e518 <rand>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4b13      	ldr	r3, [pc, #76]	; (800e568 <rand+0x50>)
 800e51c:	681c      	ldr	r4, [r3, #0]
 800e51e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e520:	b97b      	cbnz	r3, 800e542 <rand+0x2a>
 800e522:	2018      	movs	r0, #24
 800e524:	f000 f8f6 	bl	800e714 <malloc>
 800e528:	4a10      	ldr	r2, [pc, #64]	; (800e56c <rand+0x54>)
 800e52a:	4b11      	ldr	r3, [pc, #68]	; (800e570 <rand+0x58>)
 800e52c:	63a0      	str	r0, [r4, #56]	; 0x38
 800e52e:	e9c0 2300 	strd	r2, r3, [r0]
 800e532:	4b10      	ldr	r3, [pc, #64]	; (800e574 <rand+0x5c>)
 800e534:	6083      	str	r3, [r0, #8]
 800e536:	230b      	movs	r3, #11
 800e538:	8183      	strh	r3, [r0, #12]
 800e53a:	2201      	movs	r2, #1
 800e53c:	2300      	movs	r3, #0
 800e53e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e542:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e544:	480c      	ldr	r0, [pc, #48]	; (800e578 <rand+0x60>)
 800e546:	690a      	ldr	r2, [r1, #16]
 800e548:	694b      	ldr	r3, [r1, #20]
 800e54a:	4c0c      	ldr	r4, [pc, #48]	; (800e57c <rand+0x64>)
 800e54c:	4350      	muls	r0, r2
 800e54e:	fb04 0003 	mla	r0, r4, r3, r0
 800e552:	fba2 2304 	umull	r2, r3, r2, r4
 800e556:	4403      	add	r3, r0
 800e558:	1c54      	adds	r4, r2, #1
 800e55a:	f143 0500 	adc.w	r5, r3, #0
 800e55e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e562:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e566:	bd38      	pop	{r3, r4, r5, pc}
 800e568:	20000018 	.word	0x20000018
 800e56c:	abcd330e 	.word	0xabcd330e
 800e570:	e66d1234 	.word	0xe66d1234
 800e574:	0005deec 	.word	0x0005deec
 800e578:	5851f42d 	.word	0x5851f42d
 800e57c:	4c957f2d 	.word	0x4c957f2d

0800e580 <std>:
 800e580:	2300      	movs	r3, #0
 800e582:	b510      	push	{r4, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	e9c0 3300 	strd	r3, r3, [r0]
 800e58a:	6083      	str	r3, [r0, #8]
 800e58c:	8181      	strh	r1, [r0, #12]
 800e58e:	6643      	str	r3, [r0, #100]	; 0x64
 800e590:	81c2      	strh	r2, [r0, #14]
 800e592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e596:	6183      	str	r3, [r0, #24]
 800e598:	4619      	mov	r1, r3
 800e59a:	2208      	movs	r2, #8
 800e59c:	305c      	adds	r0, #92	; 0x5c
 800e59e:	f7ff ff9b 	bl	800e4d8 <memset>
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x38>)
 800e5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e5a6:	4b05      	ldr	r3, [pc, #20]	; (800e5bc <std+0x3c>)
 800e5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <std+0x40>)
 800e5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ae:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <std+0x44>)
 800e5b0:	6224      	str	r4, [r4, #32]
 800e5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b4:	bd10      	pop	{r4, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0800ee25 	.word	0x0800ee25
 800e5bc:	0800ee47 	.word	0x0800ee47
 800e5c0:	0800ee7f 	.word	0x0800ee7f
 800e5c4:	0800eea3 	.word	0x0800eea3

0800e5c8 <_cleanup_r>:
 800e5c8:	4901      	ldr	r1, [pc, #4]	; (800e5d0 <_cleanup_r+0x8>)
 800e5ca:	f000 b885 	b.w	800e6d8 <_fwalk_reent>
 800e5ce:	bf00      	nop
 800e5d0:	0800f17d 	.word	0x0800f17d

0800e5d4 <__sfmoreglue>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	1e4a      	subs	r2, r1, #1
 800e5d8:	2568      	movs	r5, #104	; 0x68
 800e5da:	4355      	muls	r5, r2
 800e5dc:	460e      	mov	r6, r1
 800e5de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5e2:	f000 f8ed 	bl	800e7c0 <_malloc_r>
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	b140      	cbz	r0, 800e5fc <__sfmoreglue+0x28>
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	e9c0 1600 	strd	r1, r6, [r0]
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	60a0      	str	r0, [r4, #8]
 800e5f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f8:	f7ff ff6e 	bl	800e4d8 <memset>
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}

0800e600 <__sinit>:
 800e600:	6983      	ldr	r3, [r0, #24]
 800e602:	b510      	push	{r4, lr}
 800e604:	4604      	mov	r4, r0
 800e606:	bb33      	cbnz	r3, 800e656 <__sinit+0x56>
 800e608:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e60c:	6503      	str	r3, [r0, #80]	; 0x50
 800e60e:	4b12      	ldr	r3, [pc, #72]	; (800e658 <__sinit+0x58>)
 800e610:	4a12      	ldr	r2, [pc, #72]	; (800e65c <__sinit+0x5c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6282      	str	r2, [r0, #40]	; 0x28
 800e616:	4298      	cmp	r0, r3
 800e618:	bf04      	itt	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	6183      	streq	r3, [r0, #24]
 800e61e:	f000 f81f 	bl	800e660 <__sfp>
 800e622:	6060      	str	r0, [r4, #4]
 800e624:	4620      	mov	r0, r4
 800e626:	f000 f81b 	bl	800e660 <__sfp>
 800e62a:	60a0      	str	r0, [r4, #8]
 800e62c:	4620      	mov	r0, r4
 800e62e:	f000 f817 	bl	800e660 <__sfp>
 800e632:	2200      	movs	r2, #0
 800e634:	60e0      	str	r0, [r4, #12]
 800e636:	2104      	movs	r1, #4
 800e638:	6860      	ldr	r0, [r4, #4]
 800e63a:	f7ff ffa1 	bl	800e580 <std>
 800e63e:	2201      	movs	r2, #1
 800e640:	2109      	movs	r1, #9
 800e642:	68a0      	ldr	r0, [r4, #8]
 800e644:	f7ff ff9c 	bl	800e580 <std>
 800e648:	2202      	movs	r2, #2
 800e64a:	2112      	movs	r1, #18
 800e64c:	68e0      	ldr	r0, [r4, #12]
 800e64e:	f7ff ff97 	bl	800e580 <std>
 800e652:	2301      	movs	r3, #1
 800e654:	61a3      	str	r3, [r4, #24]
 800e656:	bd10      	pop	{r4, pc}
 800e658:	08011600 	.word	0x08011600
 800e65c:	0800e5c9 	.word	0x0800e5c9

0800e660 <__sfp>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	4b1b      	ldr	r3, [pc, #108]	; (800e6d0 <__sfp+0x70>)
 800e664:	681e      	ldr	r6, [r3, #0]
 800e666:	69b3      	ldr	r3, [r6, #24]
 800e668:	4607      	mov	r7, r0
 800e66a:	b913      	cbnz	r3, 800e672 <__sfp+0x12>
 800e66c:	4630      	mov	r0, r6
 800e66e:	f7ff ffc7 	bl	800e600 <__sinit>
 800e672:	3648      	adds	r6, #72	; 0x48
 800e674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e678:	3b01      	subs	r3, #1
 800e67a:	d503      	bpl.n	800e684 <__sfp+0x24>
 800e67c:	6833      	ldr	r3, [r6, #0]
 800e67e:	b133      	cbz	r3, 800e68e <__sfp+0x2e>
 800e680:	6836      	ldr	r6, [r6, #0]
 800e682:	e7f7      	b.n	800e674 <__sfp+0x14>
 800e684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e688:	b16d      	cbz	r5, 800e6a6 <__sfp+0x46>
 800e68a:	3468      	adds	r4, #104	; 0x68
 800e68c:	e7f4      	b.n	800e678 <__sfp+0x18>
 800e68e:	2104      	movs	r1, #4
 800e690:	4638      	mov	r0, r7
 800e692:	f7ff ff9f 	bl	800e5d4 <__sfmoreglue>
 800e696:	6030      	str	r0, [r6, #0]
 800e698:	2800      	cmp	r0, #0
 800e69a:	d1f1      	bne.n	800e680 <__sfp+0x20>
 800e69c:	230c      	movs	r3, #12
 800e69e:	603b      	str	r3, [r7, #0]
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a6:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <__sfp+0x74>)
 800e6a8:	6665      	str	r5, [r4, #100]	; 0x64
 800e6aa:	e9c4 5500 	strd	r5, r5, [r4]
 800e6ae:	60a5      	str	r5, [r4, #8]
 800e6b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6c0:	f7ff ff0a 	bl	800e4d8 <memset>
 800e6c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6cc:	e7e9      	b.n	800e6a2 <__sfp+0x42>
 800e6ce:	bf00      	nop
 800e6d0:	08011600 	.word	0x08011600
 800e6d4:	ffff0001 	.word	0xffff0001

0800e6d8 <_fwalk_reent>:
 800e6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	b914      	cbnz	r4, 800e6ee <_fwalk_reent+0x16>
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e6f2:	3f01      	subs	r7, #1
 800e6f4:	d501      	bpl.n	800e6fa <_fwalk_reent+0x22>
 800e6f6:	6824      	ldr	r4, [r4, #0]
 800e6f8:	e7f5      	b.n	800e6e6 <_fwalk_reent+0xe>
 800e6fa:	89ab      	ldrh	r3, [r5, #12]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d907      	bls.n	800e710 <_fwalk_reent+0x38>
 800e700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e704:	3301      	adds	r3, #1
 800e706:	d003      	beq.n	800e710 <_fwalk_reent+0x38>
 800e708:	4629      	mov	r1, r5
 800e70a:	4640      	mov	r0, r8
 800e70c:	47c8      	blx	r9
 800e70e:	4306      	orrs	r6, r0
 800e710:	3568      	adds	r5, #104	; 0x68
 800e712:	e7ee      	b.n	800e6f2 <_fwalk_reent+0x1a>

0800e714 <malloc>:
 800e714:	4b02      	ldr	r3, [pc, #8]	; (800e720 <malloc+0xc>)
 800e716:	4601      	mov	r1, r0
 800e718:	6818      	ldr	r0, [r3, #0]
 800e71a:	f000 b851 	b.w	800e7c0 <_malloc_r>
 800e71e:	bf00      	nop
 800e720:	20000018 	.word	0x20000018

0800e724 <_free_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4605      	mov	r5, r0
 800e728:	2900      	cmp	r1, #0
 800e72a:	d045      	beq.n	800e7b8 <_free_r+0x94>
 800e72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e730:	1f0c      	subs	r4, r1, #4
 800e732:	2b00      	cmp	r3, #0
 800e734:	bfb8      	it	lt
 800e736:	18e4      	addlt	r4, r4, r3
 800e738:	f000 fdc0 	bl	800f2bc <__malloc_lock>
 800e73c:	4a1f      	ldr	r2, [pc, #124]	; (800e7bc <_free_r+0x98>)
 800e73e:	6813      	ldr	r3, [r2, #0]
 800e740:	4610      	mov	r0, r2
 800e742:	b933      	cbnz	r3, 800e752 <_free_r+0x2e>
 800e744:	6063      	str	r3, [r4, #4]
 800e746:	6014      	str	r4, [r2, #0]
 800e748:	4628      	mov	r0, r5
 800e74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e74e:	f000 bdb6 	b.w	800f2be <__malloc_unlock>
 800e752:	42a3      	cmp	r3, r4
 800e754:	d90c      	bls.n	800e770 <_free_r+0x4c>
 800e756:	6821      	ldr	r1, [r4, #0]
 800e758:	1862      	adds	r2, r4, r1
 800e75a:	4293      	cmp	r3, r2
 800e75c:	bf04      	itt	eq
 800e75e:	681a      	ldreq	r2, [r3, #0]
 800e760:	685b      	ldreq	r3, [r3, #4]
 800e762:	6063      	str	r3, [r4, #4]
 800e764:	bf04      	itt	eq
 800e766:	1852      	addeq	r2, r2, r1
 800e768:	6022      	streq	r2, [r4, #0]
 800e76a:	6004      	str	r4, [r0, #0]
 800e76c:	e7ec      	b.n	800e748 <_free_r+0x24>
 800e76e:	4613      	mov	r3, r2
 800e770:	685a      	ldr	r2, [r3, #4]
 800e772:	b10a      	cbz	r2, 800e778 <_free_r+0x54>
 800e774:	42a2      	cmp	r2, r4
 800e776:	d9fa      	bls.n	800e76e <_free_r+0x4a>
 800e778:	6819      	ldr	r1, [r3, #0]
 800e77a:	1858      	adds	r0, r3, r1
 800e77c:	42a0      	cmp	r0, r4
 800e77e:	d10b      	bne.n	800e798 <_free_r+0x74>
 800e780:	6820      	ldr	r0, [r4, #0]
 800e782:	4401      	add	r1, r0
 800e784:	1858      	adds	r0, r3, r1
 800e786:	4282      	cmp	r2, r0
 800e788:	6019      	str	r1, [r3, #0]
 800e78a:	d1dd      	bne.n	800e748 <_free_r+0x24>
 800e78c:	6810      	ldr	r0, [r2, #0]
 800e78e:	6852      	ldr	r2, [r2, #4]
 800e790:	605a      	str	r2, [r3, #4]
 800e792:	4401      	add	r1, r0
 800e794:	6019      	str	r1, [r3, #0]
 800e796:	e7d7      	b.n	800e748 <_free_r+0x24>
 800e798:	d902      	bls.n	800e7a0 <_free_r+0x7c>
 800e79a:	230c      	movs	r3, #12
 800e79c:	602b      	str	r3, [r5, #0]
 800e79e:	e7d3      	b.n	800e748 <_free_r+0x24>
 800e7a0:	6820      	ldr	r0, [r4, #0]
 800e7a2:	1821      	adds	r1, r4, r0
 800e7a4:	428a      	cmp	r2, r1
 800e7a6:	bf04      	itt	eq
 800e7a8:	6811      	ldreq	r1, [r2, #0]
 800e7aa:	6852      	ldreq	r2, [r2, #4]
 800e7ac:	6062      	str	r2, [r4, #4]
 800e7ae:	bf04      	itt	eq
 800e7b0:	1809      	addeq	r1, r1, r0
 800e7b2:	6021      	streq	r1, [r4, #0]
 800e7b4:	605c      	str	r4, [r3, #4]
 800e7b6:	e7c7      	b.n	800e748 <_free_r+0x24>
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20000218 	.word	0x20000218

0800e7c0 <_malloc_r>:
 800e7c0:	b570      	push	{r4, r5, r6, lr}
 800e7c2:	1ccd      	adds	r5, r1, #3
 800e7c4:	f025 0503 	bic.w	r5, r5, #3
 800e7c8:	3508      	adds	r5, #8
 800e7ca:	2d0c      	cmp	r5, #12
 800e7cc:	bf38      	it	cc
 800e7ce:	250c      	movcc	r5, #12
 800e7d0:	2d00      	cmp	r5, #0
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	db01      	blt.n	800e7da <_malloc_r+0x1a>
 800e7d6:	42a9      	cmp	r1, r5
 800e7d8:	d903      	bls.n	800e7e2 <_malloc_r+0x22>
 800e7da:	230c      	movs	r3, #12
 800e7dc:	6033      	str	r3, [r6, #0]
 800e7de:	2000      	movs	r0, #0
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
 800e7e2:	f000 fd6b 	bl	800f2bc <__malloc_lock>
 800e7e6:	4a21      	ldr	r2, [pc, #132]	; (800e86c <_malloc_r+0xac>)
 800e7e8:	6814      	ldr	r4, [r2, #0]
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	b991      	cbnz	r1, 800e814 <_malloc_r+0x54>
 800e7ee:	4c20      	ldr	r4, [pc, #128]	; (800e870 <_malloc_r+0xb0>)
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	b91b      	cbnz	r3, 800e7fc <_malloc_r+0x3c>
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f000 fb05 	bl	800ee04 <_sbrk_r>
 800e7fa:	6020      	str	r0, [r4, #0]
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	4630      	mov	r0, r6
 800e800:	f000 fb00 	bl	800ee04 <_sbrk_r>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d124      	bne.n	800e852 <_malloc_r+0x92>
 800e808:	230c      	movs	r3, #12
 800e80a:	6033      	str	r3, [r6, #0]
 800e80c:	4630      	mov	r0, r6
 800e80e:	f000 fd56 	bl	800f2be <__malloc_unlock>
 800e812:	e7e4      	b.n	800e7de <_malloc_r+0x1e>
 800e814:	680b      	ldr	r3, [r1, #0]
 800e816:	1b5b      	subs	r3, r3, r5
 800e818:	d418      	bmi.n	800e84c <_malloc_r+0x8c>
 800e81a:	2b0b      	cmp	r3, #11
 800e81c:	d90f      	bls.n	800e83e <_malloc_r+0x7e>
 800e81e:	600b      	str	r3, [r1, #0]
 800e820:	50cd      	str	r5, [r1, r3]
 800e822:	18cc      	adds	r4, r1, r3
 800e824:	4630      	mov	r0, r6
 800e826:	f000 fd4a 	bl	800f2be <__malloc_unlock>
 800e82a:	f104 000b 	add.w	r0, r4, #11
 800e82e:	1d23      	adds	r3, r4, #4
 800e830:	f020 0007 	bic.w	r0, r0, #7
 800e834:	1ac3      	subs	r3, r0, r3
 800e836:	d0d3      	beq.n	800e7e0 <_malloc_r+0x20>
 800e838:	425a      	negs	r2, r3
 800e83a:	50e2      	str	r2, [r4, r3]
 800e83c:	e7d0      	b.n	800e7e0 <_malloc_r+0x20>
 800e83e:	428c      	cmp	r4, r1
 800e840:	684b      	ldr	r3, [r1, #4]
 800e842:	bf16      	itet	ne
 800e844:	6063      	strne	r3, [r4, #4]
 800e846:	6013      	streq	r3, [r2, #0]
 800e848:	460c      	movne	r4, r1
 800e84a:	e7eb      	b.n	800e824 <_malloc_r+0x64>
 800e84c:	460c      	mov	r4, r1
 800e84e:	6849      	ldr	r1, [r1, #4]
 800e850:	e7cc      	b.n	800e7ec <_malloc_r+0x2c>
 800e852:	1cc4      	adds	r4, r0, #3
 800e854:	f024 0403 	bic.w	r4, r4, #3
 800e858:	42a0      	cmp	r0, r4
 800e85a:	d005      	beq.n	800e868 <_malloc_r+0xa8>
 800e85c:	1a21      	subs	r1, r4, r0
 800e85e:	4630      	mov	r0, r6
 800e860:	f000 fad0 	bl	800ee04 <_sbrk_r>
 800e864:	3001      	adds	r0, #1
 800e866:	d0cf      	beq.n	800e808 <_malloc_r+0x48>
 800e868:	6025      	str	r5, [r4, #0]
 800e86a:	e7db      	b.n	800e824 <_malloc_r+0x64>
 800e86c:	20000218 	.word	0x20000218
 800e870:	2000021c 	.word	0x2000021c

0800e874 <__sfputc_r>:
 800e874:	6893      	ldr	r3, [r2, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	b410      	push	{r4}
 800e87c:	6093      	str	r3, [r2, #8]
 800e87e:	da08      	bge.n	800e892 <__sfputc_r+0x1e>
 800e880:	6994      	ldr	r4, [r2, #24]
 800e882:	42a3      	cmp	r3, r4
 800e884:	db01      	blt.n	800e88a <__sfputc_r+0x16>
 800e886:	290a      	cmp	r1, #10
 800e888:	d103      	bne.n	800e892 <__sfputc_r+0x1e>
 800e88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88e:	f000 bb0d 	b.w	800eeac <__swbuf_r>
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	7019      	strb	r1, [r3, #0]
 800e89a:	4608      	mov	r0, r1
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <__sfputs_r>:
 800e8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	18d5      	adds	r5, r2, r3
 800e8ac:	42ac      	cmp	r4, r5
 800e8ae:	d101      	bne.n	800e8b4 <__sfputs_r+0x12>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e007      	b.n	800e8c4 <__sfputs_r+0x22>
 800e8b4:	463a      	mov	r2, r7
 800e8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffda 	bl	800e874 <__sfputc_r>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d1f3      	bne.n	800e8ac <__sfputs_r+0xa>
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8c8 <_vfiprintf_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	b09d      	sub	sp, #116	; 0x74
 800e8d0:	4617      	mov	r7, r2
 800e8d2:	461d      	mov	r5, r3
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	b118      	cbz	r0, 800e8e0 <_vfiprintf_r+0x18>
 800e8d8:	6983      	ldr	r3, [r0, #24]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <_vfiprintf_r+0x18>
 800e8dc:	f7ff fe90 	bl	800e600 <__sinit>
 800e8e0:	4b7c      	ldr	r3, [pc, #496]	; (800ead4 <_vfiprintf_r+0x20c>)
 800e8e2:	429c      	cmp	r4, r3
 800e8e4:	d158      	bne.n	800e998 <_vfiprintf_r+0xd0>
 800e8e6:	6874      	ldr	r4, [r6, #4]
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	0718      	lsls	r0, r3, #28
 800e8ec:	d55e      	bpl.n	800e9ac <_vfiprintf_r+0xe4>
 800e8ee:	6923      	ldr	r3, [r4, #16]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d05b      	beq.n	800e9ac <_vfiprintf_r+0xe4>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f8:	2320      	movs	r3, #32
 800e8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8fe:	2330      	movs	r3, #48	; 0x30
 800e900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e904:	9503      	str	r5, [sp, #12]
 800e906:	f04f 0b01 	mov.w	fp, #1
 800e90a:	46b8      	mov	r8, r7
 800e90c:	4645      	mov	r5, r8
 800e90e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e912:	b10b      	cbz	r3, 800e918 <_vfiprintf_r+0x50>
 800e914:	2b25      	cmp	r3, #37	; 0x25
 800e916:	d154      	bne.n	800e9c2 <_vfiprintf_r+0xfa>
 800e918:	ebb8 0a07 	subs.w	sl, r8, r7
 800e91c:	d00b      	beq.n	800e936 <_vfiprintf_r+0x6e>
 800e91e:	4653      	mov	r3, sl
 800e920:	463a      	mov	r2, r7
 800e922:	4621      	mov	r1, r4
 800e924:	4630      	mov	r0, r6
 800e926:	f7ff ffbc 	bl	800e8a2 <__sfputs_r>
 800e92a:	3001      	adds	r0, #1
 800e92c:	f000 80c2 	beq.w	800eab4 <_vfiprintf_r+0x1ec>
 800e930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e932:	4453      	add	r3, sl
 800e934:	9309      	str	r3, [sp, #36]	; 0x24
 800e936:	f898 3000 	ldrb.w	r3, [r8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 80ba 	beq.w	800eab4 <_vfiprintf_r+0x1ec>
 800e940:	2300      	movs	r3, #0
 800e942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e94a:	9304      	str	r3, [sp, #16]
 800e94c:	9307      	str	r3, [sp, #28]
 800e94e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e952:	931a      	str	r3, [sp, #104]	; 0x68
 800e954:	46a8      	mov	r8, r5
 800e956:	2205      	movs	r2, #5
 800e958:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e95c:	485e      	ldr	r0, [pc, #376]	; (800ead8 <_vfiprintf_r+0x210>)
 800e95e:	f7f1 fc6f 	bl	8000240 <memchr>
 800e962:	9b04      	ldr	r3, [sp, #16]
 800e964:	bb78      	cbnz	r0, 800e9c6 <_vfiprintf_r+0xfe>
 800e966:	06d9      	lsls	r1, r3, #27
 800e968:	bf44      	itt	mi
 800e96a:	2220      	movmi	r2, #32
 800e96c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e970:	071a      	lsls	r2, r3, #28
 800e972:	bf44      	itt	mi
 800e974:	222b      	movmi	r2, #43	; 0x2b
 800e976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e97a:	782a      	ldrb	r2, [r5, #0]
 800e97c:	2a2a      	cmp	r2, #42	; 0x2a
 800e97e:	d02a      	beq.n	800e9d6 <_vfiprintf_r+0x10e>
 800e980:	9a07      	ldr	r2, [sp, #28]
 800e982:	46a8      	mov	r8, r5
 800e984:	2000      	movs	r0, #0
 800e986:	250a      	movs	r5, #10
 800e988:	4641      	mov	r1, r8
 800e98a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e98e:	3b30      	subs	r3, #48	; 0x30
 800e990:	2b09      	cmp	r3, #9
 800e992:	d969      	bls.n	800ea68 <_vfiprintf_r+0x1a0>
 800e994:	b360      	cbz	r0, 800e9f0 <_vfiprintf_r+0x128>
 800e996:	e024      	b.n	800e9e2 <_vfiprintf_r+0x11a>
 800e998:	4b50      	ldr	r3, [pc, #320]	; (800eadc <_vfiprintf_r+0x214>)
 800e99a:	429c      	cmp	r4, r3
 800e99c:	d101      	bne.n	800e9a2 <_vfiprintf_r+0xda>
 800e99e:	68b4      	ldr	r4, [r6, #8]
 800e9a0:	e7a2      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e9a2:	4b4f      	ldr	r3, [pc, #316]	; (800eae0 <_vfiprintf_r+0x218>)
 800e9a4:	429c      	cmp	r4, r3
 800e9a6:	bf08      	it	eq
 800e9a8:	68f4      	ldreq	r4, [r6, #12]
 800e9aa:	e79d      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f000 fae0 	bl	800ef74 <__swsetup_r>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d09d      	beq.n	800e8f4 <_vfiprintf_r+0x2c>
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9bc:	b01d      	add	sp, #116	; 0x74
 800e9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c2:	46a8      	mov	r8, r5
 800e9c4:	e7a2      	b.n	800e90c <_vfiprintf_r+0x44>
 800e9c6:	4a44      	ldr	r2, [pc, #272]	; (800ead8 <_vfiprintf_r+0x210>)
 800e9c8:	1a80      	subs	r0, r0, r2
 800e9ca:	fa0b f000 	lsl.w	r0, fp, r0
 800e9ce:	4318      	orrs	r0, r3
 800e9d0:	9004      	str	r0, [sp, #16]
 800e9d2:	4645      	mov	r5, r8
 800e9d4:	e7be      	b.n	800e954 <_vfiprintf_r+0x8c>
 800e9d6:	9a03      	ldr	r2, [sp, #12]
 800e9d8:	1d11      	adds	r1, r2, #4
 800e9da:	6812      	ldr	r2, [r2, #0]
 800e9dc:	9103      	str	r1, [sp, #12]
 800e9de:	2a00      	cmp	r2, #0
 800e9e0:	db01      	blt.n	800e9e6 <_vfiprintf_r+0x11e>
 800e9e2:	9207      	str	r2, [sp, #28]
 800e9e4:	e004      	b.n	800e9f0 <_vfiprintf_r+0x128>
 800e9e6:	4252      	negs	r2, r2
 800e9e8:	f043 0302 	orr.w	r3, r3, #2
 800e9ec:	9207      	str	r2, [sp, #28]
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	f898 3000 	ldrb.w	r3, [r8]
 800e9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9f6:	d10e      	bne.n	800ea16 <_vfiprintf_r+0x14e>
 800e9f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e9fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e9fe:	d138      	bne.n	800ea72 <_vfiprintf_r+0x1aa>
 800ea00:	9b03      	ldr	r3, [sp, #12]
 800ea02:	1d1a      	adds	r2, r3, #4
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	9203      	str	r2, [sp, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	bfb8      	it	lt
 800ea0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea10:	f108 0802 	add.w	r8, r8, #2
 800ea14:	9305      	str	r3, [sp, #20]
 800ea16:	4d33      	ldr	r5, [pc, #204]	; (800eae4 <_vfiprintf_r+0x21c>)
 800ea18:	f898 1000 	ldrb.w	r1, [r8]
 800ea1c:	2203      	movs	r2, #3
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7f1 fc0e 	bl	8000240 <memchr>
 800ea24:	b140      	cbz	r0, 800ea38 <_vfiprintf_r+0x170>
 800ea26:	2340      	movs	r3, #64	; 0x40
 800ea28:	1b40      	subs	r0, r0, r5
 800ea2a:	fa03 f000 	lsl.w	r0, r3, r0
 800ea2e:	9b04      	ldr	r3, [sp, #16]
 800ea30:	4303      	orrs	r3, r0
 800ea32:	f108 0801 	add.w	r8, r8, #1
 800ea36:	9304      	str	r3, [sp, #16]
 800ea38:	f898 1000 	ldrb.w	r1, [r8]
 800ea3c:	482a      	ldr	r0, [pc, #168]	; (800eae8 <_vfiprintf_r+0x220>)
 800ea3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea42:	2206      	movs	r2, #6
 800ea44:	f108 0701 	add.w	r7, r8, #1
 800ea48:	f7f1 fbfa 	bl	8000240 <memchr>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d037      	beq.n	800eac0 <_vfiprintf_r+0x1f8>
 800ea50:	4b26      	ldr	r3, [pc, #152]	; (800eaec <_vfiprintf_r+0x224>)
 800ea52:	bb1b      	cbnz	r3, 800ea9c <_vfiprintf_r+0x1d4>
 800ea54:	9b03      	ldr	r3, [sp, #12]
 800ea56:	3307      	adds	r3, #7
 800ea58:	f023 0307 	bic.w	r3, r3, #7
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	9303      	str	r3, [sp, #12]
 800ea60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea62:	444b      	add	r3, r9
 800ea64:	9309      	str	r3, [sp, #36]	; 0x24
 800ea66:	e750      	b.n	800e90a <_vfiprintf_r+0x42>
 800ea68:	fb05 3202 	mla	r2, r5, r2, r3
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	4688      	mov	r8, r1
 800ea70:	e78a      	b.n	800e988 <_vfiprintf_r+0xc0>
 800ea72:	2300      	movs	r3, #0
 800ea74:	f108 0801 	add.w	r8, r8, #1
 800ea78:	9305      	str	r3, [sp, #20]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	250a      	movs	r5, #10
 800ea7e:	4640      	mov	r0, r8
 800ea80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea84:	3a30      	subs	r2, #48	; 0x30
 800ea86:	2a09      	cmp	r2, #9
 800ea88:	d903      	bls.n	800ea92 <_vfiprintf_r+0x1ca>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d0c3      	beq.n	800ea16 <_vfiprintf_r+0x14e>
 800ea8e:	9105      	str	r1, [sp, #20]
 800ea90:	e7c1      	b.n	800ea16 <_vfiprintf_r+0x14e>
 800ea92:	fb05 2101 	mla	r1, r5, r1, r2
 800ea96:	2301      	movs	r3, #1
 800ea98:	4680      	mov	r8, r0
 800ea9a:	e7f0      	b.n	800ea7e <_vfiprintf_r+0x1b6>
 800ea9c:	ab03      	add	r3, sp, #12
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4b13      	ldr	r3, [pc, #76]	; (800eaf0 <_vfiprintf_r+0x228>)
 800eaa4:	a904      	add	r1, sp, #16
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	f3af 8000 	nop.w
 800eaac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800eab0:	4681      	mov	r9, r0
 800eab2:	d1d5      	bne.n	800ea60 <_vfiprintf_r+0x198>
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	065b      	lsls	r3, r3, #25
 800eab8:	f53f af7e 	bmi.w	800e9b8 <_vfiprintf_r+0xf0>
 800eabc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eabe:	e77d      	b.n	800e9bc <_vfiprintf_r+0xf4>
 800eac0:	ab03      	add	r3, sp, #12
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	4622      	mov	r2, r4
 800eac6:	4b0a      	ldr	r3, [pc, #40]	; (800eaf0 <_vfiprintf_r+0x228>)
 800eac8:	a904      	add	r1, sp, #16
 800eaca:	4630      	mov	r0, r6
 800eacc:	f000 f888 	bl	800ebe0 <_printf_i>
 800ead0:	e7ec      	b.n	800eaac <_vfiprintf_r+0x1e4>
 800ead2:	bf00      	nop
 800ead4:	08011624 	.word	0x08011624
 800ead8:	08011664 	.word	0x08011664
 800eadc:	08011644 	.word	0x08011644
 800eae0:	08011604 	.word	0x08011604
 800eae4:	0801166a 	.word	0x0801166a
 800eae8:	0801166e 	.word	0x0801166e
 800eaec:	00000000 	.word	0x00000000
 800eaf0:	0800e8a3 	.word	0x0800e8a3

0800eaf4 <_printf_common>:
 800eaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf8:	4691      	mov	r9, r2
 800eafa:	461f      	mov	r7, r3
 800eafc:	688a      	ldr	r2, [r1, #8]
 800eafe:	690b      	ldr	r3, [r1, #16]
 800eb00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bfb8      	it	lt
 800eb08:	4613      	movlt	r3, r2
 800eb0a:	f8c9 3000 	str.w	r3, [r9]
 800eb0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb12:	4606      	mov	r6, r0
 800eb14:	460c      	mov	r4, r1
 800eb16:	b112      	cbz	r2, 800eb1e <_printf_common+0x2a>
 800eb18:	3301      	adds	r3, #1
 800eb1a:	f8c9 3000 	str.w	r3, [r9]
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	0699      	lsls	r1, r3, #26
 800eb22:	bf42      	ittt	mi
 800eb24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb28:	3302      	addmi	r3, #2
 800eb2a:	f8c9 3000 	strmi.w	r3, [r9]
 800eb2e:	6825      	ldr	r5, [r4, #0]
 800eb30:	f015 0506 	ands.w	r5, r5, #6
 800eb34:	d107      	bne.n	800eb46 <_printf_common+0x52>
 800eb36:	f104 0a19 	add.w	sl, r4, #25
 800eb3a:	68e3      	ldr	r3, [r4, #12]
 800eb3c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb40:	1a9b      	subs	r3, r3, r2
 800eb42:	42ab      	cmp	r3, r5
 800eb44:	dc28      	bgt.n	800eb98 <_printf_common+0xa4>
 800eb46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb4a:	6822      	ldr	r2, [r4, #0]
 800eb4c:	3300      	adds	r3, #0
 800eb4e:	bf18      	it	ne
 800eb50:	2301      	movne	r3, #1
 800eb52:	0692      	lsls	r2, r2, #26
 800eb54:	d42d      	bmi.n	800ebb2 <_printf_common+0xbe>
 800eb56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	47c0      	blx	r8
 800eb60:	3001      	adds	r0, #1
 800eb62:	d020      	beq.n	800eba6 <_printf_common+0xb2>
 800eb64:	6823      	ldr	r3, [r4, #0]
 800eb66:	68e5      	ldr	r5, [r4, #12]
 800eb68:	f8d9 2000 	ldr.w	r2, [r9]
 800eb6c:	f003 0306 	and.w	r3, r3, #6
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	bf08      	it	eq
 800eb74:	1aad      	subeq	r5, r5, r2
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	6922      	ldr	r2, [r4, #16]
 800eb7a:	bf0c      	ite	eq
 800eb7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb80:	2500      	movne	r5, #0
 800eb82:	4293      	cmp	r3, r2
 800eb84:	bfc4      	itt	gt
 800eb86:	1a9b      	subgt	r3, r3, r2
 800eb88:	18ed      	addgt	r5, r5, r3
 800eb8a:	f04f 0900 	mov.w	r9, #0
 800eb8e:	341a      	adds	r4, #26
 800eb90:	454d      	cmp	r5, r9
 800eb92:	d11a      	bne.n	800ebca <_printf_common+0xd6>
 800eb94:	2000      	movs	r0, #0
 800eb96:	e008      	b.n	800ebaa <_printf_common+0xb6>
 800eb98:	2301      	movs	r3, #1
 800eb9a:	4652      	mov	r2, sl
 800eb9c:	4639      	mov	r1, r7
 800eb9e:	4630      	mov	r0, r6
 800eba0:	47c0      	blx	r8
 800eba2:	3001      	adds	r0, #1
 800eba4:	d103      	bne.n	800ebae <_printf_common+0xba>
 800eba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebae:	3501      	adds	r5, #1
 800ebb0:	e7c3      	b.n	800eb3a <_printf_common+0x46>
 800ebb2:	18e1      	adds	r1, r4, r3
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	2030      	movs	r0, #48	; 0x30
 800ebb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebbc:	4422      	add	r2, r4
 800ebbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebc6:	3302      	adds	r3, #2
 800ebc8:	e7c5      	b.n	800eb56 <_printf_common+0x62>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4639      	mov	r1, r7
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	47c0      	blx	r8
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d0e6      	beq.n	800eba6 <_printf_common+0xb2>
 800ebd8:	f109 0901 	add.w	r9, r9, #1
 800ebdc:	e7d8      	b.n	800eb90 <_printf_common+0x9c>
	...

0800ebe0 <_printf_i>:
 800ebe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebe4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ebe8:	460c      	mov	r4, r1
 800ebea:	7e09      	ldrb	r1, [r1, #24]
 800ebec:	b085      	sub	sp, #20
 800ebee:	296e      	cmp	r1, #110	; 0x6e
 800ebf0:	4617      	mov	r7, r2
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	4698      	mov	r8, r3
 800ebf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebf8:	f000 80b3 	beq.w	800ed62 <_printf_i+0x182>
 800ebfc:	d822      	bhi.n	800ec44 <_printf_i+0x64>
 800ebfe:	2963      	cmp	r1, #99	; 0x63
 800ec00:	d036      	beq.n	800ec70 <_printf_i+0x90>
 800ec02:	d80a      	bhi.n	800ec1a <_printf_i+0x3a>
 800ec04:	2900      	cmp	r1, #0
 800ec06:	f000 80b9 	beq.w	800ed7c <_printf_i+0x19c>
 800ec0a:	2958      	cmp	r1, #88	; 0x58
 800ec0c:	f000 8083 	beq.w	800ed16 <_printf_i+0x136>
 800ec10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec18:	e032      	b.n	800ec80 <_printf_i+0xa0>
 800ec1a:	2964      	cmp	r1, #100	; 0x64
 800ec1c:	d001      	beq.n	800ec22 <_printf_i+0x42>
 800ec1e:	2969      	cmp	r1, #105	; 0x69
 800ec20:	d1f6      	bne.n	800ec10 <_printf_i+0x30>
 800ec22:	6820      	ldr	r0, [r4, #0]
 800ec24:	6813      	ldr	r3, [r2, #0]
 800ec26:	0605      	lsls	r5, r0, #24
 800ec28:	f103 0104 	add.w	r1, r3, #4
 800ec2c:	d52a      	bpl.n	800ec84 <_printf_i+0xa4>
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6011      	str	r1, [r2, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	da03      	bge.n	800ec3e <_printf_i+0x5e>
 800ec36:	222d      	movs	r2, #45	; 0x2d
 800ec38:	425b      	negs	r3, r3
 800ec3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec3e:	486f      	ldr	r0, [pc, #444]	; (800edfc <_printf_i+0x21c>)
 800ec40:	220a      	movs	r2, #10
 800ec42:	e039      	b.n	800ecb8 <_printf_i+0xd8>
 800ec44:	2973      	cmp	r1, #115	; 0x73
 800ec46:	f000 809d 	beq.w	800ed84 <_printf_i+0x1a4>
 800ec4a:	d808      	bhi.n	800ec5e <_printf_i+0x7e>
 800ec4c:	296f      	cmp	r1, #111	; 0x6f
 800ec4e:	d020      	beq.n	800ec92 <_printf_i+0xb2>
 800ec50:	2970      	cmp	r1, #112	; 0x70
 800ec52:	d1dd      	bne.n	800ec10 <_printf_i+0x30>
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	f043 0320 	orr.w	r3, r3, #32
 800ec5a:	6023      	str	r3, [r4, #0]
 800ec5c:	e003      	b.n	800ec66 <_printf_i+0x86>
 800ec5e:	2975      	cmp	r1, #117	; 0x75
 800ec60:	d017      	beq.n	800ec92 <_printf_i+0xb2>
 800ec62:	2978      	cmp	r1, #120	; 0x78
 800ec64:	d1d4      	bne.n	800ec10 <_printf_i+0x30>
 800ec66:	2378      	movs	r3, #120	; 0x78
 800ec68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec6c:	4864      	ldr	r0, [pc, #400]	; (800ee00 <_printf_i+0x220>)
 800ec6e:	e055      	b.n	800ed1c <_printf_i+0x13c>
 800ec70:	6813      	ldr	r3, [r2, #0]
 800ec72:	1d19      	adds	r1, r3, #4
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	6011      	str	r1, [r2, #0]
 800ec78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec80:	2301      	movs	r3, #1
 800ec82:	e08c      	b.n	800ed9e <_printf_i+0x1be>
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6011      	str	r1, [r2, #0]
 800ec88:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ec8c:	bf18      	it	ne
 800ec8e:	b21b      	sxthne	r3, r3
 800ec90:	e7cf      	b.n	800ec32 <_printf_i+0x52>
 800ec92:	6813      	ldr	r3, [r2, #0]
 800ec94:	6825      	ldr	r5, [r4, #0]
 800ec96:	1d18      	adds	r0, r3, #4
 800ec98:	6010      	str	r0, [r2, #0]
 800ec9a:	0628      	lsls	r0, r5, #24
 800ec9c:	d501      	bpl.n	800eca2 <_printf_i+0xc2>
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	e002      	b.n	800eca8 <_printf_i+0xc8>
 800eca2:	0668      	lsls	r0, r5, #25
 800eca4:	d5fb      	bpl.n	800ec9e <_printf_i+0xbe>
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	4854      	ldr	r0, [pc, #336]	; (800edfc <_printf_i+0x21c>)
 800ecaa:	296f      	cmp	r1, #111	; 0x6f
 800ecac:	bf14      	ite	ne
 800ecae:	220a      	movne	r2, #10
 800ecb0:	2208      	moveq	r2, #8
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecb8:	6865      	ldr	r5, [r4, #4]
 800ecba:	60a5      	str	r5, [r4, #8]
 800ecbc:	2d00      	cmp	r5, #0
 800ecbe:	f2c0 8095 	blt.w	800edec <_printf_i+0x20c>
 800ecc2:	6821      	ldr	r1, [r4, #0]
 800ecc4:	f021 0104 	bic.w	r1, r1, #4
 800ecc8:	6021      	str	r1, [r4, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d13d      	bne.n	800ed4a <_printf_i+0x16a>
 800ecce:	2d00      	cmp	r5, #0
 800ecd0:	f040 808e 	bne.w	800edf0 <_printf_i+0x210>
 800ecd4:	4665      	mov	r5, ip
 800ecd6:	2a08      	cmp	r2, #8
 800ecd8:	d10b      	bne.n	800ecf2 <_printf_i+0x112>
 800ecda:	6823      	ldr	r3, [r4, #0]
 800ecdc:	07db      	lsls	r3, r3, #31
 800ecde:	d508      	bpl.n	800ecf2 <_printf_i+0x112>
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	6862      	ldr	r2, [r4, #4]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	bfde      	ittt	le
 800ece8:	2330      	movle	r3, #48	; 0x30
 800ecea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ecf2:	ebac 0305 	sub.w	r3, ip, r5
 800ecf6:	6123      	str	r3, [r4, #16]
 800ecf8:	f8cd 8000 	str.w	r8, [sp]
 800ecfc:	463b      	mov	r3, r7
 800ecfe:	aa03      	add	r2, sp, #12
 800ed00:	4621      	mov	r1, r4
 800ed02:	4630      	mov	r0, r6
 800ed04:	f7ff fef6 	bl	800eaf4 <_printf_common>
 800ed08:	3001      	adds	r0, #1
 800ed0a:	d14d      	bne.n	800eda8 <_printf_i+0x1c8>
 800ed0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed10:	b005      	add	sp, #20
 800ed12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed16:	4839      	ldr	r0, [pc, #228]	; (800edfc <_printf_i+0x21c>)
 800ed18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed1c:	6813      	ldr	r3, [r2, #0]
 800ed1e:	6821      	ldr	r1, [r4, #0]
 800ed20:	1d1d      	adds	r5, r3, #4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6015      	str	r5, [r2, #0]
 800ed26:	060a      	lsls	r2, r1, #24
 800ed28:	d50b      	bpl.n	800ed42 <_printf_i+0x162>
 800ed2a:	07ca      	lsls	r2, r1, #31
 800ed2c:	bf44      	itt	mi
 800ed2e:	f041 0120 	orrmi.w	r1, r1, #32
 800ed32:	6021      	strmi	r1, [r4, #0]
 800ed34:	b91b      	cbnz	r3, 800ed3e <_printf_i+0x15e>
 800ed36:	6822      	ldr	r2, [r4, #0]
 800ed38:	f022 0220 	bic.w	r2, r2, #32
 800ed3c:	6022      	str	r2, [r4, #0]
 800ed3e:	2210      	movs	r2, #16
 800ed40:	e7b7      	b.n	800ecb2 <_printf_i+0xd2>
 800ed42:	064d      	lsls	r5, r1, #25
 800ed44:	bf48      	it	mi
 800ed46:	b29b      	uxthmi	r3, r3
 800ed48:	e7ef      	b.n	800ed2a <_printf_i+0x14a>
 800ed4a:	4665      	mov	r5, ip
 800ed4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed50:	fb02 3311 	mls	r3, r2, r1, r3
 800ed54:	5cc3      	ldrb	r3, [r0, r3]
 800ed56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	2900      	cmp	r1, #0
 800ed5e:	d1f5      	bne.n	800ed4c <_printf_i+0x16c>
 800ed60:	e7b9      	b.n	800ecd6 <_printf_i+0xf6>
 800ed62:	6813      	ldr	r3, [r2, #0]
 800ed64:	6825      	ldr	r5, [r4, #0]
 800ed66:	6961      	ldr	r1, [r4, #20]
 800ed68:	1d18      	adds	r0, r3, #4
 800ed6a:	6010      	str	r0, [r2, #0]
 800ed6c:	0628      	lsls	r0, r5, #24
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	d501      	bpl.n	800ed76 <_printf_i+0x196>
 800ed72:	6019      	str	r1, [r3, #0]
 800ed74:	e002      	b.n	800ed7c <_printf_i+0x19c>
 800ed76:	066a      	lsls	r2, r5, #25
 800ed78:	d5fb      	bpl.n	800ed72 <_printf_i+0x192>
 800ed7a:	8019      	strh	r1, [r3, #0]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	6123      	str	r3, [r4, #16]
 800ed80:	4665      	mov	r5, ip
 800ed82:	e7b9      	b.n	800ecf8 <_printf_i+0x118>
 800ed84:	6813      	ldr	r3, [r2, #0]
 800ed86:	1d19      	adds	r1, r3, #4
 800ed88:	6011      	str	r1, [r2, #0]
 800ed8a:	681d      	ldr	r5, [r3, #0]
 800ed8c:	6862      	ldr	r2, [r4, #4]
 800ed8e:	2100      	movs	r1, #0
 800ed90:	4628      	mov	r0, r5
 800ed92:	f7f1 fa55 	bl	8000240 <memchr>
 800ed96:	b108      	cbz	r0, 800ed9c <_printf_i+0x1bc>
 800ed98:	1b40      	subs	r0, r0, r5
 800ed9a:	6060      	str	r0, [r4, #4]
 800ed9c:	6863      	ldr	r3, [r4, #4]
 800ed9e:	6123      	str	r3, [r4, #16]
 800eda0:	2300      	movs	r3, #0
 800eda2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eda6:	e7a7      	b.n	800ecf8 <_printf_i+0x118>
 800eda8:	6923      	ldr	r3, [r4, #16]
 800edaa:	462a      	mov	r2, r5
 800edac:	4639      	mov	r1, r7
 800edae:	4630      	mov	r0, r6
 800edb0:	47c0      	blx	r8
 800edb2:	3001      	adds	r0, #1
 800edb4:	d0aa      	beq.n	800ed0c <_printf_i+0x12c>
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	079b      	lsls	r3, r3, #30
 800edba:	d413      	bmi.n	800ede4 <_printf_i+0x204>
 800edbc:	68e0      	ldr	r0, [r4, #12]
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	4298      	cmp	r0, r3
 800edc2:	bfb8      	it	lt
 800edc4:	4618      	movlt	r0, r3
 800edc6:	e7a3      	b.n	800ed10 <_printf_i+0x130>
 800edc8:	2301      	movs	r3, #1
 800edca:	464a      	mov	r2, r9
 800edcc:	4639      	mov	r1, r7
 800edce:	4630      	mov	r0, r6
 800edd0:	47c0      	blx	r8
 800edd2:	3001      	adds	r0, #1
 800edd4:	d09a      	beq.n	800ed0c <_printf_i+0x12c>
 800edd6:	3501      	adds	r5, #1
 800edd8:	68e3      	ldr	r3, [r4, #12]
 800edda:	9a03      	ldr	r2, [sp, #12]
 800eddc:	1a9b      	subs	r3, r3, r2
 800edde:	42ab      	cmp	r3, r5
 800ede0:	dcf2      	bgt.n	800edc8 <_printf_i+0x1e8>
 800ede2:	e7eb      	b.n	800edbc <_printf_i+0x1dc>
 800ede4:	2500      	movs	r5, #0
 800ede6:	f104 0919 	add.w	r9, r4, #25
 800edea:	e7f5      	b.n	800edd8 <_printf_i+0x1f8>
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1ac      	bne.n	800ed4a <_printf_i+0x16a>
 800edf0:	7803      	ldrb	r3, [r0, #0]
 800edf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edfa:	e76c      	b.n	800ecd6 <_printf_i+0xf6>
 800edfc:	08011675 	.word	0x08011675
 800ee00:	08011686 	.word	0x08011686

0800ee04 <_sbrk_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4c06      	ldr	r4, [pc, #24]	; (800ee20 <_sbrk_r+0x1c>)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	6023      	str	r3, [r4, #0]
 800ee10:	f7f1 ffa6 	bl	8000d60 <_sbrk>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d102      	bne.n	800ee1e <_sbrk_r+0x1a>
 800ee18:	6823      	ldr	r3, [r4, #0]
 800ee1a:	b103      	cbz	r3, 800ee1e <_sbrk_r+0x1a>
 800ee1c:	602b      	str	r3, [r5, #0]
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	200069dc 	.word	0x200069dc

0800ee24 <__sread>:
 800ee24:	b510      	push	{r4, lr}
 800ee26:	460c      	mov	r4, r1
 800ee28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee2c:	f000 fa48 	bl	800f2c0 <_read_r>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	bfab      	itete	ge
 800ee34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee36:	89a3      	ldrhlt	r3, [r4, #12]
 800ee38:	181b      	addge	r3, r3, r0
 800ee3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee3e:	bfac      	ite	ge
 800ee40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee42:	81a3      	strhlt	r3, [r4, #12]
 800ee44:	bd10      	pop	{r4, pc}

0800ee46 <__swrite>:
 800ee46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4a:	461f      	mov	r7, r3
 800ee4c:	898b      	ldrh	r3, [r1, #12]
 800ee4e:	05db      	lsls	r3, r3, #23
 800ee50:	4605      	mov	r5, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	4616      	mov	r6, r2
 800ee56:	d505      	bpl.n	800ee64 <__swrite+0x1e>
 800ee58:	2302      	movs	r3, #2
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee60:	f000 f9b6 	bl	800f1d0 <_lseek_r>
 800ee64:	89a3      	ldrh	r3, [r4, #12]
 800ee66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee6e:	81a3      	strh	r3, [r4, #12]
 800ee70:	4632      	mov	r2, r6
 800ee72:	463b      	mov	r3, r7
 800ee74:	4628      	mov	r0, r5
 800ee76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7a:	f000 b869 	b.w	800ef50 <_write_r>

0800ee7e <__sseek>:
 800ee7e:	b510      	push	{r4, lr}
 800ee80:	460c      	mov	r4, r1
 800ee82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee86:	f000 f9a3 	bl	800f1d0 <_lseek_r>
 800ee8a:	1c43      	adds	r3, r0, #1
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	bf15      	itete	ne
 800ee90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee9a:	81a3      	strheq	r3, [r4, #12]
 800ee9c:	bf18      	it	ne
 800ee9e:	81a3      	strhne	r3, [r4, #12]
 800eea0:	bd10      	pop	{r4, pc}

0800eea2 <__sclose>:
 800eea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea6:	f000 b8d3 	b.w	800f050 <_close_r>
	...

0800eeac <__swbuf_r>:
 800eeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeae:	460e      	mov	r6, r1
 800eeb0:	4614      	mov	r4, r2
 800eeb2:	4605      	mov	r5, r0
 800eeb4:	b118      	cbz	r0, 800eebe <__swbuf_r+0x12>
 800eeb6:	6983      	ldr	r3, [r0, #24]
 800eeb8:	b90b      	cbnz	r3, 800eebe <__swbuf_r+0x12>
 800eeba:	f7ff fba1 	bl	800e600 <__sinit>
 800eebe:	4b21      	ldr	r3, [pc, #132]	; (800ef44 <__swbuf_r+0x98>)
 800eec0:	429c      	cmp	r4, r3
 800eec2:	d12a      	bne.n	800ef1a <__swbuf_r+0x6e>
 800eec4:	686c      	ldr	r4, [r5, #4]
 800eec6:	69a3      	ldr	r3, [r4, #24]
 800eec8:	60a3      	str	r3, [r4, #8]
 800eeca:	89a3      	ldrh	r3, [r4, #12]
 800eecc:	071a      	lsls	r2, r3, #28
 800eece:	d52e      	bpl.n	800ef2e <__swbuf_r+0x82>
 800eed0:	6923      	ldr	r3, [r4, #16]
 800eed2:	b363      	cbz	r3, 800ef2e <__swbuf_r+0x82>
 800eed4:	6923      	ldr	r3, [r4, #16]
 800eed6:	6820      	ldr	r0, [r4, #0]
 800eed8:	1ac0      	subs	r0, r0, r3
 800eeda:	6963      	ldr	r3, [r4, #20]
 800eedc:	b2f6      	uxtb	r6, r6
 800eede:	4283      	cmp	r3, r0
 800eee0:	4637      	mov	r7, r6
 800eee2:	dc04      	bgt.n	800eeee <__swbuf_r+0x42>
 800eee4:	4621      	mov	r1, r4
 800eee6:	4628      	mov	r0, r5
 800eee8:	f000 f948 	bl	800f17c <_fflush_r>
 800eeec:	bb28      	cbnz	r0, 800ef3a <__swbuf_r+0x8e>
 800eeee:	68a3      	ldr	r3, [r4, #8]
 800eef0:	3b01      	subs	r3, #1
 800eef2:	60a3      	str	r3, [r4, #8]
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	1c5a      	adds	r2, r3, #1
 800eef8:	6022      	str	r2, [r4, #0]
 800eefa:	701e      	strb	r6, [r3, #0]
 800eefc:	6963      	ldr	r3, [r4, #20]
 800eefe:	3001      	adds	r0, #1
 800ef00:	4283      	cmp	r3, r0
 800ef02:	d004      	beq.n	800ef0e <__swbuf_r+0x62>
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	07db      	lsls	r3, r3, #31
 800ef08:	d519      	bpl.n	800ef3e <__swbuf_r+0x92>
 800ef0a:	2e0a      	cmp	r6, #10
 800ef0c:	d117      	bne.n	800ef3e <__swbuf_r+0x92>
 800ef0e:	4621      	mov	r1, r4
 800ef10:	4628      	mov	r0, r5
 800ef12:	f000 f933 	bl	800f17c <_fflush_r>
 800ef16:	b190      	cbz	r0, 800ef3e <__swbuf_r+0x92>
 800ef18:	e00f      	b.n	800ef3a <__swbuf_r+0x8e>
 800ef1a:	4b0b      	ldr	r3, [pc, #44]	; (800ef48 <__swbuf_r+0x9c>)
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	d101      	bne.n	800ef24 <__swbuf_r+0x78>
 800ef20:	68ac      	ldr	r4, [r5, #8]
 800ef22:	e7d0      	b.n	800eec6 <__swbuf_r+0x1a>
 800ef24:	4b09      	ldr	r3, [pc, #36]	; (800ef4c <__swbuf_r+0xa0>)
 800ef26:	429c      	cmp	r4, r3
 800ef28:	bf08      	it	eq
 800ef2a:	68ec      	ldreq	r4, [r5, #12]
 800ef2c:	e7cb      	b.n	800eec6 <__swbuf_r+0x1a>
 800ef2e:	4621      	mov	r1, r4
 800ef30:	4628      	mov	r0, r5
 800ef32:	f000 f81f 	bl	800ef74 <__swsetup_r>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d0cc      	beq.n	800eed4 <__swbuf_r+0x28>
 800ef3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ef3e:	4638      	mov	r0, r7
 800ef40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef42:	bf00      	nop
 800ef44:	08011624 	.word	0x08011624
 800ef48:	08011644 	.word	0x08011644
 800ef4c:	08011604 	.word	0x08011604

0800ef50 <_write_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4c07      	ldr	r4, [pc, #28]	; (800ef70 <_write_r+0x20>)
 800ef54:	4605      	mov	r5, r0
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	6022      	str	r2, [r4, #0]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	f7f1 fead 	bl	8000cbe <_write>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	d102      	bne.n	800ef6e <_write_r+0x1e>
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	b103      	cbz	r3, 800ef6e <_write_r+0x1e>
 800ef6c:	602b      	str	r3, [r5, #0]
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	200069dc 	.word	0x200069dc

0800ef74 <__swsetup_r>:
 800ef74:	4b32      	ldr	r3, [pc, #200]	; (800f040 <__swsetup_r+0xcc>)
 800ef76:	b570      	push	{r4, r5, r6, lr}
 800ef78:	681d      	ldr	r5, [r3, #0]
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	b125      	cbz	r5, 800ef8a <__swsetup_r+0x16>
 800ef80:	69ab      	ldr	r3, [r5, #24]
 800ef82:	b913      	cbnz	r3, 800ef8a <__swsetup_r+0x16>
 800ef84:	4628      	mov	r0, r5
 800ef86:	f7ff fb3b 	bl	800e600 <__sinit>
 800ef8a:	4b2e      	ldr	r3, [pc, #184]	; (800f044 <__swsetup_r+0xd0>)
 800ef8c:	429c      	cmp	r4, r3
 800ef8e:	d10f      	bne.n	800efb0 <__swsetup_r+0x3c>
 800ef90:	686c      	ldr	r4, [r5, #4]
 800ef92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	0715      	lsls	r5, r2, #28
 800ef9a:	d42c      	bmi.n	800eff6 <__swsetup_r+0x82>
 800ef9c:	06d0      	lsls	r0, r2, #27
 800ef9e:	d411      	bmi.n	800efc4 <__swsetup_r+0x50>
 800efa0:	2209      	movs	r2, #9
 800efa2:	6032      	str	r2, [r6, #0]
 800efa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efa8:	81a3      	strh	r3, [r4, #12]
 800efaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efae:	e03e      	b.n	800f02e <__swsetup_r+0xba>
 800efb0:	4b25      	ldr	r3, [pc, #148]	; (800f048 <__swsetup_r+0xd4>)
 800efb2:	429c      	cmp	r4, r3
 800efb4:	d101      	bne.n	800efba <__swsetup_r+0x46>
 800efb6:	68ac      	ldr	r4, [r5, #8]
 800efb8:	e7eb      	b.n	800ef92 <__swsetup_r+0x1e>
 800efba:	4b24      	ldr	r3, [pc, #144]	; (800f04c <__swsetup_r+0xd8>)
 800efbc:	429c      	cmp	r4, r3
 800efbe:	bf08      	it	eq
 800efc0:	68ec      	ldreq	r4, [r5, #12]
 800efc2:	e7e6      	b.n	800ef92 <__swsetup_r+0x1e>
 800efc4:	0751      	lsls	r1, r2, #29
 800efc6:	d512      	bpl.n	800efee <__swsetup_r+0x7a>
 800efc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efca:	b141      	cbz	r1, 800efde <__swsetup_r+0x6a>
 800efcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efd0:	4299      	cmp	r1, r3
 800efd2:	d002      	beq.n	800efda <__swsetup_r+0x66>
 800efd4:	4630      	mov	r0, r6
 800efd6:	f7ff fba5 	bl	800e724 <_free_r>
 800efda:	2300      	movs	r3, #0
 800efdc:	6363      	str	r3, [r4, #52]	; 0x34
 800efde:	89a3      	ldrh	r3, [r4, #12]
 800efe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800efe4:	81a3      	strh	r3, [r4, #12]
 800efe6:	2300      	movs	r3, #0
 800efe8:	6063      	str	r3, [r4, #4]
 800efea:	6923      	ldr	r3, [r4, #16]
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	89a3      	ldrh	r3, [r4, #12]
 800eff0:	f043 0308 	orr.w	r3, r3, #8
 800eff4:	81a3      	strh	r3, [r4, #12]
 800eff6:	6923      	ldr	r3, [r4, #16]
 800eff8:	b94b      	cbnz	r3, 800f00e <__swsetup_r+0x9a>
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f004:	d003      	beq.n	800f00e <__swsetup_r+0x9a>
 800f006:	4621      	mov	r1, r4
 800f008:	4630      	mov	r0, r6
 800f00a:	f000 f917 	bl	800f23c <__smakebuf_r>
 800f00e:	89a2      	ldrh	r2, [r4, #12]
 800f010:	f012 0301 	ands.w	r3, r2, #1
 800f014:	d00c      	beq.n	800f030 <__swsetup_r+0xbc>
 800f016:	2300      	movs	r3, #0
 800f018:	60a3      	str	r3, [r4, #8]
 800f01a:	6963      	ldr	r3, [r4, #20]
 800f01c:	425b      	negs	r3, r3
 800f01e:	61a3      	str	r3, [r4, #24]
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	b953      	cbnz	r3, 800f03a <__swsetup_r+0xc6>
 800f024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f02c:	d1ba      	bne.n	800efa4 <__swsetup_r+0x30>
 800f02e:	bd70      	pop	{r4, r5, r6, pc}
 800f030:	0792      	lsls	r2, r2, #30
 800f032:	bf58      	it	pl
 800f034:	6963      	ldrpl	r3, [r4, #20]
 800f036:	60a3      	str	r3, [r4, #8]
 800f038:	e7f2      	b.n	800f020 <__swsetup_r+0xac>
 800f03a:	2000      	movs	r0, #0
 800f03c:	e7f7      	b.n	800f02e <__swsetup_r+0xba>
 800f03e:	bf00      	nop
 800f040:	20000018 	.word	0x20000018
 800f044:	08011624 	.word	0x08011624
 800f048:	08011644 	.word	0x08011644
 800f04c:	08011604 	.word	0x08011604

0800f050 <_close_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4c06      	ldr	r4, [pc, #24]	; (800f06c <_close_r+0x1c>)
 800f054:	2300      	movs	r3, #0
 800f056:	4605      	mov	r5, r0
 800f058:	4608      	mov	r0, r1
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	f7f1 fe4b 	bl	8000cf6 <_close>
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d102      	bne.n	800f06a <_close_r+0x1a>
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	b103      	cbz	r3, 800f06a <_close_r+0x1a>
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	200069dc 	.word	0x200069dc

0800f070 <__sflush_r>:
 800f070:	898a      	ldrh	r2, [r1, #12]
 800f072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f076:	4605      	mov	r5, r0
 800f078:	0710      	lsls	r0, r2, #28
 800f07a:	460c      	mov	r4, r1
 800f07c:	d458      	bmi.n	800f130 <__sflush_r+0xc0>
 800f07e:	684b      	ldr	r3, [r1, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	dc05      	bgt.n	800f090 <__sflush_r+0x20>
 800f084:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f086:	2b00      	cmp	r3, #0
 800f088:	dc02      	bgt.n	800f090 <__sflush_r+0x20>
 800f08a:	2000      	movs	r0, #0
 800f08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f092:	2e00      	cmp	r6, #0
 800f094:	d0f9      	beq.n	800f08a <__sflush_r+0x1a>
 800f096:	2300      	movs	r3, #0
 800f098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f09c:	682f      	ldr	r7, [r5, #0]
 800f09e:	6a21      	ldr	r1, [r4, #32]
 800f0a0:	602b      	str	r3, [r5, #0]
 800f0a2:	d032      	beq.n	800f10a <__sflush_r+0x9a>
 800f0a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	075a      	lsls	r2, r3, #29
 800f0aa:	d505      	bpl.n	800f0b8 <__sflush_r+0x48>
 800f0ac:	6863      	ldr	r3, [r4, #4]
 800f0ae:	1ac0      	subs	r0, r0, r3
 800f0b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0b2:	b10b      	cbz	r3, 800f0b8 <__sflush_r+0x48>
 800f0b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0b6:	1ac0      	subs	r0, r0, r3
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0be:	6a21      	ldr	r1, [r4, #32]
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	47b0      	blx	r6
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	89a3      	ldrh	r3, [r4, #12]
 800f0c8:	d106      	bne.n	800f0d8 <__sflush_r+0x68>
 800f0ca:	6829      	ldr	r1, [r5, #0]
 800f0cc:	291d      	cmp	r1, #29
 800f0ce:	d848      	bhi.n	800f162 <__sflush_r+0xf2>
 800f0d0:	4a29      	ldr	r2, [pc, #164]	; (800f178 <__sflush_r+0x108>)
 800f0d2:	40ca      	lsrs	r2, r1
 800f0d4:	07d6      	lsls	r6, r2, #31
 800f0d6:	d544      	bpl.n	800f162 <__sflush_r+0xf2>
 800f0d8:	2200      	movs	r2, #0
 800f0da:	6062      	str	r2, [r4, #4]
 800f0dc:	04d9      	lsls	r1, r3, #19
 800f0de:	6922      	ldr	r2, [r4, #16]
 800f0e0:	6022      	str	r2, [r4, #0]
 800f0e2:	d504      	bpl.n	800f0ee <__sflush_r+0x7e>
 800f0e4:	1c42      	adds	r2, r0, #1
 800f0e6:	d101      	bne.n	800f0ec <__sflush_r+0x7c>
 800f0e8:	682b      	ldr	r3, [r5, #0]
 800f0ea:	b903      	cbnz	r3, 800f0ee <__sflush_r+0x7e>
 800f0ec:	6560      	str	r0, [r4, #84]	; 0x54
 800f0ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f0f0:	602f      	str	r7, [r5, #0]
 800f0f2:	2900      	cmp	r1, #0
 800f0f4:	d0c9      	beq.n	800f08a <__sflush_r+0x1a>
 800f0f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0fa:	4299      	cmp	r1, r3
 800f0fc:	d002      	beq.n	800f104 <__sflush_r+0x94>
 800f0fe:	4628      	mov	r0, r5
 800f100:	f7ff fb10 	bl	800e724 <_free_r>
 800f104:	2000      	movs	r0, #0
 800f106:	6360      	str	r0, [r4, #52]	; 0x34
 800f108:	e7c0      	b.n	800f08c <__sflush_r+0x1c>
 800f10a:	2301      	movs	r3, #1
 800f10c:	4628      	mov	r0, r5
 800f10e:	47b0      	blx	r6
 800f110:	1c41      	adds	r1, r0, #1
 800f112:	d1c8      	bne.n	800f0a6 <__sflush_r+0x36>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d0c5      	beq.n	800f0a6 <__sflush_r+0x36>
 800f11a:	2b1d      	cmp	r3, #29
 800f11c:	d001      	beq.n	800f122 <__sflush_r+0xb2>
 800f11e:	2b16      	cmp	r3, #22
 800f120:	d101      	bne.n	800f126 <__sflush_r+0xb6>
 800f122:	602f      	str	r7, [r5, #0]
 800f124:	e7b1      	b.n	800f08a <__sflush_r+0x1a>
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f12c:	81a3      	strh	r3, [r4, #12]
 800f12e:	e7ad      	b.n	800f08c <__sflush_r+0x1c>
 800f130:	690f      	ldr	r7, [r1, #16]
 800f132:	2f00      	cmp	r7, #0
 800f134:	d0a9      	beq.n	800f08a <__sflush_r+0x1a>
 800f136:	0793      	lsls	r3, r2, #30
 800f138:	680e      	ldr	r6, [r1, #0]
 800f13a:	bf08      	it	eq
 800f13c:	694b      	ldreq	r3, [r1, #20]
 800f13e:	600f      	str	r7, [r1, #0]
 800f140:	bf18      	it	ne
 800f142:	2300      	movne	r3, #0
 800f144:	eba6 0807 	sub.w	r8, r6, r7
 800f148:	608b      	str	r3, [r1, #8]
 800f14a:	f1b8 0f00 	cmp.w	r8, #0
 800f14e:	dd9c      	ble.n	800f08a <__sflush_r+0x1a>
 800f150:	4643      	mov	r3, r8
 800f152:	463a      	mov	r2, r7
 800f154:	6a21      	ldr	r1, [r4, #32]
 800f156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f158:	4628      	mov	r0, r5
 800f15a:	47b0      	blx	r6
 800f15c:	2800      	cmp	r0, #0
 800f15e:	dc06      	bgt.n	800f16e <__sflush_r+0xfe>
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f166:	81a3      	strh	r3, [r4, #12]
 800f168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f16c:	e78e      	b.n	800f08c <__sflush_r+0x1c>
 800f16e:	4407      	add	r7, r0
 800f170:	eba8 0800 	sub.w	r8, r8, r0
 800f174:	e7e9      	b.n	800f14a <__sflush_r+0xda>
 800f176:	bf00      	nop
 800f178:	20400001 	.word	0x20400001

0800f17c <_fflush_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	690b      	ldr	r3, [r1, #16]
 800f180:	4605      	mov	r5, r0
 800f182:	460c      	mov	r4, r1
 800f184:	b1db      	cbz	r3, 800f1be <_fflush_r+0x42>
 800f186:	b118      	cbz	r0, 800f190 <_fflush_r+0x14>
 800f188:	6983      	ldr	r3, [r0, #24]
 800f18a:	b90b      	cbnz	r3, 800f190 <_fflush_r+0x14>
 800f18c:	f7ff fa38 	bl	800e600 <__sinit>
 800f190:	4b0c      	ldr	r3, [pc, #48]	; (800f1c4 <_fflush_r+0x48>)
 800f192:	429c      	cmp	r4, r3
 800f194:	d109      	bne.n	800f1aa <_fflush_r+0x2e>
 800f196:	686c      	ldr	r4, [r5, #4]
 800f198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f19c:	b17b      	cbz	r3, 800f1be <_fflush_r+0x42>
 800f19e:	4621      	mov	r1, r4
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1a6:	f7ff bf63 	b.w	800f070 <__sflush_r>
 800f1aa:	4b07      	ldr	r3, [pc, #28]	; (800f1c8 <_fflush_r+0x4c>)
 800f1ac:	429c      	cmp	r4, r3
 800f1ae:	d101      	bne.n	800f1b4 <_fflush_r+0x38>
 800f1b0:	68ac      	ldr	r4, [r5, #8]
 800f1b2:	e7f1      	b.n	800f198 <_fflush_r+0x1c>
 800f1b4:	4b05      	ldr	r3, [pc, #20]	; (800f1cc <_fflush_r+0x50>)
 800f1b6:	429c      	cmp	r4, r3
 800f1b8:	bf08      	it	eq
 800f1ba:	68ec      	ldreq	r4, [r5, #12]
 800f1bc:	e7ec      	b.n	800f198 <_fflush_r+0x1c>
 800f1be:	2000      	movs	r0, #0
 800f1c0:	bd38      	pop	{r3, r4, r5, pc}
 800f1c2:	bf00      	nop
 800f1c4:	08011624 	.word	0x08011624
 800f1c8:	08011644 	.word	0x08011644
 800f1cc:	08011604 	.word	0x08011604

0800f1d0 <_lseek_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	4c07      	ldr	r4, [pc, #28]	; (800f1f0 <_lseek_r+0x20>)
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	4608      	mov	r0, r1
 800f1d8:	4611      	mov	r1, r2
 800f1da:	2200      	movs	r2, #0
 800f1dc:	6022      	str	r2, [r4, #0]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	f7f1 fdb0 	bl	8000d44 <_lseek>
 800f1e4:	1c43      	adds	r3, r0, #1
 800f1e6:	d102      	bne.n	800f1ee <_lseek_r+0x1e>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	b103      	cbz	r3, 800f1ee <_lseek_r+0x1e>
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	bd38      	pop	{r3, r4, r5, pc}
 800f1f0:	200069dc 	.word	0x200069dc

0800f1f4 <__swhatbuf_r>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	460e      	mov	r6, r1
 800f1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	b096      	sub	sp, #88	; 0x58
 800f200:	4614      	mov	r4, r2
 800f202:	461d      	mov	r5, r3
 800f204:	da07      	bge.n	800f216 <__swhatbuf_r+0x22>
 800f206:	2300      	movs	r3, #0
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	89b3      	ldrh	r3, [r6, #12]
 800f20c:	061a      	lsls	r2, r3, #24
 800f20e:	d410      	bmi.n	800f232 <__swhatbuf_r+0x3e>
 800f210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f214:	e00e      	b.n	800f234 <__swhatbuf_r+0x40>
 800f216:	466a      	mov	r2, sp
 800f218:	f000 f864 	bl	800f2e4 <_fstat_r>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	dbf2      	blt.n	800f206 <__swhatbuf_r+0x12>
 800f220:	9a01      	ldr	r2, [sp, #4]
 800f222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f22a:	425a      	negs	r2, r3
 800f22c:	415a      	adcs	r2, r3
 800f22e:	602a      	str	r2, [r5, #0]
 800f230:	e7ee      	b.n	800f210 <__swhatbuf_r+0x1c>
 800f232:	2340      	movs	r3, #64	; 0x40
 800f234:	2000      	movs	r0, #0
 800f236:	6023      	str	r3, [r4, #0]
 800f238:	b016      	add	sp, #88	; 0x58
 800f23a:	bd70      	pop	{r4, r5, r6, pc}

0800f23c <__smakebuf_r>:
 800f23c:	898b      	ldrh	r3, [r1, #12]
 800f23e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f240:	079d      	lsls	r5, r3, #30
 800f242:	4606      	mov	r6, r0
 800f244:	460c      	mov	r4, r1
 800f246:	d507      	bpl.n	800f258 <__smakebuf_r+0x1c>
 800f248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	2301      	movs	r3, #1
 800f252:	6163      	str	r3, [r4, #20]
 800f254:	b002      	add	sp, #8
 800f256:	bd70      	pop	{r4, r5, r6, pc}
 800f258:	ab01      	add	r3, sp, #4
 800f25a:	466a      	mov	r2, sp
 800f25c:	f7ff ffca 	bl	800f1f4 <__swhatbuf_r>
 800f260:	9900      	ldr	r1, [sp, #0]
 800f262:	4605      	mov	r5, r0
 800f264:	4630      	mov	r0, r6
 800f266:	f7ff faab 	bl	800e7c0 <_malloc_r>
 800f26a:	b948      	cbnz	r0, 800f280 <__smakebuf_r+0x44>
 800f26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f270:	059a      	lsls	r2, r3, #22
 800f272:	d4ef      	bmi.n	800f254 <__smakebuf_r+0x18>
 800f274:	f023 0303 	bic.w	r3, r3, #3
 800f278:	f043 0302 	orr.w	r3, r3, #2
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	e7e3      	b.n	800f248 <__smakebuf_r+0xc>
 800f280:	4b0d      	ldr	r3, [pc, #52]	; (800f2b8 <__smakebuf_r+0x7c>)
 800f282:	62b3      	str	r3, [r6, #40]	; 0x28
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	6020      	str	r0, [r4, #0]
 800f288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f28c:	81a3      	strh	r3, [r4, #12]
 800f28e:	9b00      	ldr	r3, [sp, #0]
 800f290:	6163      	str	r3, [r4, #20]
 800f292:	9b01      	ldr	r3, [sp, #4]
 800f294:	6120      	str	r0, [r4, #16]
 800f296:	b15b      	cbz	r3, 800f2b0 <__smakebuf_r+0x74>
 800f298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f29c:	4630      	mov	r0, r6
 800f29e:	f000 f833 	bl	800f308 <_isatty_r>
 800f2a2:	b128      	cbz	r0, 800f2b0 <__smakebuf_r+0x74>
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	f023 0303 	bic.w	r3, r3, #3
 800f2aa:	f043 0301 	orr.w	r3, r3, #1
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	431d      	orrs	r5, r3
 800f2b4:	81a5      	strh	r5, [r4, #12]
 800f2b6:	e7cd      	b.n	800f254 <__smakebuf_r+0x18>
 800f2b8:	0800e5c9 	.word	0x0800e5c9

0800f2bc <__malloc_lock>:
 800f2bc:	4770      	bx	lr

0800f2be <__malloc_unlock>:
 800f2be:	4770      	bx	lr

0800f2c0 <_read_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4c07      	ldr	r4, [pc, #28]	; (800f2e0 <_read_r+0x20>)
 800f2c4:	4605      	mov	r5, r0
 800f2c6:	4608      	mov	r0, r1
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	6022      	str	r2, [r4, #0]
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f7f1 fcd8 	bl	8000c84 <_read>
 800f2d4:	1c43      	adds	r3, r0, #1
 800f2d6:	d102      	bne.n	800f2de <_read_r+0x1e>
 800f2d8:	6823      	ldr	r3, [r4, #0]
 800f2da:	b103      	cbz	r3, 800f2de <_read_r+0x1e>
 800f2dc:	602b      	str	r3, [r5, #0]
 800f2de:	bd38      	pop	{r3, r4, r5, pc}
 800f2e0:	200069dc 	.word	0x200069dc

0800f2e4 <_fstat_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4c07      	ldr	r4, [pc, #28]	; (800f304 <_fstat_r+0x20>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	6023      	str	r3, [r4, #0]
 800f2f2:	f7f1 fd0c 	bl	8000d0e <_fstat>
 800f2f6:	1c43      	adds	r3, r0, #1
 800f2f8:	d102      	bne.n	800f300 <_fstat_r+0x1c>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	b103      	cbz	r3, 800f300 <_fstat_r+0x1c>
 800f2fe:	602b      	str	r3, [r5, #0]
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop
 800f304:	200069dc 	.word	0x200069dc

0800f308 <_isatty_r>:
 800f308:	b538      	push	{r3, r4, r5, lr}
 800f30a:	4c06      	ldr	r4, [pc, #24]	; (800f324 <_isatty_r+0x1c>)
 800f30c:	2300      	movs	r3, #0
 800f30e:	4605      	mov	r5, r0
 800f310:	4608      	mov	r0, r1
 800f312:	6023      	str	r3, [r4, #0]
 800f314:	f7f1 fd0b 	bl	8000d2e <_isatty>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d102      	bne.n	800f322 <_isatty_r+0x1a>
 800f31c:	6823      	ldr	r3, [r4, #0]
 800f31e:	b103      	cbz	r3, 800f322 <_isatty_r+0x1a>
 800f320:	602b      	str	r3, [r5, #0]
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	200069dc 	.word	0x200069dc

0800f328 <_init>:
 800f328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32a:	bf00      	nop
 800f32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f32e:	bc08      	pop	{r3}
 800f330:	469e      	mov	lr, r3
 800f332:	4770      	bx	lr

0800f334 <_fini>:
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f336:	bf00      	nop
 800f338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33a:	bc08      	pop	{r3}
 800f33c:	469e      	mov	lr, r3
 800f33e:	4770      	bx	lr

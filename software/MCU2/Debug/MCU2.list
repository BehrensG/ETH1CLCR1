
MCU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003bfc  08003bfc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bfc  08003bfc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08003c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  24000010  08003c14  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003ac  08003c14  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001519c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b8  00000000  00000000  000351da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00037498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  00038058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034fbd  00000000  00000000  00038b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a0fa  00000000  00000000  0006dafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001514d1  00000000  00000000  00077bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c90c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003028  00000000  00000000  001c9144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003bd4 	.word	0x08003bd4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003bd4 	.word	0x08003bd4

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 ff60 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f812 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 fb0c 	bl	8000900 <MX_GPIO_Init>
  MX_I2C4_Init();
 80002e8:	f000 f8cc 	bl	8000484 <MX_I2C4_Init>
  MX_SPI1_Init();
 80002ec:	f000 f90a 	bl	8000504 <MX_SPI1_Init>
  MX_SPI2_Init();
 80002f0:	f000 f95e 	bl	80005b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80002f4:	f000 f9b2 	bl	800065c <MX_SPI3_Init>
  MX_SPI4_Init();
 80002f8:	f000 fa06 	bl	8000708 <MX_SPI4_Init>
  MX_SPI5_Init();
 80002fc:	f000 fa54 	bl	80007a8 <MX_SPI5_Init>
  MX_SPI6_Init();
 8000300:	f000 faa8 	bl	8000854 <MX_SPI6_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x2c>
	...

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b0cc      	sub	sp, #304	; 0x130
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000312:	224c      	movs	r2, #76	; 0x4c
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fc54 	bl	8003bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000320:	2220      	movs	r2, #32
 8000322:	2100      	movs	r1, #0
 8000324:	4618      	mov	r0, r3
 8000326:	f003 fc4d 	bl	8003bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	4618      	mov	r0, r3
 8000330:	23bc      	movs	r3, #188	; 0xbc
 8000332:	461a      	mov	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f003 fc45 	bl	8003bc4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800033a:	2002      	movs	r0, #2
 800033c:	f001 fba0 	bl	8001a80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	4b4d      	ldr	r3, [pc, #308]	; (800047c <SystemClock_Config+0x174>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a4c      	ldr	r2, [pc, #304]	; (800047c <SystemClock_Config+0x174>)
 800034c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b4a      	ldr	r3, [pc, #296]	; (800047c <SystemClock_Config+0x174>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	4b48      	ldr	r3, [pc, #288]	; (8000480 <SystemClock_Config+0x178>)
 8000360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000362:	4a47      	ldr	r2, [pc, #284]	; (8000480 <SystemClock_Config+0x178>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036a:	4b45      	ldr	r3, [pc, #276]	; (8000480 <SystemClock_Config+0x178>)
 800036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036e:	f003 0201 	and.w	r2, r3, #1
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800037a:	bf00      	nop
 800037c:	4b3f      	ldr	r3, [pc, #252]	; (800047c <SystemClock_Config+0x174>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000388:	d1f8      	bne.n	800037c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000398:	2302      	movs	r3, #2
 800039a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	2302      	movs	r3, #2
 80003a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 240;
 80003aa:	23f0      	movs	r3, #240	; 0xf0
 80003ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003b6:	2302      	movs	r3, #2
 80003b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003bc:	2302      	movs	r3, #2
 80003be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80003c2:	2308      	movs	r3, #8
 80003c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fb8b 	bl	8001af4 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80003e4:	f000 fc10 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	233f      	movs	r3, #63	; 0x3f
 80003ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ee:	2303      	movs	r3, #3
 80003f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80003fa:	2308      	movs	r3, #8
 80003fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000400:	2340      	movs	r3, #64	; 0x40
 8000402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000406:	2340      	movs	r3, #64	; 0x40
 8000408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800040c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000410:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000414:	2340      	movs	r3, #64	; 0x40
 8000416:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800041a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800041e:	2104      	movs	r1, #4
 8000420:	4618      	mov	r0, r3
 8000422:	f001 ff3f 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800042c:	f000 fbec 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5|RCC_PERIPHCLK_SPI4
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	f247 0210 	movw	r2, #28688	; 0x7010
 8000438:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI6
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	2200      	movs	r2, #0
 8000440:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	2200      	movs	r2, #0
 8000450:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	2200      	movs	r2, #0
 800045a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fa34 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x16a>
  {
    Error_Handler();
 800046e:	f000 fbcb 	bl	8000c08 <Error_Handler>
  }
}
 8000472:	bf00      	nop
 8000474:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	58024800 	.word	0x58024800
 8000480:	58000400 	.word	0x58000400

08000484 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_I2C4_Init+0x74>)
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <MX_I2C4_Init+0x78>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <MX_I2C4_Init+0x74>)
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <MX_I2C4_Init+0x7c>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_I2C4_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_I2C4_Init+0x74>)
 800049c:	2201      	movs	r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80004be:	480e      	ldr	r0, [pc, #56]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004c0:	f001 f9b6 	bl	8001830 <HAL_I2C_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80004ca:	f000 fb9d 	bl	8000c08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004d2:	f001 fa3d 	bl	8001950 <HAL_I2CEx_ConfigAnalogFilter>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80004dc:	f000 fb94 	bl	8000c08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80004e0:	2100      	movs	r1, #0
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_I2C4_Init+0x74>)
 80004e4:	f001 fa7f 	bl	80019e6 <HAL_I2CEx_ConfigDigitalFilter>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80004ee:	f000 fb8b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2400002c 	.word	0x2400002c
 80004fc:	58001c00 	.word	0x58001c00
 8000500:	307075b1 	.word	0x307075b1

08000504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800050a:	4a28      	ldr	r2, [pc, #160]	; (80005ac <MX_SPI1_Init+0xa8>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000510:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800051e:	220f      	movs	r2, #15
 8000520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000522:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800052a:	2200      	movs	r2, #0
 800052c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000530:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800053c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053e:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000552:	2200      	movs	r2, #0
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000558:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000560:	2200      	movs	r2, #0
 8000562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000566:	2200      	movs	r2, #0
 8000568:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800056c:	2200      	movs	r2, #0
 800056e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000572:	2200      	movs	r2, #0
 8000574:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000578:	2200      	movs	r2, #0
 800057a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800057e:	2200      	movs	r2, #0
 8000580:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000584:	2200      	movs	r2, #0
 8000586:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_SPI1_Init+0xa4>)
 800058a:	2200      	movs	r2, #0
 800058c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000590:	2200      	movs	r2, #0
 8000592:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_SPI1_Init+0xa4>)
 8000596:	f003 f9dd 	bl	8003954 <HAL_SPI_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fb32 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	24000320 	.word	0x24000320
 80005ac:	40013000 	.word	0x40013000

080005b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005b6:	4a28      	ldr	r2, [pc, #160]	; (8000658 <MX_SPI2_Init+0xa8>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_SPI2_Init+0xa4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000604:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_SPI2_Init+0xa4>)
 800060c:	2200      	movs	r2, #0
 800060e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000612:	2200      	movs	r2, #0
 8000614:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000618:	2200      	movs	r2, #0
 800061a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <MX_SPI2_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_SPI2_Init+0xa4>)
 800062a:	2200      	movs	r2, #0
 800062c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI2_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_SPI2_Init+0xa4>)
 8000642:	f003 f987 	bl	8003954 <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800064c:	f000 fadc 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	24000078 	.word	0x24000078
 8000658:	40003800 	.word	0x40003800

0800065c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000662:	4a28      	ldr	r2, [pc, #160]	; (8000704 <MX_SPI3_Init+0xa8>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800066c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000676:	2203      	movs	r2, #3
 8000678:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_SPI3_Init+0xa4>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800068c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000694:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_SPI3_Init+0xa4>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_SPI3_Init+0xa4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_SPI3_Init+0xa4>)
 80006ee:	f003 f931 	bl	8003954 <HAL_SPI_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80006f8:	f000 fa86 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	24000210 	.word	0x24000210
 8000704:	40003c00 	.word	0x40003c00

08000708 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <MX_SPI4_Init+0x98>)
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <MX_SPI4_Init+0x9c>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000712:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_SPI4_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000720:	2203      	movs	r2, #3
 8000722:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_SPI4_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_SPI4_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_SPI4_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_SPI4_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_SPI4_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_SPI4_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_SPI4_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_SPI4_Init+0x98>)
 800078c:	f003 f8e2 	bl	8003954 <HAL_SPI_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_SPI4_Init+0x92>
  {
    Error_Handler();
 8000796:	f000 fa37 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	24000298 	.word	0x24000298
 80007a4:	40013400 	.word	0x40013400

080007a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_SPI5_Init+0xa4>)
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_SPI5_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_SPI5_Init+0xa4>)
 80007b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_SPI5_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_SPI5_Init+0xa4>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_SPI5_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_SPI5_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_SPI5_Init+0xa4>)
 80007d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_SPI5_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI5_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_SPI5_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI5_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI5_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI5_Init+0xa4>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI5_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI5_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI5_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI5_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI5_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI5_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI5_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI5_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI5_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI5_Init+0xa4>)
 8000838:	f003 f88c 	bl	8003954 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 f9e1 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24000100 	.word	0x24000100
 8000850:	40015000 	.word	0x40015000

08000854 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_SPI6_Init+0xa4>)
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <MX_SPI6_Init+0xa8>)
 800085c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000860:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000864:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_SPI6_Init+0xa4>)
 800086e:	2203      	movs	r2, #3
 8000870:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_SPI6_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000880:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000884:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_SPI6_Init+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_SPI6_Init+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI6_Init+0xa4>)
 800089a:	2200      	movs	r2, #0
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_SPI6_Init+0xa4>)
 80008e4:	f003 f836 	bl	8003954 <HAL_SPI_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 80008ee:	f000 f98b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	24000188 	.word	0x24000188
 80008fc:	58001400 	.word	0x58001400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	4bb4      	ldr	r3, [pc, #720]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	4ab2      	ldr	r2, [pc, #712]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000926:	4bb0      	ldr	r3, [pc, #704]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	623b      	str	r3, [r7, #32]
 8000932:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	4bac      	ldr	r3, [pc, #688]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	4aab      	ldr	r2, [pc, #684]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000944:	4ba8      	ldr	r3, [pc, #672]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000952:	4ba5      	ldr	r3, [pc, #660]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4aa3      	ldr	r2, [pc, #652]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 800095a:	f043 0320 	orr.w	r3, r3, #32
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4ba1      	ldr	r3, [pc, #644]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000970:	4b9d      	ldr	r3, [pc, #628]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000976:	4a9c      	ldr	r2, [pc, #624]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000980:	4b99      	ldr	r3, [pc, #612]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b96      	ldr	r3, [pc, #600]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a94      	ldr	r2, [pc, #592]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b92      	ldr	r3, [pc, #584]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b8e      	ldr	r3, [pc, #568]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a8d      	ldr	r2, [pc, #564]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b8a      	ldr	r3, [pc, #552]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	4b87      	ldr	r3, [pc, #540]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a85      	ldr	r2, [pc, #532]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b83      	ldr	r3, [pc, #524]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e8:	4b7f      	ldr	r3, [pc, #508]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ee:	4a7e      	ldr	r2, [pc, #504]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f8:	4b7b      	ldr	r3, [pc, #492]	; (8000be8 <MX_GPIO_Init+0x2e8>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU1_STATUS_IN_Pin|CXN_REL1_Pin|CXN_REL2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f248 0130 	movw	r1, #32816	; 0x8030
 8000a0c:	4877      	ldr	r0, [pc, #476]	; (8000bec <MX_GPIO_Init+0x2ec>)
 8000a0e:	f000 fef5 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DAC_nCLR_GPIO_Port, DAC_nCLR_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	4876      	ldr	r0, [pc, #472]	; (8000bf0 <MX_GPIO_Init+0x2f0>)
 8000a18:	f000 fef0 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DAC_nLDAC_Pin|GPIO_PIN_11|EEPROM_WP_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f642 0120 	movw	r1, #10272	; 0x2820
 8000a22:	4873      	ldr	r0, [pc, #460]	; (8000bf0 <MX_GPIO_Init+0x2f0>)
 8000a24:	f000 feea 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RR_nRST_GPIO_Port, RR_nRST_Pin, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2108      	movs	r1, #8
 8000a2c:	486f      	ldr	r0, [pc, #444]	; (8000bec <MX_GPIO_Init+0x2ec>)
 8000a2e:	f000 fee5 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|G1A1_CTR_Pin 
 8000a32:	2200      	movs	r2, #0
 8000a34:	f240 31f7 	movw	r1, #1015	; 0x3f7
 8000a38:	486e      	ldr	r0, [pc, #440]	; (8000bf4 <MX_GPIO_Init+0x2f4>)
 8000a3a:	f000 fedf 	bl	80017fc <HAL_GPIO_WritePin>
                          |G1A0_CTR_Pin|G2A1_CTR_Pin|G2A0_CTR_Pin|ADC_NULL2_Pin 
                          |ADC_NULL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PA_NULL_Pin|PA_EM_Pin|PA_50MV_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000a44:	486c      	ldr	r0, [pc, #432]	; (8000bf8 <MX_GPIO_Init+0x2f8>)
 8000a46:	f000 fed9 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RR_10CRT_Pin|RR_100CRT_Pin|RR_1KCRT_Pin|RR_10KCRT_Pin 
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f64f 61f0 	movw	r1, #65264	; 0xfef0
 8000a50:	486a      	ldr	r0, [pc, #424]	; (8000bfc <MX_GPIO_Init+0x2fc>)
 8000a52:	f000 fed3 	bl	80017fc <HAL_GPIO_WritePin>
                          |RR_100KCRT_Pin|RR_RELAYCRT_Pin|RR_HA3_COMP_Pin|SR_10KCTR_Pin 
                          |SR_1KCRT_Pin|SR_100CRT_Pin|SR_10CRT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CXN_REL1G2_GPIO_Port, CXN_REL1G2_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4869      	ldr	r0, [pc, #420]	; (8000c00 <MX_GPIO_Init+0x300>)
 8000a5c:	f000 fece 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CXN_REL2G3_Pin|CXN_REL3_Pin|CXN_REL4_Pin|CXN_REL5_Pin 
 8000a60:	2200      	movs	r2, #0
 8000a62:	f640 21f8 	movw	r1, #2808	; 0xaf8
 8000a66:	4866      	ldr	r0, [pc, #408]	; (8000c00 <MX_GPIO_Init+0x300>)
 8000a68:	f000 fec8 	bl	80017fc <HAL_GPIO_WritePin>
                          |CXN_REL6_Pin|FB_CAP_Pin|FB_nRST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MCU1_GPIO_OUT1_Pin MCU1_GPIO_OUT2_Pin RR_RDY_Pin */
  GPIO_InitStruct.Pin = MCU1_GPIO_OUT1_Pin|MCU1_GPIO_OUT2_Pin|RR_RDY_Pin;
 8000a6c:	f246 0301 	movw	r3, #24577	; 0x6001
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	485a      	ldr	r0, [pc, #360]	; (8000bec <MX_GPIO_Init+0x2ec>)
 8000a82:	f000 fd0b 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU1_STATUS_IN_Pin CXN_REL1_Pin CXN_REL2_Pin */
  GPIO_InitStruct.Pin = MCU1_STATUS_IN_Pin|CXN_REL1_Pin|CXN_REL2_Pin;
 8000a86:	f248 0330 	movw	r3, #32816	; 0x8030
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4853      	ldr	r0, [pc, #332]	; (8000bec <MX_GPIO_Init+0x2ec>)
 8000aa0:	f000 fcfc 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : DAC_nCLR_Pin DAC_nLDAC_Pin EEPROM_WP_Pin */
  GPIO_InitStruct.Pin = DAC_nCLR_Pin|DAC_nLDAC_Pin|EEPROM_WP_Pin;
 8000aa4:	f242 0330 	movw	r3, #8240	; 0x2030
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	484c      	ldr	r0, [pc, #304]	; (8000bf0 <MX_GPIO_Init+0x2f0>)
 8000abe:	f000 fced 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : RR_nRST_Pin */
  GPIO_InitStruct.Pin = RR_nRST_Pin;
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RR_nRST_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4844      	ldr	r0, [pc, #272]	; (8000bec <MX_GPIO_Init+0x2ec>)
 8000ada:	f000 fcdf 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_nALARM_Pin */
  GPIO_InitStruct.Pin = ADC_nALARM_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_nALARM_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4844      	ldr	r0, [pc, #272]	; (8000c04 <MX_GPIO_Init+0x304>)
 8000af2:	f000 fcd3 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 G1A1_CTR_Pin 
                           G1A0_CTR_Pin G2A1_CTR_Pin G2A0_CTR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|G1A1_CTR_Pin 
 8000af6:	23f7      	movs	r3, #247	; 0xf7
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
                          |G1A0_CTR_Pin|G2A1_CTR_Pin|G2A0_CTR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4839      	ldr	r0, [pc, #228]	; (8000bf4 <MX_GPIO_Init+0x2f4>)
 8000b0e:	f000 fcc5 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4831      	ldr	r0, [pc, #196]	; (8000bf0 <MX_GPIO_Init+0x2f0>)
 8000b2c:	f000 fcb6 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA_NULL_Pin PA_EM_Pin PA_50MV_Pin */
  GPIO_InitStruct.Pin = PA_NULL_Pin|PA_EM_Pin|PA_50MV_Pin;
 8000b30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_GPIO_Init+0x2f8>)
 8000b4a:	f000 fca7 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_10CRT_Pin RR_100CRT_Pin RR_1KCRT_Pin RR_10KCRT_Pin 
                           RR_100KCRT_Pin RR_RELAYCRT_Pin RR_HA3_COMP_Pin SR_10KCTR_Pin 
                           SR_1KCRT_Pin SR_10CRT_Pin */
  GPIO_InitStruct.Pin = RR_10CRT_Pin|RR_100CRT_Pin|RR_1KCRT_Pin|RR_10KCRT_Pin 
 8000b4e:	f64f 63b0 	movw	r3, #65200	; 0xfeb0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |RR_100KCRT_Pin|RR_RELAYCRT_Pin|RR_HA3_COMP_Pin|SR_10KCTR_Pin 
                          |SR_1KCRT_Pin|SR_10CRT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	4825      	ldr	r0, [pc, #148]	; (8000bfc <MX_GPIO_Init+0x2fc>)
 8000b68:	f000 fc98 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : CXN_REL1G2_Pin CXN_REL2G3_Pin CXN_REL3_Pin CXN_REL4_Pin 
                           CXN_REL5_Pin CXN_REL6_Pin FB_CAP_Pin FB_nRST_Pin */
  GPIO_InitStruct.Pin = CXN_REL1G2_Pin|CXN_REL2G3_Pin|CXN_REL3_Pin|CXN_REL4_Pin 
 8000b6c:	f640 23fc 	movw	r3, #2812	; 0xafc
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
                          |CXN_REL5_Pin|CXN_REL6_Pin|FB_CAP_Pin|FB_nRST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	481e      	ldr	r0, [pc, #120]	; (8000c00 <MX_GPIO_Init+0x300>)
 8000b86:	f000 fc89 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : SR_100CRT_Pin */
  GPIO_InitStruct.Pin = SR_100CRT_Pin;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SR_100CRT_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <MX_GPIO_Init+0x2fc>)
 8000ba2:	f000 fc7b 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pin : FB_RDY_Pin */
  GPIO_InitStruct.Pin = FB_RDY_Pin;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(FB_RDY_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_GPIO_Init+0x300>)
 8000bbc:	f000 fc6e 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_NULL2_Pin ADC_NULL1_Pin */
  GPIO_InitStruct.Pin = ADC_NULL2_Pin|ADC_NULL1_Pin;
 8000bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <MX_GPIO_Init+0x2f4>)
 8000bda:	f000 fc5f 	bl	800149c <HAL_GPIO_Init>

}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020800 	.word	0x58020800
 8000bf0:	58021400 	.word	0x58021400
 8000bf4:	58020400 	.word	0x58020400
 8000bf8:	58021000 	.word	0x58021000
 8000bfc:	58020c00 	.word	0x58020c00
 8000c00:	58021800 	.word	0x58021800
 8000c04:	58020000 	.word	0x58020000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12e      	bne.n	8000ccc <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000c76:	f043 0320 	orr.w	r3, r3, #32
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0320 	and.w	r3, r3, #32
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration    
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c92:	2312      	movs	r3, #18
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <HAL_I2C_MspInit+0x90>)
 8000caa:	f000 fbf7 	bl	800149c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58001c00 	.word	0x58001c00
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58021400 	.word	0x58021400

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b096      	sub	sp, #88	; 0x58
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4aa1      	ldr	r2, [pc, #644]	; (8000f84 <HAL_SPI_MspInit+0x2a4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12e      	bne.n	8000d60 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d02:	4ba1      	ldr	r3, [pc, #644]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d08:	4a9f      	ldr	r2, [pc, #636]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d12:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8000d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b99      	ldr	r3, [pc, #612]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a98      	ldr	r2, [pc, #608]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b95      	ldr	r3, [pc, #596]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d3e:	23f0      	movs	r3, #240	; 0xf0
 8000d40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d56:	4619      	mov	r1, r3
 8000d58:	488c      	ldr	r0, [pc, #560]	; (8000f8c <HAL_SPI_MspInit+0x2ac>)
 8000d5a:	f000 fb9f 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8000d5e:	e15b      	b.n	8001018 <HAL_SPI_MspInit+0x338>
  else if(hspi->Instance==SPI2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <HAL_SPI_MspInit+0x2b0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d14e      	bne.n	8000e08 <HAL_SPI_MspInit+0x128>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d6a:	4b87      	ldr	r3, [pc, #540]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d70:	4a85      	ldr	r2, [pc, #532]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d7a:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d88:	4b7f      	ldr	r3, [pc, #508]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	4a7e      	ldr	r2, [pc, #504]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d98:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
 8000da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b78      	ldr	r3, [pc, #480]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a76      	ldr	r2, [pc, #472]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8000dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ddc:	4619      	mov	r1, r3
 8000dde:	486d      	ldr	r0, [pc, #436]	; (8000f94 <HAL_SPI_MspInit+0x2b4>)
 8000de0:	f000 fb5c 	bl	800149c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000de4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df6:	2305      	movs	r3, #5
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4865      	ldr	r0, [pc, #404]	; (8000f98 <HAL_SPI_MspInit+0x2b8>)
 8000e02:	f000 fb4b 	bl	800149c <HAL_GPIO_Init>
}
 8000e06:	e107      	b.n	8001018 <HAL_SPI_MspInit+0x338>
  else if(hspi->Instance==SPI3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a63      	ldr	r2, [pc, #396]	; (8000f9c <HAL_SPI_MspInit+0x2bc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d14f      	bne.n	8000eb2 <HAL_SPI_MspInit+0x1d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e18:	4a5b      	ldr	r2, [pc, #364]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e22:	4b59      	ldr	r3, [pc, #356]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	4a54      	ldr	r2, [pc, #336]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b4e      	ldr	r3, [pc, #312]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	4a4c      	ldr	r2, [pc, #304]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5e:	4b4a      	ldr	r3, [pc, #296]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e70:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e86:	4619      	mov	r1, r3
 8000e88:	4840      	ldr	r0, [pc, #256]	; (8000f8c <HAL_SPI_MspInit+0x2ac>)
 8000e8a:	f000 fb07 	bl	800149c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483a      	ldr	r0, [pc, #232]	; (8000f94 <HAL_SPI_MspInit+0x2b4>)
 8000eac:	f000 faf6 	bl	800149c <HAL_GPIO_Init>
}
 8000eb0:	e0b2      	b.n	8001018 <HAL_SPI_MspInit+0x338>
  else if(hspi->Instance==SPI4)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <HAL_SPI_MspInit+0x2c0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d12e      	bne.n	8000f1a <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ebc:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ec2:	4a31      	ldr	r2, [pc, #196]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ec8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ef8:	2374      	movs	r3, #116	; 0x74
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f10:	4619      	mov	r1, r3
 8000f12:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <HAL_SPI_MspInit+0x2c4>)
 8000f14:	f000 fac2 	bl	800149c <HAL_GPIO_Init>
}
 8000f18:	e07e      	b.n	8001018 <HAL_SPI_MspInit+0x338>
  else if(hspi->Instance==SPI5)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <HAL_SPI_MspInit+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d145      	bne.n	8000fb0 <HAL_SPI_MspInit+0x2d0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <HAL_SPI_MspInit+0x2a8>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000f60:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f64:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000f72:	2305      	movs	r3, #5
 8000f74:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <HAL_SPI_MspInit+0x2cc>)
 8000f7e:	f000 fa8d 	bl	800149c <HAL_GPIO_Init>
}
 8000f82:	e049      	b.n	8001018 <HAL_SPI_MspInit+0x338>
 8000f84:	40013000 	.word	0x40013000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020000 	.word	0x58020000
 8000f90:	40003800 	.word	0x40003800
 8000f94:	58020800 	.word	0x58020800
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	40003c00 	.word	0x40003c00
 8000fa0:	40013400 	.word	0x40013400
 8000fa4:	58021000 	.word	0x58021000
 8000fa8:	40015000 	.word	0x40015000
 8000fac:	58021400 	.word	0x58021400
  else if(hspi->Instance==SPI6)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_SPI_MspInit+0x340>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d12e      	bne.n	8001018 <HAL_SPI_MspInit+0x338>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	4a11      	ldr	r2, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_SPI_MspInit+0x344>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000ff6:	f44f 43e2 	mov.w	r3, #28928	; 0x7100
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001008:	2305      	movs	r3, #5
 800100a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_SPI_MspInit+0x348>)
 8001014:	f000 fa42 	bl	800149c <HAL_GPIO_Init>
}
 8001018:	bf00      	nop
 800101a:	3758      	adds	r7, #88	; 0x58
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58001400 	.word	0x58001400
 8001024:	58024400 	.word	0x58024400
 8001028:	58021800 	.word	0x58021800

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8fc 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemInit+0xac>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <SystemInit+0xac>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <SystemInit+0xb0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <SystemInit+0xb0>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <SystemInit+0xb0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemInit+0xb0>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <SystemInit+0xb0>)
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <SystemInit+0xb4>)
 80010b6:	4013      	ands	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemInit+0xb0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <SystemInit+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <SystemInit+0xb0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <SystemInit+0xb0>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <SystemInit+0xb0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <SystemInit+0xb0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <SystemInit+0xb0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <SystemInit+0xb0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <SystemInit+0xb0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <SystemInit+0xb0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <SystemInit+0xb0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <SystemInit+0xb0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <SystemInit+0xb0>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <SystemInit+0xb0>)
 800110a:	2200      	movs	r2, #0
 800110c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <SystemInit+0xb8>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <SystemInit+0xbc>)
 8001114:	4013      	ands	r3, r2
 8001116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800111a:	d202      	bcs.n	8001122 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <SystemInit+0xc0>)
 800111e:	2201      	movs	r2, #1
 8001120:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SystemInit+0xac>)
 8001124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001128:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	58024400 	.word	0x58024400
 800113c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001140:	5c001000 	.word	0x5c001000
 8001144:	ffff0000 	.word	0xffff0000
 8001148:	51008108 	.word	0x51008108

0800114c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001152:	e003      	b.n	800115c <LoopCopyDataInit>

08001154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800115a:	3104      	adds	r1, #4

0800115c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001164:	d3f6      	bcc.n	8001154 <CopyDataInit>
  ldr  r2, =_sbss
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001168:	e002      	b.n	8001170 <LoopFillZerobss>

0800116a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800116a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800116c:	f842 3b04 	str.w	r3, [r2], #4

08001170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001174:	d3f9      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001176:	f7ff ff87 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f002 fcff 	bl	8003b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117e:	f7ff f8ab 	bl	80002d8 <main>
  bx  lr    
 8001182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001188:	08003c04 	.word	0x08003c04
  ldr  r0, =_sdata
 800118c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001190:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001194:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001198:	240003ac 	.word	0x240003ac

0800119c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC3_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f947 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011aa:	f001 fa1f 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80011ae:	4601      	mov	r1, r0
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_Init+0x60>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_Init+0x64>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	fa21 f303 	lsr.w	r3, r1, r3
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_Init+0x68>)
 80011c8:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_Init+0x68>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_Init+0x60>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	490b      	ldr	r1, [pc, #44]	; (8001204 <HAL_Init+0x64>)
 80011d8:	5ccb      	ldrb	r3, [r1, r3]
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <HAL_Init+0x6c>)
 80011e4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f812 	bl	8001210 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e002      	b.n	80011fc <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f6:	f7ff fd0f 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	08003bec 	.word	0x08003bec
 8001208:	24000000 	.word	0x24000000
 800120c:	24000004 	.word	0x24000004

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_InitTick+0x60>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e021      	b.n	8001268 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_InitTick+0x64>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f921 	bl	8001482 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001258:	f000 f8f9 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x68>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2400000c 	.word	0x2400000c
 8001274:	24000000 	.word	0x24000000
 8001278:	24000008 	.word	0x24000008

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2400000c 	.word	0x2400000c
 80012a0:	240003a8 	.word	0x240003a8

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	240003a8 	.word	0x240003a8

080012bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetREVID+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	0c1b      	lsrs	r3, r3, #16
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	5c001000 	.word	0x5c001000

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	05fa0000 	.word	0x05fa0000

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff47 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5e 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb2 	bl	80013f4 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_GPIO_Init+0x234>)
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ae:	e194      	b.n	80017da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8186 	beq.w	80017d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x3c>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d00b      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001568:	2b11      	cmp	r3, #17
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b12      	cmp	r3, #18
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80e0 	beq.w	80017d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_GPIO_Init+0x238>)
 8001616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800161a:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_GPIO_Init+0x238>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_GPIO_Init+0x238>)
 8001626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001632:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <HAL_GPIO_Init+0x23c>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_GPIO_Init+0x240>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d052      	beq.n	8001704 <HAL_GPIO_Init+0x268>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_GPIO_Init+0x244>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d031      	beq.n	80016ca <HAL_GPIO_Init+0x22e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_GPIO_Init+0x248>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d02b      	beq.n	80016c6 <HAL_GPIO_Init+0x22a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_GPIO_Init+0x24c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d025      	beq.n	80016c2 <HAL_GPIO_Init+0x226>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_GPIO_Init+0x250>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01f      	beq.n	80016be <HAL_GPIO_Init+0x222>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x254>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d019      	beq.n	80016ba <HAL_GPIO_Init+0x21e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <HAL_GPIO_Init+0x258>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x21a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_GPIO_Init+0x25c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x216>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_GPIO_Init+0x260>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x212>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a17      	ldr	r2, [pc, #92]	; (8001700 <HAL_GPIO_Init+0x264>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x20e>
 80016a6:	2309      	movs	r3, #9
 80016a8:	e02d      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016aa:	230a      	movs	r3, #10
 80016ac:	e02b      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e029      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016b2:	2307      	movs	r3, #7
 80016b4:	e027      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016b6:	2306      	movs	r3, #6
 80016b8:	e025      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e023      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016be:	2304      	movs	r3, #4
 80016c0:	e021      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016c2:	2303      	movs	r3, #3
 80016c4:	e01f      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e01d      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e01b      	b.n	8001706 <HAL_GPIO_Init+0x26a>
 80016ce:	bf00      	nop
 80016d0:	58000080 	.word	0x58000080
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58000400 	.word	0x58000400
 80016dc:	58020000 	.word	0x58020000
 80016e0:	58020400 	.word	0x58020400
 80016e4:	58020800 	.word	0x58020800
 80016e8:	58020c00 	.word	0x58020c00
 80016ec:	58021000 	.word	0x58021000
 80016f0:	58021400 	.word	0x58021400
 80016f4:	58021800 	.word	0x58021800
 80016f8:	58021c00 	.word	0x58021c00
 80016fc:	58022000 	.word	0x58022000
 8001700:	58022400 	.word	0x58022400
 8001704:	2300      	movs	r3, #0
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001716:	4938      	ldr	r1, [pc, #224]	; (80017f8 <HAL_GPIO_Init+0x35c>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800179e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f ae63 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58000400 	.word	0x58000400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff f9f8 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0201 	bic.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001880:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001890:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d107      	bne.n	80018aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e006      	b.n	80018b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d104      	bne.n	80018ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_I2C_Init+0x11c>)
 80018d6:	430b      	orrs	r3, r1
 80018d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	ea42 0103 	orr.w	r1, r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	021a      	lsls	r2, r3, #8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69d9      	ldr	r1, [r3, #28]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	02008000 	.word	0x02008000

08001950 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b20      	cmp	r3, #32
 8001964:	d138      	bne.n	80019d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001970:	2302      	movs	r3, #2
 8001972:	e032      	b.n	80019da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2224      	movs	r2, #36	; 0x24
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d139      	bne.n	8001a70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e033      	b.n	8001a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2224      	movs	r2, #36	; 0x24
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
  }
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00a      	beq.n	8001aaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e01f      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e01d      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	490f      	ldr	r1, [pc, #60]	; (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aba:	f7ff fbf3 	bl	80012a4 <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ac2:	f7ff fbef 	bl	80012a4 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad0:	d901      	bls.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e007      	b.n	8001ae6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_PWREx_ConfigSupply+0x70>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	58024800 	.word	0x58024800

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e3c4      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8087 	beq.w	8001c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b1e:	4ba0      	ldr	r3, [pc, #640]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d007      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46>
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	2b18      	cmp	r3, #24
 8001b2e:	d110      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d06c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x12c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d168      	bne.n	8001c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e39e      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x76>
 8001b5c:	4b90      	ldr	r3, [pc, #576]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a8f      	ldr	r2, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x98>
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xbc>
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a81      	ldr	r2, [pc, #516]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fb68 	bl	80012a4 <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fb64 	bl	80012a4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e352      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe4>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb54 	bl	80012a4 <HAL_GetTick>
 8001bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fb50 	bl	80012a4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e33e      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x10c>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8092 	beq.w	8001d54 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c3a:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <HAL_RCC_OscConfig+0x162>
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2b18      	cmp	r3, #24
 8001c4a:	d12d      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d128      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c56:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e310      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	f7ff fb25 	bl	80012bc <HAL_GetREVID>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_RCC_OscConfig+0x19e>
 8001c7c:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	031b      	lsls	r3, r3, #12
 8001c8a:	4945      	ldr	r1, [pc, #276]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	e060      	b.n	8001d54 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	061b      	lsls	r3, r3, #24
 8001ca0:	493f      	ldr	r1, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca6:	e055      	b.n	8001d54 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d038      	beq.n	8001d22 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0219 	bic.w	r2, r3, #25
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4938      	ldr	r1, [pc, #224]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7ff faef 	bl	80012a4 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff faeb 	bl	80012a4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e2d9      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	f7ff fae8 	bl	80012bc <HAL_GetREVID>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f241 0303 	movw	r3, #4099	; 0x1003
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d80a      	bhi.n	8001d0c <HAL_RCC_OscConfig+0x218>
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	031b      	lsls	r3, r3, #12
 8001d04:	4926      	ldr	r1, [pc, #152]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e023      	b.n	8001d54 <HAL_RCC_OscConfig+0x260>
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	4921      	ldr	r1, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e018      	b.n	8001d54 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fab9 	bl	80012a4 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d36:	f7ff fab5 	bl	80012a4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e2a3      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8091 	beq.w	8001e84 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d007      	beq.n	8001d88 <HAL_RCC_OscConfig+0x294>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b18      	cmp	r3, #24
 8001d7c:	d12f      	bne.n	8001dde <HAL_RCC_OscConfig+0x2ea>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d12a      	bne.n	8001dde <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2b0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d003      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e277      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
 8001da0:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001da4:	f7ff fa8a 	bl	80012bc <HAL_GetREVID>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f241 0303 	movw	r3, #4099	; 0x1003
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d80a      	bhi.n	8001dc8 <HAL_RCC_OscConfig+0x2d4>
 8001db2:	4ba2      	ldr	r3, [pc, #648]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	069b      	lsls	r3, r3, #26
 8001dc0:	499e      	ldr	r1, [pc, #632]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dc6:	e05d      	b.n	8001e84 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dc8:	4b9c      	ldr	r3, [pc, #624]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	4999      	ldr	r1, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ddc:	e052      	b.n	8001e84 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d035      	beq.n	8001e52 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001de6:	4b95      	ldr	r3, [pc, #596]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a94      	ldr	r2, [pc, #592]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff fa57 	bl	80012a4 <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fa53 	bl	80012a4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e241      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e0c:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e18:	f7ff fa50 	bl	80012bc <HAL_GetREVID>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d80a      	bhi.n	8001e3c <HAL_RCC_OscConfig+0x348>
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	4981      	ldr	r1, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	e023      	b.n	8001e84 <HAL_RCC_OscConfig+0x390>
 8001e3c:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	497c      	ldr	r1, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
 8001e50:	e018      	b.n	8001e84 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a79      	ldr	r2, [pc, #484]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fa21 	bl	80012a4 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e66:	f7ff fa1d 	bl	80012a4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e20b      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d036      	beq.n	8001efe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9c:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7ff f9fe 	bl	80012a4 <HAL_GetTick>
 8001ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f7ff f9fa 	bl	80012a4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1e8      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x3b8>
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff f9e4 	bl	80012a4 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f9e0 	bl	80012a4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1ce      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef2:	4b52      	ldr	r3, [pc, #328]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f9c1 	bl	80012a4 <HAL_GetTick>
 8001f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7ff f9bd 	bl	80012a4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1ab      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x432>
 8001f44:	e018      	b.n	8001f78 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a3c      	ldr	r2, [pc, #240]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f52:	f7ff f9a7 	bl	80012a4 <HAL_GetTick>
 8001f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f5a:	f7ff f9a3 	bl	80012a4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e191      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8086 	beq.w	8002092 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_RCC_OscConfig+0x54c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x54c>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f92:	f7ff f987 	bl	80012a4 <HAL_GetTick>
 8001f96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7ff f983 	bl	80012a4 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	; 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e171      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_OscConfig+0x54c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x4da>
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_OscConfig+0x536>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4fc>
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x536>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x51e>
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_RCC_OscConfig+0x548>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x536>
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x548>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01a      	beq.n	8002068 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff f937 	bl	80012a4 <HAL_GetTick>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002038:	e00f      	b.n	800205a <HAL_RCC_OscConfig+0x566>
 800203a:	bf00      	nop
 800203c:	58024400 	.word	0x58024400
 8002040:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff f92e 	bl	80012a4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e11a      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ee      	beq.n	8002044 <HAL_RCC_OscConfig+0x550>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f91c 	bl	80012a4 <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f918 	bl	80012a4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e104      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002086:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80f9 	beq.w	800228e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800209c:	4b7e      	ldr	r3, [pc, #504]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a4:	2b18      	cmp	r3, #24
 80020a6:	f000 80b4 	beq.w	8002212 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	f040 8095 	bne.w	80021de <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f8f0 	bl	80012a4 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f8ec 	bl	80012a4 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0da      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80020e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x7a8>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4967      	ldr	r1, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	628b      	str	r3, [r1, #40]	; 0x28
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	3b01      	subs	r3, #1
 8002106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	3b01      	subs	r3, #1
 8002110:	025b      	lsls	r3, r3, #9
 8002112:	b29b      	uxth	r3, r3
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	3b01      	subs	r3, #1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	3b01      	subs	r3, #1
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002130:	4959      	ldr	r1, [pc, #356]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002136:	4b58      	ldr	r3, [pc, #352]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002142:	4b55      	ldr	r3, [pc, #340]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002146:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x7ac>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800214e:	00d2      	lsls	r2, r2, #3
 8002150:	4951      	ldr	r1, [pc, #324]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	494d      	ldr	r1, [pc, #308]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002164:	4313      	orrs	r3, r2
 8002166:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002168:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	f023 0202 	bic.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	4948      	ldr	r1, [pc, #288]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002186:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	4a40      	ldr	r2, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	4a3d      	ldr	r2, [pc, #244]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021aa:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7ff f875 	bl	80012a4 <HAL_GetTick>
 80021ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff f871 	bl	80012a4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e05f      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x6ca>
 80021dc:	e057      	b.n	800228e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b2e      	ldr	r3, [pc, #184]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 80021e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ea:	f7ff f85b 	bl	80012a4 <HAL_GetTick>
 80021ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff f857 	bl	80012a4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e045      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f0      	bne.n	80021f2 <HAL_RCC_OscConfig+0x6fe>
 8002210:	e03d      	b.n	800228e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_RCC_OscConfig+0x7a4>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b01      	cmp	r3, #1
 8002224:	d031      	beq.n	800228a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d12a      	bne.n	800228a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d122      	bne.n	800228a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d11a      	bne.n	800228a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0a5b      	lsrs	r3, r3, #9
 8002258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d111      	bne.n	800228a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d108      	bne.n	800228a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	0e1b      	lsrs	r3, r3, #24
 800227c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3730      	adds	r7, #48	; 0x30
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58024400 	.word	0x58024400
 800229c:	fffffc0c 	.word	0xfffffc0c
 80022a0:	ffff0007 	.word	0xffff0007

080022a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e18d      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b8a      	ldr	r3, [pc, #552]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b87      	ldr	r3, [pc, #540]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	4985      	ldr	r1, [pc, #532]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b83      	ldr	r3, [pc, #524]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e175      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002300:	429a      	cmp	r2, r3
 8002302:	d908      	bls.n	8002316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4975      	ldr	r1, [pc, #468]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232e:	429a      	cmp	r2, r3
 8002330:	d908      	bls.n	8002344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002332:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	496a      	ldr	r1, [pc, #424]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800235c:	429a      	cmp	r2, r3
 800235e:	d908      	bls.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	495e      	ldr	r1, [pc, #376]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800236e:	4313      	orrs	r3, r2
 8002370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238a:	429a      	cmp	r2, r3
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4953      	ldr	r1, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800239c:	4313      	orrs	r3, r2
 800239e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d908      	bls.n	80023ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f023 020f 	bic.w	r2, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4947      	ldr	r1, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d055      	beq.n	8002486 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4940      	ldr	r1, [pc, #256]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0e7      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d115      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0db      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002424:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cf      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0c7      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4925      	ldr	r1, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002452:	4313      	orrs	r3, r2
 8002454:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7fe ff25 	bl	80012a4 <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245c:	e00a      	b.n	8002474 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245e:	f7fe ff21 	bl	80012a4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0af      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	429a      	cmp	r2, r3
 8002484:	d1eb      	bne.n	800245e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	429a      	cmp	r2, r3
 80024a0:	d208      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d214      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 020f 	bic.w	r2, r3, #15
 80024ca:	4906      	ldr	r1, [pc, #24]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e077      	b.n	80025d4 <HAL_RCC_ClockConfig+0x330>
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002508:	4b34      	ldr	r3, [pc, #208]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4931      	ldr	r1, [pc, #196]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002516:	4313      	orrs	r3, r2
 8002518:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002532:	429a      	cmp	r2, r3
 8002534:	d208      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	4926      	ldr	r1, [pc, #152]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002544:	4313      	orrs	r3, r2
 8002546:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002560:	429a      	cmp	r2, r3
 8002562:	d208      	bcs.n	8002576 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	491a      	ldr	r1, [pc, #104]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002572:	4313      	orrs	r3, r2
 8002574:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800258e:	429a      	cmp	r2, r3
 8002590:	d208      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	490f      	ldr	r1, [pc, #60]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025a4:	f000 f822 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025a8:	4601      	mov	r1, r0
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_RCC_ClockConfig+0x338>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x33c>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa21 f303 	lsr.w	r3, r1, r3
 80025c0:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_RCC_ClockConfig+0x340>)
 80025c2:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCC_ClockConfig+0x344>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fe21 	bl	8001210 <HAL_InitTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80025d2:	7afb      	ldrb	r3, [r7, #11]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	58024400 	.word	0x58024400
 80025e0:	08003bec 	.word	0x08003bec
 80025e4:	24000000 	.word	0x24000000
 80025e8:	24000008 	.word	0x24000008

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f2:	4baf      	ldr	r3, [pc, #700]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025fa:	2b18      	cmp	r3, #24
 80025fc:	f200 814e 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	0800266d 	.word	0x0800266d
 800260c:	0800289d 	.word	0x0800289d
 8002610:	0800289d 	.word	0x0800289d
 8002614:	0800289d 	.word	0x0800289d
 8002618:	0800289d 	.word	0x0800289d
 800261c:	0800289d 	.word	0x0800289d
 8002620:	0800289d 	.word	0x0800289d
 8002624:	0800289d 	.word	0x0800289d
 8002628:	08002693 	.word	0x08002693
 800262c:	0800289d 	.word	0x0800289d
 8002630:	0800289d 	.word	0x0800289d
 8002634:	0800289d 	.word	0x0800289d
 8002638:	0800289d 	.word	0x0800289d
 800263c:	0800289d 	.word	0x0800289d
 8002640:	0800289d 	.word	0x0800289d
 8002644:	0800289d 	.word	0x0800289d
 8002648:	08002699 	.word	0x08002699
 800264c:	0800289d 	.word	0x0800289d
 8002650:	0800289d 	.word	0x0800289d
 8002654:	0800289d 	.word	0x0800289d
 8002658:	0800289d 	.word	0x0800289d
 800265c:	0800289d 	.word	0x0800289d
 8002660:	0800289d 	.word	0x0800289d
 8002664:	0800289d 	.word	0x0800289d
 8002668:	0800269f 	.word	0x0800269f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800266c:	4b90      	ldr	r3, [pc, #576]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002678:	4b8d      	ldr	r3, [pc, #564]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	08db      	lsrs	r3, r3, #3
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	4a8c      	ldr	r2, [pc, #560]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800268a:	e10a      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800268c:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800268e:	61bb      	str	r3, [r7, #24]
    break;
 8002690:	e107      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002692:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002694:	61bb      	str	r3, [r7, #24]
    break;
 8002696:	e104      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002698:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800269a:	61bb      	str	r3, [r7, #24]
    break;
 800269c:	e101      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800269e:	4b84      	ldr	r3, [pc, #528]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80026a8:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026b4:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80026be:	4b7c      	ldr	r3, [pc, #496]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	08db      	lsrs	r3, r3, #3
 80026c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80da 	beq.w	8002896 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d05a      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0x1b2>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d302      	bcc.n	80026f2 <HAL_RCC_GetSysClockFreq+0x106>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d078      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80026f0:	e099      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f2:	4b6f      	ldr	r3, [pc, #444]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02d      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80026fe:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002728:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002738:	ed97 6a02 	vldr	s12, [r7, #8]
 800273c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002740:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002744:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800274c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002758:	e087      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	ee07 3a90 	vmov	s15, r3
 8002760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002764:	eddf 6a57 	vldr	s13, [pc, #348]	; 80028c4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276c:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002780:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002784:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002788:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002790:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002798:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800279c:	e065      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	ee07 3a90 	vmov	s15, r3
 80027a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80027ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b0:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80027c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027e0:	e043      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	ee07 3a90 	vmov	s15, r3
 80027e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 80028cc <HAL_RCC_GetSysClockFreq+0x2e0>
 80027f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f4:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002804:	ed97 6a02 	vldr	s12, [r7, #8]
 8002808:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800280c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002824:	e021      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002830:	eddf 6a25 	vldr	s13, [pc, #148]	; 80028c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002848:	ed97 6a02 	vldr	s12, [r7, #8]
 800284c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80028c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002858:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002868:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002874:	3301      	adds	r3, #1
 8002876:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002882:	edd7 6a07 	vldr	s13, [r7, #28]
 8002886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800288e:	ee17 3a90 	vmov	r3, s15
 8002892:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002894:	e005      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
    break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800289e:	61bb      	str	r3, [r7, #24]
    break;
 80028a0:	bf00      	nop
  }

  return sysclockfreq;
 80028a2:	69bb      	ldr	r3, [r7, #24]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3724      	adds	r7, #36	; 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	58024400 	.word	0x58024400
 80028b4:	03d09000 	.word	0x03d09000
 80028b8:	003d0900 	.word	0x003d0900
 80028bc:	007a1200 	.word	0x007a1200
 80028c0:	46000000 	.word	0x46000000
 80028c4:	4c742400 	.word	0x4c742400
 80028c8:	4a742400 	.word	0x4a742400
 80028cc:	4af42400 	.word	0x4af42400

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028dc:	2300      	movs	r3, #0
 80028de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d03d      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f4:	d013      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80028f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fa:	d802      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002900:	e01f      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002906:	d013      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002908:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800290c:	d01c      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800290e:	e018      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4baf      	ldr	r3, [pc, #700]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4aae      	ldr	r2, [pc, #696]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800291c:	e015      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f000 feb1 	bl	800368c <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800292e:	e00c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 ff5a 	bl	80037f0 <RCCEx_PLL3_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e000      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002950:	4b9f      	ldr	r3, [pc, #636]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295c:	499c      	ldr	r1, [pc, #624]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800295e:	4313      	orrs	r3, r2
 8002960:	650b      	str	r3, [r1, #80]	; 0x50
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b04      	cmp	r3, #4
 800297a:	d826      	bhi.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002999 	.word	0x08002999
 8002988:	080029a7 	.word	0x080029a7
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029d1 	.word	0x080029d1
 8002994:	080029d1 	.word	0x080029d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002998:	4b8d      	ldr	r3, [pc, #564]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a8c      	ldr	r2, [pc, #560]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800299e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029a4:	e015      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fe6d 	bl	800368c <RCCEx_PLL2_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029b6:	e00c      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3324      	adds	r3, #36	; 0x24
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 ff16 	bl	80037f0 <RCCEx_PLL3_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	75fb      	strb	r3, [r7, #23]
      break;
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80029d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b7d      	ldr	r3, [pc, #500]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	f023 0207 	bic.w	r2, r3, #7
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	497a      	ldr	r1, [pc, #488]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	650b      	str	r3, [r1, #80]	; 0x50
 80029ea:	e001      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03e      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	2b80      	cmp	r3, #128	; 0x80
 8002a02:	d01c      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002a04:	2b80      	cmp	r3, #128	; 0x80
 8002a06:	d804      	bhi.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002a10:	e01e      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002a12:	2bc0      	cmp	r3, #192	; 0xc0
 8002a14:	d01f      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1a:	d01e      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002a1c:	e018      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	4a6b      	ldr	r2, [pc, #428]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a2a:	e017      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fe2a 	bl	800368c <RCCEx_PLL2_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a3c:	e00e      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3324      	adds	r3, #36	; 0x24
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fed3 	bl	80037f0 <RCCEx_PLL3_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	75fb      	strb	r3, [r7, #23]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002a56:	bf00      	nop
 8002a58:	e000      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a62:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	4958      	ldr	r1, [pc, #352]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	650b      	str	r3, [r1, #80]	; 0x50
 8002a74:	e001      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a90:	d01f      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a96:	d805      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002aa2:	e01f      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002aa4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002aa8:	d01f      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002aaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002aae:	d01e      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab2:	4b47      	ldr	r3, [pc, #284]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a46      	ldr	r2, [pc, #280]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002abe:	e017      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fde0 	bl	800368c <RCCEx_PLL2_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ad0:	e00e      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3324      	adds	r3, #36	; 0x24
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fe89 	bl	80037f0 <RCCEx_PLL3_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ae2:	e005      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b04:	4932      	ldr	r1, [pc, #200]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	658b      	str	r3, [r1, #88]	; 0x58
 8002b0a:	e001      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d044      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b26:	d01f      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b2c:	d805      	bhi.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002b32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b36:	d00e      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002b38:	e01f      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b3e:	d01f      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b44:	d01e      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002b46:	e018      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b48:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b54:	e017      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd95 	bl	800368c <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b66:	e00e      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fe3e 	bl	80037f0 <RCCEx_PLL3_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b78:	e005      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b9a:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002ba0:	e001      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d035      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d802      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01b      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002bc2:	e017      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d00c      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d018      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002bcc:	e012      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd4:	4baf      	ldr	r3, [pc, #700]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	4aae      	ldr	r2, [pc, #696]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002be0:	e00e      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fd4f 	bl	800368c <RCCEx_PLL2_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf8:	e002      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002bfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c06:	4ba3      	ldr	r3, [pc, #652]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	49a0      	ldr	r1, [pc, #640]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c18:	e001      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d042      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	d01f      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c38:	d805      	bhi.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c42:	d00e      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002c44:	e01f      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c4a:	d01f      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c50:	d01e      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002c52:	e018      	b.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c54:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a8e      	ldr	r2, [pc, #568]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c60:	e017      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fd0f 	bl	800368c <RCCEx_PLL2_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c72:	e00e      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3324      	adds	r3, #36	; 0x24
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fdb8 	bl	80037f0 <RCCEx_PLL3_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c84:	e005      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c98:	4b7e      	ldr	r3, [pc, #504]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	497b      	ldr	r1, [pc, #492]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8002caa:	e001      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d042      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc4:	d01b      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cca:	d805      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d022      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002cd6:	e01b      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cdc:	d01d      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002cde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce2:	d01c      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ce8:	d01b      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fcca 	bl	800368c <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cfc:	e012      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3324      	adds	r3, #36	; 0x24
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fd73 	bl	80037f0 <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d0e:	e009      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d16:	bf00      	nop
 8002d18:	e004      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d2a:	4b5a      	ldr	r3, [pc, #360]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	4957      	ldr	r1, [pc, #348]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	650b      	str	r3, [r1, #80]	; 0x50
 8002d3c:	e001      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d044      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d58:	d01b      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d5e:	d805      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d022      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002d6a:	e01b      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d01d      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d76:	d01c      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002d78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d7c:	d01b      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002d7e:	e011      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fc80 	bl	800368c <RCCEx_PLL2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d90:	e012      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3324      	adds	r3, #36	; 0x24
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fd29 	bl	80037f0 <RCCEx_PLL3_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
      break;
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e004      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e002      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e000      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dbe:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dcc:	4931      	ldr	r1, [pc, #196]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8002dd2:	e001      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dec:	d005      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df2:	d009      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002df8:	e00f      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfa:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e06:	e00c      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc3c 	bl	800368c <RCCEx_PLL2_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e34:	4917      	ldr	r1, [pc, #92]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	650b      	str	r3, [r1, #80]	; 0x50
 8002e3a:	e001      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d035      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d81b      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e99 	.word	0x08002e99
 8002e60:	08002e6d 	.word	0x08002e6d
 8002e64:	08002e7b 	.word	0x08002e7b
 8002e68:	08002e99 	.word	0x08002e99
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e78:	e00f      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2102      	movs	r1, #2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fc03 	bl	800368c <RCCEx_PLL2_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e8a:	e006      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ea0:	4bba      	ldr	r3, [pc, #744]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea4:	f023 0203 	bic.w	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	49b7      	ldr	r1, [pc, #732]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8086 	beq.w	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec6:	4bb2      	ldr	r3, [pc, #712]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4ab1      	ldr	r2, [pc, #708]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe f9e7 	bl	80012a4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ed8:	e009      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe f9e3 	bl	80012a4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d902      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	75fb      	strb	r3, [r7, #23]
        break;
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eee:	4ba8      	ldr	r3, [pc, #672]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0ef      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d166      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f00:	4ba2      	ldr	r3, [pc, #648]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f0a:	4053      	eors	r3, r2
 8002f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f14:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f1e:	4b9b      	ldr	r3, [pc, #620]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a9a      	ldr	r2, [pc, #616]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f2a:	4b98      	ldr	r3, [pc, #608]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a97      	ldr	r2, [pc, #604]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f36:	4a95      	ldr	r2, [pc, #596]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d115      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f9ac 	bl	80012a4 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe f9a8 	bl	80012a4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d902      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	75fb      	strb	r3, [r7, #23]
            break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f68:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ed      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d126      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f88:	d10d      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002f8a:	4b80      	ldr	r3, [pc, #512]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f98:	0919      	lsrs	r1, r3, #4
 8002f9a:	4b7e      	ldr	r3, [pc, #504]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	497b      	ldr	r1, [pc, #492]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	610b      	str	r3, [r1, #16]
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002fa6:	4b79      	ldr	r3, [pc, #484]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4a78      	ldr	r2, [pc, #480]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002fb0:	6113      	str	r3, [r2, #16]
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	4972      	ldr	r1, [pc, #456]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	670b      	str	r3, [r1, #112]	; 0x70
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	75bb      	strb	r3, [r7, #22]
 8002fcc:	e001      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	7dfb      	ldrb	r3, [r7, #23]
 8002fd0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d07d      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	2b28      	cmp	r3, #40	; 0x28
 8002fe4:	d866      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	080030bb 	.word	0x080030bb
 8002ff0:	080030b5 	.word	0x080030b5
 8002ff4:	080030b5 	.word	0x080030b5
 8002ff8:	080030b5 	.word	0x080030b5
 8002ffc:	080030b5 	.word	0x080030b5
 8003000:	080030b5 	.word	0x080030b5
 8003004:	080030b5 	.word	0x080030b5
 8003008:	080030b5 	.word	0x080030b5
 800300c:	08003091 	.word	0x08003091
 8003010:	080030b5 	.word	0x080030b5
 8003014:	080030b5 	.word	0x080030b5
 8003018:	080030b5 	.word	0x080030b5
 800301c:	080030b5 	.word	0x080030b5
 8003020:	080030b5 	.word	0x080030b5
 8003024:	080030b5 	.word	0x080030b5
 8003028:	080030b5 	.word	0x080030b5
 800302c:	080030a3 	.word	0x080030a3
 8003030:	080030b5 	.word	0x080030b5
 8003034:	080030b5 	.word	0x080030b5
 8003038:	080030b5 	.word	0x080030b5
 800303c:	080030b5 	.word	0x080030b5
 8003040:	080030b5 	.word	0x080030b5
 8003044:	080030b5 	.word	0x080030b5
 8003048:	080030b5 	.word	0x080030b5
 800304c:	080030bb 	.word	0x080030bb
 8003050:	080030b5 	.word	0x080030b5
 8003054:	080030b5 	.word	0x080030b5
 8003058:	080030b5 	.word	0x080030b5
 800305c:	080030b5 	.word	0x080030b5
 8003060:	080030b5 	.word	0x080030b5
 8003064:	080030b5 	.word	0x080030b5
 8003068:	080030b5 	.word	0x080030b5
 800306c:	080030bb 	.word	0x080030bb
 8003070:	080030b5 	.word	0x080030b5
 8003074:	080030b5 	.word	0x080030b5
 8003078:	080030b5 	.word	0x080030b5
 800307c:	080030b5 	.word	0x080030b5
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030b5 	.word	0x080030b5
 800308c:	080030bb 	.word	0x080030bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f000 faf8 	bl	800368c <RCCEx_PLL2_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030a0:	e00c      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3324      	adds	r3, #36	; 0x24
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fba1 	bl	80037f0 <RCCEx_PLL3_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
      break;
 80030b8:	e000      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80030ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	492f      	ldr	r1, [pc, #188]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	654b      	str	r3, [r1, #84]	; 0x54
 80030d4:	e001      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d037      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d820      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003137 	.word	0x08003137
 80030f8:	0800310d 	.word	0x0800310d
 80030fc:	0800311f 	.word	0x0800311f
 8003100:	08003137 	.word	0x08003137
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f000 faba 	bl	800368c <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800311c:	e00c      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3324      	adds	r3, #36	; 0x24
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fb63 	bl	80037f0 <RCCEx_PLL3_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	4910      	ldr	r1, [pc, #64]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	654b      	str	r3, [r1, #84]	; 0x54
 8003150:	e001      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d040      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003168:	2b05      	cmp	r3, #5
 800316a:	d827      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031c3 	.word	0x080031c3
 8003178:	08003199 	.word	0x08003199
 800317c:	080031ab 	.word	0x080031ab
 8003180:	080031c3 	.word	0x080031c3
 8003184:	080031c3 	.word	0x080031c3
 8003188:	080031c3 	.word	0x080031c3
 800318c:	58024400 	.word	0x58024400
 8003190:	58024800 	.word	0x58024800
 8003194:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fa74 	bl	800368c <RCCEx_PLL2_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031a8:	e00c      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3324      	adds	r3, #36	; 0x24
 80031ae:	2101      	movs	r1, #1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fb1d 	bl	80037f0 <RCCEx_PLL3_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
      break;
 80031c0:	e000      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80031c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ca:	4bb2      	ldr	r3, [pc, #712]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	49ae      	ldr	r1, [pc, #696]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	658b      	str	r3, [r1, #88]	; 0x58
 80031de:	e001      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d044      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031fa:	d01b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003200:	d805      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d022      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800320c:	e01b      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d01d      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003218:	d01c      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800321a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800321e:	d01b      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003220:	e011      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f000 fa2f 	bl	800368c <RCCEx_PLL2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003232:	e012      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3324      	adds	r3, #36	; 0x24
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fad8 	bl	80037f0 <RCCEx_PLL3_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003244:	e009      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      break;
 800324a:	e006      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800324c:	bf00      	nop
 800324e:	e004      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003250:	bf00      	nop
 8003252:	e002      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003254:	bf00      	nop
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003260:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326e:	4989      	ldr	r1, [pc, #548]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	654b      	str	r3, [r1, #84]	; 0x54
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d044      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d01b      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d805      	bhi.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80032a2:	e01b      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d01d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80032aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80032ae:	d01c      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80032b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b4:	d01b      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80032b6:	e011      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 f9e4 	bl	800368c <RCCEx_PLL2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032c8:	e012      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3324      	adds	r3, #36	; 0x24
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa8d 	bl	80037f0 <RCCEx_PLL3_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032da:	e009      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	75fb      	strb	r3, [r7, #23]
      break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80032e2:	bf00      	nop
 80032e4:	e004      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80032e6:	bf00      	nop
 80032e8:	e002      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80032ea:	bf00      	nop
 80032ec:	e000      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80032ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003304:	4963      	ldr	r1, [pc, #396]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	658b      	str	r3, [r1, #88]	; 0x58
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003318:	2b00      	cmp	r3, #0
 800331a:	d044      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003326:	d01b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332c:	d805      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d022      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003338:	e01b      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d01d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003340:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003344:	d01c      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003346:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800334a:	d01b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800334c:	e011      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f999 	bl	800368c <RCCEx_PLL2_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800335e:	e012      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3324      	adds	r3, #36	; 0x24
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fa42 	bl	80037f0 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003370:	e009      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
      break;
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003378:	bf00      	nop
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339a:	493e      	ldr	r1, [pc, #248]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	658b      	str	r3, [r1, #88]	; 0x58
 80033a0:	e001      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d10a      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3324      	adds	r3, #36	; 0x24
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fa13 	bl	80037f0 <RCCEx_PLL3_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	492c      	ldr	r1, [pc, #176]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d10a      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3324      	adds	r3, #36	; 0x24
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f9f2 	bl	80037f0 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003416:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003424:	491b      	ldr	r1, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d032      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d00d      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003446:	d016      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f91a 	bl	800368c <RCCEx_PLL2_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800345c:	e00c      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3324      	adds	r3, #36	; 0x24
 8003462:	2102      	movs	r1, #2
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f9c3 	bl	80037f0 <RCCEx_PLL3_Config>
 800346a:	4603      	mov	r3, r0
 800346c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	75fb      	strb	r3, [r7, #23]
      break;
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800348c:	4901      	ldr	r1, [pc, #4]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	658b      	str	r3, [r1, #88]	; 0x58
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003494:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d02f      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d00c      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80034b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b8:	d015      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80034ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034be:	d10f      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4b71      	ldr	r3, [pc, #452]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	4a70      	ldr	r2, [pc, #448]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034cc:	e00c      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f98b 	bl	80037f0 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80034e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ee:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fc:	4962      	ldr	r1, [pc, #392]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	654b      	str	r3, [r1, #84]	; 0x54
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d029      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d007      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003522:	e00f      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003530:	e00b      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8a7 	bl	800368c <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003542:	e002      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003550:	4b4d      	ldr	r3, [pc, #308]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	494a      	ldr	r1, [pc, #296]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003562:	e001      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3324      	adds	r3, #36	; 0x24
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f938 	bl	80037f0 <RCCEx_PLL3_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d02f      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359e:	d00c      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80035a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a4:	d802      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d011      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80035aa:	e00d      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d00f      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80035b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b6:	d00e      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035c6:	e007      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	e004      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	4927      	ldr	r1, [pc, #156]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	654b      	str	r3, [r1, #84]	; 0x54
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	491e      	ldr	r1, [pc, #120]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003610:	4313      	orrs	r3, r2
 8003612:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003648:	6113      	str	r3, [r2, #16]
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003654:	490c      	ldr	r1, [pc, #48]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	da08      	bge.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366e:	4906      	ldr	r1, [pc, #24]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003674:	7dbb      	ldrb	r3, [r7, #22]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58024400 	.word	0x58024400

0800368c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800369a:	4b53      	ldr	r3, [pc, #332]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d101      	bne.n	80036aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e099      	b.n	80037de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80036aa:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80036b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b6:	f7fd fdf5 	bl	80012a4 <HAL_GetTick>
 80036ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036bc:	e008      	b.n	80036d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036be:	f7fd fdf1 	bl	80012a4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e086      	b.n	80037de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036d0:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f0      	bne.n	80036be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036dc:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	031b      	lsls	r3, r3, #12
 80036ea:	493f      	ldr	r1, [pc, #252]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	628b      	str	r3, [r1, #40]	; 0x28
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	3b01      	subs	r3, #1
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	b29b      	uxth	r3, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	3b01      	subs	r3, #1
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003720:	4931      	ldr	r1, [pc, #196]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003722:	4313      	orrs	r3, r2
 8003724:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	492d      	ldr	r1, [pc, #180]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003734:	4313      	orrs	r3, r2
 8003736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f023 0220 	bic.w	r2, r3, #32
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4928      	ldr	r1, [pc, #160]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <RCCEx_PLL2_Config+0x160>)
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	69d2      	ldr	r2, [r2, #28]
 8003762:	00d2      	lsls	r2, r2, #3
 8003764:	4920      	ldr	r1, [pc, #128]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003770:	f043 0310 	orr.w	r3, r3, #16
 8003774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003788:	e00f      	b.n	80037aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800379c:	e005      	b.n	80037aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80037a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80037b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fd fd75 	bl	80012a4 <HAL_GetTick>
 80037ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037bc:	e008      	b.n	80037d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037be:	f7fd fd71 	bl	80012a4 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e006      	b.n	80037de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <RCCEx_PLL2_Config+0x15c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	58024400 	.word	0x58024400
 80037ec:	ffff0007 	.word	0xffff0007

080037f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037fe:	4b53      	ldr	r3, [pc, #332]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b03      	cmp	r3, #3
 8003808:	d101      	bne.n	800380e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e099      	b.n	8003942 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800380e:	4b4f      	ldr	r3, [pc, #316]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a4e      	ldr	r2, [pc, #312]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381a:	f7fd fd43 	bl	80012a4 <HAL_GetTick>
 800381e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003820:	e008      	b.n	8003834 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003822:	f7fd fd3f 	bl	80012a4 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e086      	b.n	8003942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003834:	4b45      	ldr	r3, [pc, #276]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003840:	4b42      	ldr	r3, [pc, #264]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	051b      	lsls	r3, r3, #20
 800384e:	493f      	ldr	r1, [pc, #252]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003850:	4313      	orrs	r3, r2
 8003852:	628b      	str	r3, [r1, #40]	; 0x28
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	3b01      	subs	r3, #1
 800385a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	3b01      	subs	r3, #1
 8003864:	025b      	lsls	r3, r3, #9
 8003866:	b29b      	uxth	r3, r3
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	3b01      	subs	r3, #1
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003884:	4931      	ldr	r1, [pc, #196]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	492d      	ldr	r1, [pc, #180]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	4928      	ldr	r1, [pc, #160]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80038ae:	4b27      	ldr	r3, [pc, #156]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <RCCEx_PLL3_Config+0x160>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	69d2      	ldr	r2, [r2, #28]
 80038c6:	00d2      	lsls	r2, r2, #3
 80038c8:	4920      	ldr	r1, [pc, #128]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80038ce:	4b1f      	ldr	r3, [pc, #124]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038ec:	e00f      	b.n	800390e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d106      	bne.n	8003902 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038f4:	4b15      	ldr	r3, [pc, #84]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 80038fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003900:	e005      	b.n	800390e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0e      	ldr	r2, [pc, #56]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391a:	f7fd fcc3 	bl	80012a4 <HAL_GetTick>
 800391e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003920:	e008      	b.n	8003934 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003922:	f7fd fcbf 	bl	80012a4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e006      	b.n	8003942 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <RCCEx_PLL3_Config+0x15c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
 8003950:	ffff0007 	.word	0xffff0007

08003954 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e0e2      	b.n	8003b30 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a70      	ldr	r2, [pc, #448]	; (8003b38 <HAL_SPI_Init+0x1e4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <HAL_SPI_Init+0x46>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6f      	ldr	r2, [pc, #444]	; (8003b3c <HAL_SPI_Init+0x1e8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00a      	beq.n	800399a <HAL_SPI_Init+0x46>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6d      	ldr	r2, [pc, #436]	; (8003b40 <HAL_SPI_Init+0x1ec>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d005      	beq.n	800399a <HAL_SPI_Init+0x46>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	d901      	bls.n	800399a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0ca      	b.n	8003b30 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8d2 	bl	8003b44 <SPI_GetPacketSize>
 80039a0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a64      	ldr	r2, [pc, #400]	; (8003b38 <HAL_SPI_Init+0x1e4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00c      	beq.n	80039c6 <HAL_SPI_Init+0x72>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a62      	ldr	r2, [pc, #392]	; (8003b3c <HAL_SPI_Init+0x1e8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_SPI_Init+0x72>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a61      	ldr	r2, [pc, #388]	; (8003b40 <HAL_SPI_Init+0x1ec>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d002      	beq.n	80039c6 <HAL_SPI_Init+0x72>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d811      	bhi.n	80039ea <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80039ca:	4a5b      	ldr	r2, [pc, #364]	; (8003b38 <HAL_SPI_Init+0x1e4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a59      	ldr	r2, [pc, #356]	; (8003b3c <HAL_SPI_Init+0x1e8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_SPI_Init+0x90>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_SPI_Init+0x1ec>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d104      	bne.n	80039ee <HAL_SPI_Init+0x9a>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d901      	bls.n	80039ee <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0a0      	b.n	8003b30 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd f96c 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a28:	d110      	bne.n	8003a4c <HAL_SPI_Init+0xf8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d10b      	bne.n	8003a4c <HAL_SPI_Init+0xf8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	ea42 0103 	orr.w	r1, r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d113      	bne.n	8003aec <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aea:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40013000 	.word	0x40013000
 8003b3c:	40003800 	.word	0x40003800
 8003b40:	40003c00 	.word	0x40003c00

08003b44 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3307      	adds	r3, #7
 8003b62:	08db      	lsrs	r3, r3, #3
 8003b64:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
	...

08003b7c <__libc_init_array>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	4e0d      	ldr	r6, [pc, #52]	; (8003bb4 <__libc_init_array+0x38>)
 8003b80:	4c0d      	ldr	r4, [pc, #52]	; (8003bb8 <__libc_init_array+0x3c>)
 8003b82:	1ba4      	subs	r4, r4, r6
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	2500      	movs	r5, #0
 8003b88:	42a5      	cmp	r5, r4
 8003b8a:	d109      	bne.n	8003ba0 <__libc_init_array+0x24>
 8003b8c:	4e0b      	ldr	r6, [pc, #44]	; (8003bbc <__libc_init_array+0x40>)
 8003b8e:	4c0c      	ldr	r4, [pc, #48]	; (8003bc0 <__libc_init_array+0x44>)
 8003b90:	f000 f820 	bl	8003bd4 <_init>
 8003b94:	1ba4      	subs	r4, r4, r6
 8003b96:	10a4      	asrs	r4, r4, #2
 8003b98:	2500      	movs	r5, #0
 8003b9a:	42a5      	cmp	r5, r4
 8003b9c:	d105      	bne.n	8003baa <__libc_init_array+0x2e>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba4:	4798      	blx	r3
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	e7ee      	b.n	8003b88 <__libc_init_array+0xc>
 8003baa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bae:	4798      	blx	r3
 8003bb0:	3501      	adds	r5, #1
 8003bb2:	e7f2      	b.n	8003b9a <__libc_init_array+0x1e>
 8003bb4:	08003bfc 	.word	0x08003bfc
 8003bb8:	08003bfc 	.word	0x08003bfc
 8003bbc:	08003bfc 	.word	0x08003bfc
 8003bc0:	08003c00 	.word	0x08003c00

08003bc4 <memset>:
 8003bc4:	4402      	add	r2, r0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d100      	bne.n	8003bce <memset+0xa>
 8003bcc:	4770      	bx	lr
 8003bce:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd2:	e7f9      	b.n	8003bc8 <memset+0x4>

08003bd4 <_init>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	bf00      	nop
 8003bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bda:	bc08      	pop	{r3}
 8003bdc:	469e      	mov	lr, r3
 8003bde:	4770      	bx	lr

08003be0 <_fini>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	bf00      	nop
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr
